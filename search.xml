<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第 15 章 Java 网络编程</title>
    <url>/java-base-course-15-Java-network-programming/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 15 章 Java 网络编程</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 14 章 Java 多线程编程</title>
    <url>/java-base-course-14-Java-multithreading/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 14 章 Java 多线程编程</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 13 章 Java 输入/输出（I/O）流</title>
    <url>/java-base-course-13-Java-input-output-flow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 13 章 Java 输入/输出（I/O）流</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 12 章 Java 反射机制</title>
    <url>/java-base-course-12-Java-reflection-mechanism/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 12 章 Java 反射机制</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 11 章 Java 集合、泛型和枚举</title>
    <url>/java-base-course-11-Java-collection-generics-and-enumerations/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 11 章 Java 集合、泛型和枚举</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 10 章 Java 异常处理</title>
    <url>/java-base-course-10-Java-exception-handling/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 10 章 Java 异常处理</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 9 章 Java 继承和多态</title>
    <url>/java-base-course-9-Java-inheritance-and-polymorphism/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 9 章 Java 继承和多态</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 8 章 Java 类和对象</title>
    <url>/java-base-course-8-Java-classes-and-objects/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 8 章 Java 类和对象</p>
          </div>

<a id="more"></a>

<p>最早的程序开发使用的是结构化程序设计语言，随着时间的流逝，软件的规模逐渐扩大，使用结构化语言会出现各种弊端，导致无休止地拖延开发周期，产品的质量也不尽如人意。这一切都体现了结构化语言不再适合当前的软件开发。现在程序设计者们将另一种开发思想引入程序中，那就是面向对象开发思想。</p>
<p>面向对象最关键的两个词汇是类与对象，实质上可以将类看作对象的抽象，它定义了对象所具有的属性和方法。学习 Java 语言必须掌握类与对象，这样可以从深层次理解 Java 这种面向对象语言的幵发理念。因此，掌握类与对象是学习 Java 语言的基础，可以使开发人员更好、更快地掌握 Java 编程思想与编程方式。</p>
<p>本章将详细介绍 Java 中类的定义和对象的使用。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>掌握类的声明和类的成员</li><li>熟悉类的构造方法及其使用</li><li>掌握对象的创建、销毁和使用</li><li>掌握 main() 方法、构造方法和析构方法的使用</li><li>熟悉 this 关键字的使用</li><li>了解系统提供的常用包</li><li>掌握如何声明和使用包</li></ol>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 面向对象概述<br>第 2 节 Java 认识类和对象<br>第 3 节 Java 类的定义<br>第 4 节 Java 类的属性<br>第 5 节 Java 创建一个学生类<br>第 6 节 Java 成员方法<br>第 7 节 Java this 关键字<br>第 8 节 Java 创建对象<br>第 9 节 Java 访问对象的属性和行为<br>第 10 节 Java 对象的销毁<br>第 11 节 Java 用户修改密码<br>第 12 节 Java 访问控制修饰符<br>第 13 节 Java static 静态修饰符<br>第 14 节 Java final 修饰符<br>第 15 节 Java main()方法<br>第 16 节 Java 方法的可变参数<br>第 17 节 Java 构造方法<br>第 18 节 Java 查询个人信息<br>第 19 节 Java 析构方法<br>第 20 节 Java 包（package）<br>第 21 节 Java 使用自定义包</p>
          </div>


<hr>
<h2 id="第-1-节-Java-面向对象概述"><a href="#第-1-节-Java-面向对象概述" class="headerlink" title="第 1 节 Java 面向对象概述"></a>第 1 节 Java 面向对象概述</h2><p>面向对象简称 OO（Object Oriented），20 世纪 80 年代以后，有了面向对象分析（OOA）、 面向对象设计（OOD）、面向对象程序设计（OOP）等新的系统开发方式模型的研究。</p>
<p>对 Java 语言来说，一切皆是对象。把现实世界中的对象抽象地体现在编程世界中，一个对象代表了某个具体的操作。一个个对象最终组成了完整的程序设计，这些对象可以是独立存在的，也可以是从别的对象继承过来的。对象之间通过相互作用传递信息，实现程序开发。</p>
<p><strong>对象的概念</strong></p>
<p>Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：</p>
<ul>
<li>对象具有属性和行为。</li>
<li>对象具有变化的状态。</li>
<li>对象具有唯一性。</li>
<li>对象都是某个类别的实例。</li>
<li>一切皆为对象，真实世界中的所有事物都可以视为对象。</li>
</ul>
<p>例如，在真实世界的学校里，会有学生和老师等实体，学生有学号、姓名、所在班级等属性（数据），学生还有学习、提问、吃饭和走路等操作。学生只是抽象的描述，这个抽象的描述称为“类”。在学校里活动的是学生个体，即张同学、李同学等，这些具体的个体称为“对象”，“对象”也称为“实例”。</p>
<p><strong>面向对象的三大核心特性</strong></p>
<p>面向对象开发模式更有利于人们开拓思维，在具体的开发过程中便于程序的划分，方便程序员分工合作，提高开发效率。面向对象程序设计有以下优点。</p>
<p>1.可重用性：代码重复使用，减少代码量，提高开发效率。下面介绍的面向对象的三大核心特性（继承、封装和多态）都围绕这个核心。<br>2.可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。<br>3.可管理性：能够将功能与数据结合，方便管理。</p>
<p>该开发模式之所以使程序设计更加完善和强大，主要是因为面向对象具有继承、封装和多态 3 个核心特性。</p>
<p>（1）继承性</p>
<p>如同生活中的子女继承父母拥有的所有财产，程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。</p>
<p>例如定义一个语文老师类和数学老师类，如果不采用继承方式，那么两个类中需要定义的属性和方法如图 1 所示。</p>
<p><img src="/java-base-course-8-Java-classes-and-objects/java-base-course-8-1-1.jpg" alt="图 1  语文老师类和数学老师类中的属性和方法"></p>
<p>从图 1 能够看出，语文老师类和数学老师类中的许多属性和方法相同，这些相同的属性和方法可以提取出来放在一个父类中，这个父类用于被语文老师类和数学老师类继承。当然父类还可以继承别的类，如图 2 所示。</p>
<p><img src="/java-base-course-8-Java-classes-and-objects/java-base-course-8-1-2.jpg" alt="图 2  父类继承示例图"></p>
<p>总结图 2 的继承关系，可以用概括的树形关系来表示，如图 3 所示。</p>
<p><img src="/java-base-course-8-Java-classes-and-objects/java-base-course-8-1-3.jpg" alt="图 3  类继承示例图"></p>
<p>从图 3 中可以看出，学校主要人员是一个大的类别，老师和学生是学校主要人员的两个子类，而老师又可以分为语文老师和数学老师两个子类，学生也可以分为班长和组长两个子类。</p>
<p>使用这种层次形的分类方式，是为了将多个类的通用属性和方法提取出来，放在它们的父类中，然后只需要在子类中各自定义自己独有的属性和方法，并以继承的形式在父类中获取它们的通用属性和方法即可。</p>
<p>提示：C++ 支持多继承，多继承就是一个子类可有多个父类。例如，客轮是轮船也是交通工具，客轮的父类是轮船和交通工具。多继承会引起很多冲突问题，因此现在很多面向对象的语言都不支持多继承。Java 语言是单继承的，即只能有一个父类，但 Java 可以实现多个接口（接口类似于类，但接口的成员没有执行体。详细了解可参考《Java接口》一节），可以防止多继承所引起的冲突问题。</p>
<p>（2）封装性</p>
<p>封装是将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。封装的目的在于保护信息，使用它的主要优点如下。<br>保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。<br>隐藏细节信息，一些不需要程序员修改和使用的信息，比如取款机中的键盘，用户只需要知道按哪个键实现什么操作就可以，至于它内部是如何运行的，用户不需要知道。<br>有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。例如 U 盘，不管里面的存储方式怎么改变，只要 U 盘上的 USB 接口不变，就不会影响用户的正常操作。<br>提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用。例如，一个 U 盘可以在多台电脑上使用。</p>
<p>Java 语言的基本封装单位是类。由于类的用途是封装复杂性，所以类的内部有隐藏实现复杂性的机制。Java 提供了私有和公有的访问模式，类的公有接口代表外部的用户应该知道或可以知道的每件东西，私有的方法数据只能通过该类的成员代码来访问，这就可以确保不会发生不希望的事情。</p>
<p>（3）多态性</p>
<p>面向对象的多态性，即“一个接口，多个方法”。多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。多态性允许一个接口被多个同类使用，弥补了单继承的不足。多态概念可以用树形关系来表示，如图 4 所示。</p>
<p><img src="/java-base-course-8-Java-classes-and-objects/java-base-course-8-1-4.jpg" alt="图 4  多态示例图"></p>
<p>从图 4 中可以看出，老师类中的许多属性和方法可以被语文老师类和数学老师类同时使用，这样也不易出错。</p>
<hr>
<h2 id="第-2-节-Java-认识类和对象"><a href="#第-2-节-Java-认识类和对象" class="headerlink" title="第 2 节 Java 认识类和对象"></a>第 2 节 Java 认识类和对象</h2><p>在面向对象中，类和对象是最基本、最重要的组成单元。类实际上是表示一个客观世界某类群体的一些基本特征抽象。对象就是表示一个个具体的东西。所以说类是对象的抽象，对象是类的具体。</p>
<p>让我们来看看人类所具有的一些特征，这些特征包括属性（一些参数、数值）以及方法（一些行为，他能干什么）。</p>
<p>每个人都有身高、体重、年龄、血型等属性，人会劳动、会直立行走、会用自己的头脑去创造工具等方法。人之所以能区别于其他类型的动物，是因为每个人都具有“人”这个群体的属性与方法。</p>
<p>“人类”只是一个抽象的概念，它仅仅是一个概念，是不存在的实体！但是所有具备“人类”这个群体的属性与方法的对象都叫人！这个对象“人” 是实际存在的实体！每个人都是“人”这个群体的一个对象。</p>
<p>老虎为什么不是人？因为它不具备“人”这个群体的属性与方法，老虎不会直立行走，不会使用工具等，所以说老虎不是人！也就是说，类是概念模型，定义对象的所有特性和所需的操作，对象是真实的模型，是一个具体的实体。</p>
<p>由此可见，类是描述了一组有相同特性（属性）和相同行为（方法）的一组对象的集合。</p>
<p>对象或实体所拥有的特征在类中表示时称为类的属性。例如，每个人都具有姓名、年龄和体重，这是所有人共有的特征。但是每一个对象的属性值又各不相同，例如，小明和小红都具有体重这个属性，但是他们的体重值是不同的。</p>
<p>对象执行的操作称为类的方法。比如，“人”这个对象都具有的行为是“吃饭”，因此，吃饭就是“人”类的一个方法。</p>
<p>综上所述，类是描述实体的“模板”和“原型”，它定义了属于这个类的对象所应该具有的状态和行为。比如一名学生在上课。一名正在上课的学生是类，它定义的信息有：姓名、上课。</p>
<p>使用该类定义的不同姓名的人在上课是对象，他们可能是小明、小红、小丽、张会等。在 Java 面向对象编程中，用自定义的类模型可以创建该类的一个实例，也就是对象。</p>
<p>类是实体对象的概念模型，因此通常是笼统的、不具体的。关于类和对象，初学者在理解上是存在一定难度的。表 1 给出了类和对象的更多示例。</p>
<p>表1 类和对象的示例</p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">人</td>
<td align="center">正在清洁的环卫工人小刘</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">教室里的学生张丽</td>
</tr>
<tr>
<td align="center">汽车</td>
<td align="center">一辆黄色的宝马跑车</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">一辆白色的林肯轿车</td>
</tr>
<tr>
<td align="center">动物</td>
<td align="center">一只叫“猫咪”的小花猫</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">一只叫“欢欢”的贵宾犬</td>
</tr>
</tbody></table>
<p>类是构造面向对象程序的基本单位，是抽取了同类对象的共同属性和方法所形成的对象或实体的“模板”。而对象是现实世界中实体的描述，对象要创建才存在，有了对象才能对对象进行操作。类是对象的模板，对象是类的实例。</p>
<hr>
<h2 id="第-3-节-Java-类的定义"><a href="#第-3-节-Java-类的定义" class="headerlink" title="第 3 节 Java 类的定义"></a>第 3 节 Java 类的定义</h2><p>类是 Java 中的一种重要的引用数据类型，也是组成 Java 程序的基本要素，因为所有的 Java 程序都是基于类的。本节介绍如何定义类。</p>
<p>在 Java 中定义一个类，需要使用 class 关键字、一个自定义的类名和一对表示程序体的大括号。完整语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[public][abstract|final]class&lt;class_name&gt;[extends&lt;class_name&gt;][implements&lt;interface_name&gt;] &#123;</span><br><span class="line">    <span class="comment">// 定义属性部分</span></span><br><span class="line">    &lt;property_type&gt;&lt;property1&gt;;</span><br><span class="line">    &lt;property_type&gt;&lt;property2&gt;;</span><br><span class="line">    &lt;property_type&gt;&lt;property3&gt;;</span><br><span class="line">    …</span><br><span class="line">    <span class="comment">// 定义方法部分</span></span><br><span class="line">    function1();</span><br><span class="line">    function2();</span><br><span class="line">    function3();</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提示：上述语法中，中括号“[]”中的部分表示可以省略，竖线“|”表示“或关系”，例如 abstract|final，说明可以使用 abstract 或 final 关键字，但是两个关键字不能同时出现。</p>
<p>上述语法中各关键字的描述如下。</p>
<ul>
<li>public：表示“共有”的意思。如果使用 public 修饰，则可以被其他类和程序访问。每个 Java 程序的主类都必须是 public 类，作为公共工具供其他类和程序使用的类应定义为 public 类。</li>
<li>abstract：如果类被 abstract 修饰，则该类为抽象类，抽象类不能被实例化，但抽象类中可以有抽象方法（使用 abstract 修饰的方法）和具体方法（没有使用 abstract 修饰的方法）。继承该抽象类的所有子类都必须实现该抽象类中的所有抽象方法（除非子类也是抽象类）。</li>
<li>final：如果类被 final 修饰，则不允许被继承。</li>
<li>class：声明类的关键字。</li>
<li>class_name：类的名称。</li>
<li>extends：表示继承其他类。</li>
<li>implements：表示实现某些接口。</li>
<li>property_type：表示成员变量的类型。</li>
<li>property：表示成员变量名称。</li>
<li>function()：表示成员方法名称。</li>
</ul>
<p>Java 类名的命名规则：<br>1.类名应该以下划线（_）或字母开头，最好以字母开头。<br>2.第一个字母最好大写，如果类名由多个单词组成，则每个单词的首字母最好都大写。<br>3.类名不能为 Java 中的关键字，例如 boolean、this、int 等。<br>4.类名不能包含任何嵌入的空格或点号以及除了下划线（_）和美元符号（$）字符之外的特殊字符。<br><strong>例 1</strong><br>创建一个新的类，就是创建一个新的数据类型。实例化一个类，就是得到类的一个对象。因此，对象就是一组变量和相关方法的集合，其中变量表明对象的状态和属性，方法表明对象所具有的行为。定义一个类的步骤如下所述。</p>
<p>(1) 声明类。编写类的最外层框架，声明一个名称为 Person 的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类的主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 编写类的属性。类中的数据和方法统称为类成员。其中，类的属性就是类的数据成员。通过在类的主体中定义变量来描述类所具有的特征（属性），这里声明的变量称为类的成员变量。</p>
<p>(3) 编写类的方法。类的方法描述了类所具有的行为，是类的方法成员。可以简单地把方法理解为独立完成某个功能的单元模块。</p>
<p>下面来定义一个简单的 Person 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        <span class="comment">// 定义说话的方法</span></span><br><span class="line">        System.out.println(name+<span class="string">"今年"</span>+age+<span class="string">"岁！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上述代码，在 Person 类中首先定义了两个属性，分别为 name 和 age，然后定义了一个名称为 tell() 的方法。</p>
<hr>
<h2 id="第-4-节-Java-类的属性"><a href="#第-4-节-Java-类的属性" class="headerlink" title="第 4 节 Java 类的属性"></a>第 4 节 Java 类的属性</h2><p>在 Java 中类的成员变量定义了类的属性。例如，一个学生类中一般需要有姓名、性别和年龄等属性，这时就需要定义姓名、性别和年龄 3 个属性。声明成员变量的语法如下：</p>
<pre><code>[public|protected|private][static][final]&lt;type&gt;&lt;variable_name&gt;</code></pre><p>各参数的含义如下。<br>*　public、protected、private：用于表示成员变量的访问权限。</p>
<ul>
<li>static：表示该成员变量为类变量，也称为静态变量。</li>
<li>final：表示将该成员变量声明为常量，其值无法更改。</li>
<li>type：表示变量的类型。</li>
<li>variable_name：表示变量名称。</li>
</ul>
<p>可以在声明成员变量的同时对其进行初始化，如果声明成员变量时没有对其初始化，则系统会使用默认值初始化成员变量。</p>
<p>初始化的默认值如下：</p>
<ul>
<li>整数型（byte、short、int 和 long）的基本类型变量的默认值为 0。</li>
<li>单精度浮点型（float）的基本类型变量的默认值为 0.0f。</li>
<li>双精度浮点型（double）的基本类型变量的默认值为 0.0d。</li>
<li>字符型（char）的基本类型变量的默认值为 “\u0000”。</li>
<li>布尔型的基本类型变量的默认值为 false。</li>
<li>数组引用类型的变量的默认值为 null。如果创建了数组变量的实例，但没有显式地为每个元素赋值，则数组中的元素初始化值采用数组数据类型对应的默认值。</li>
</ul>
<p>定义类的成员变量的示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sex=<span class="number">0</span>;    <span class="comment">//性别：0表示女孩，1表示男孩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;    <span class="comment">//年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述示例的 Student 类中定义了 3 个成员变量：String 类型的 name、int 类型的 sex 和 int 类型的 age。其中，name 的访问修饰符为 public，初始化值为 null；sex 的访问修饰符为 friendly（默认），初始化值为 0，表示性别为女，且其值无法更改；age 的访问修饰符为 private，初始化值为 0。<br><strong>例 1</strong><br>下面以一个简单的例子来介绍成员变量的初始值，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里用静态的方法来修饰变量 sum，输出结果是 int 类型的初始值，即：0。</p>
<hr>
<h2 id="第-5-节-Java-创建一个学生类"><a href="#第-5-节-Java-创建一个学生类" class="headerlink" title="第 5 节 Java 创建一个学生类"></a>第 5 节 Java 创建一个学生类</h2><hr>
<h2 id="第-6-节-Java-成员方法"><a href="#第-6-节-Java-成员方法" class="headerlink" title="第 6 节 Java 成员方法"></a>第 6 节 Java 成员方法</h2><hr>
<h2 id="第-7-节-Java-this-关键字"><a href="#第-7-节-Java-this-关键字" class="headerlink" title="第 7 节 Java this 关键字"></a>第 7 节 Java this 关键字</h2><hr>
<h2 id="第-8-节-Java-创建对象"><a href="#第-8-节-Java-创建对象" class="headerlink" title="第 8 节 Java 创建对象"></a>第 8 节 Java 创建对象</h2><hr>
<h2 id="第-9-节-Java-访问对象的属性和行为"><a href="#第-9-节-Java-访问对象的属性和行为" class="headerlink" title="第 9 节 Java 访问对象的属性和行为"></a>第 9 节 Java 访问对象的属性和行为</h2><hr>
<h2 id="第-10-节-Java-对象的销毁"><a href="#第-10-节-Java-对象的销毁" class="headerlink" title="第 10 节 Java 对象的销毁"></a>第 10 节 Java 对象的销毁</h2><hr>
<h2 id="第-11-节-Java-用户修改密码"><a href="#第-11-节-Java-用户修改密码" class="headerlink" title="第 11 节 Java 用户修改密码"></a>第 11 节 Java 用户修改密码</h2><hr>
<h2 id="第-12-节-Java-访问控制修饰符"><a href="#第-12-节-Java-访问控制修饰符" class="headerlink" title="第 12 节 Java 访问控制修饰符"></a>第 12 节 Java 访问控制修饰符</h2><hr>
<h2 id="第-13-节-Java-static-静态修饰符"><a href="#第-13-节-Java-static-静态修饰符" class="headerlink" title="第 13 节 Java static 静态修饰符"></a>第 13 节 Java static 静态修饰符</h2><hr>
<h2 id="第-14-节-Java-final-修饰符"><a href="#第-14-节-Java-final-修饰符" class="headerlink" title="第 14 节 Java final 修饰符"></a>第 14 节 Java final 修饰符</h2><hr>
<h2 id="第-15-节-Java-main-方法"><a href="#第-15-节-Java-main-方法" class="headerlink" title="第 15 节 Java main()方法"></a>第 15 节 Java main()方法</h2><hr>
<h2 id="第-16-节-Java-方法的可变参数"><a href="#第-16-节-Java-方法的可变参数" class="headerlink" title="第 16 节 Java 方法的可变参数"></a>第 16 节 Java 方法的可变参数</h2><hr>
<h2 id="第-17-节-Java-构造方法"><a href="#第-17-节-Java-构造方法" class="headerlink" title="第 17 节 Java 构造方法"></a>第 17 节 Java 构造方法</h2><hr>
<h2 id="第-18-节-Java-查询个人信息"><a href="#第-18-节-Java-查询个人信息" class="headerlink" title="第 18 节 Java 查询个人信息"></a>第 18 节 Java 查询个人信息</h2><hr>
<h2 id="第-19-节-Java-析构方法"><a href="#第-19-节-Java-析构方法" class="headerlink" title="第 19 节 Java 析构方法"></a>第 19 节 Java 析构方法</h2><hr>
<h2 id="第-20-节-Java-包（package）"><a href="#第-20-节-Java-包（package）" class="headerlink" title="第 20 节 Java 包（package）"></a>第 20 节 Java 包（package）</h2><hr>
<h2 id="第-21-节-Java-使用自定义包"><a href="#第-21-节-Java-使用自定义包" class="headerlink" title="第 21 节 Java 使用自定义包"></a>第 21 节 Java 使用自定义包</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 7 章 Java 数组处理</title>
    <url>/java-base-course-7-Java-array-processing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 7 章 Java 数组处理</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握常量的声明<br>掌握变量的声明和赋值<br>掌握数据类型的分类<br>掌握算术运算符和赋值运算符<br>熟悉逻辑运算符和关系运算符<br>了解位运算符<br>熟悉运算符的优先级<br>熟悉两种基本类型转换</p>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<p>第 1 节 Java标识符和关键字<br>第 2 节 Java注释：单行、多行和文档注释<br>第 3 节 Java常量：Java常量的定义和分类<br>第 4 节 Java变量的声明和初始化<br>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java数据类型：基本数据类型和引用数据类型<br>第 7 节 Java数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java算数运算符<br>第 9 节 Java赋值运算符（=）<br>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java关系运算符<br>第 12 节 Java自增和自减运算符（++和–）<br>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java三目运算符（条件运算符? :）<br>第 15 节 Java运算符优先级<br>第 16 节 Java直接量（字面量）</p>
<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 1 节 Java Object 类</title>
    <url>/java-base-course-6-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Java Object 类详解： Object 类的常用方法（equals() 和 getClass()）</p>
</blockquote><a id="more"></a>
<p>Object 是 Java 类库中的一个特殊类，也是所有类的父类。当一个类被定义后，如果没有指定继承的父类，那么默认父类就是 Object 类。因此，以下两个类是等价的。</p>
<pre><code>public class MyClass{…}</code></pre><p>等价于</p>
<pre><code>public class MyClass extends Object {…}</code></pre><p>由于 Java 中的所有类都是由 Object 类派生出来的，因此在 Object 类中定义的方法，在其他类中都可以使用，常见的方法如表 1 所示。</p>
<blockquote>
<p>表 1 Object类的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Object clone()</td>
<td align="center">创建与该对象的类相同的新对象</td>
</tr>
<tr>
<td align="center">boolean equals(Object)</td>
<td align="center">比较两对象是否相等</td>
</tr>
<tr>
<td align="center">void finalize()</td>
<td align="center">当垃圾回收器确定不存在对该对象的更多引用时，对象垃圾回收器调用该方法</td>
</tr>
<tr>
<td align="center">Class getClass()</td>
<td align="center">返回一个对象运行时的实例类</td>
</tr>
<tr>
<td align="center">int hashCode()</td>
<td align="center">返回该对象的散列码值</td>
</tr>
<tr>
<td align="center">void notify()</td>
<td align="center">激活等待在该对象的监视器上的一个线程</td>
</tr>
<tr>
<td align="center">void notifyAll()</td>
<td align="center">激活等待在该对象的监视器上的全部线程</td>
</tr>
<tr>
<td align="center">String toString()</td>
<td align="center">返回该对象的字符串表示</td>
</tr>
<tr>
<td align="center">void wait()</td>
<td align="center">在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待</td>
</tr>
</tbody></table>
<p>其中，equals() 方法和 getClass() 方法在 Java 程序中比较常用。</p>
<h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals() 方法"></a>equals() 方法</h2><p>equals() 方法的作用与运算符类似，用于值与值的比较和值与对象的比较，而 equals() 方法用于对象与对象之间的比较，其使用格式如下：</p>
<pre><code>boolean result = obj.equals(Object o);</code></pre><p>其中，obj 表示要进行比较的一个对象，o 表示另一个对象。</p>
<p><strong>例 1</strong></p>
<p>编写一个 Java 程序，实现用户登录的验证功能。要求，用户从键盘输入登录用户名和密码，当用户输入的用户名等于 admin 并且密码也等于 admin 时，则表示该用户为合法用户，提示登录成功，否则提示用户名或者密码错误信息。</p>
<p>在这里使用 equals() 方法将用户输入的字符串与保存 admin 的字符串对象进行比较，具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证用户名和密码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateLogin</span><span class="params">(String uname, String upwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> con = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (uname.equals(<span class="string">"admin"</span>) &amp;&amp; upwd.equals(<span class="string">"admin"</span>)) &#123; <span class="comment">// 比较两个 String 对象</span></span><br><span class="line">            con = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            con = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"------欢迎使用大数据管理平台------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户名："</span>);</span><br><span class="line">        String username = input.next(); <span class="comment">// 获取用户输入的用户名</span></span><br><span class="line">        System.out.println(<span class="string">"密码："</span>);</span><br><span class="line">        String pwd = input.next(); <span class="comment">// 获取用户输入的密码</span></span><br><span class="line">        <span class="keyword">boolean</span> con = validateLogin(username, pwd);</span><br><span class="line">        <span class="keyword">if</span> (con) &#123;</span><br><span class="line">            System.out.println(<span class="string">"登录成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名或密码有误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码在 validateLogin() 方法中又使用 equals() 方法将两个 String 类型的对象进行了比较，当 uname 对象与保存 admin 的 String 对象相同时，uname.equals(“admin”) 为 true；与此相同，当 upwd 对象与保存 admin 的 String 对象相同时，upwd.equals(“admin”) 为 true。当用户输入的用户名和密码都为 admin 时，表示该用户为合法用户，提示登录成功信息，否则提示用户名或密码有误的错误信息。</p>
<pre><code>该程序的运行结果下所示：
------欢迎使用大数据管理平台------
用户名：
adinm
密码：
admin
用户名或密码有误！

------欢迎使用大数据管理平台------
用户名：
admin
密码：
admin
登录成功！</code></pre><h2 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass() 方法"></a>getClass() 方法</h2><p>getClass() 方法返回对象所属的类，是一个 Class 对象。通过 Class 对象可以获取该类的各种信息，包括类名、父类以及它所实现接口的名字等。</p>
<p><strong>例 2</strong></p>
<p>编写一个实例，演示如何对 String 类型调用 getClass() 方法，然后输出其父类及实现的接口信息。具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassInfo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        System.out.println(<span class="string">"类名："</span> + obj.getClass().getName());</span><br><span class="line">        <span class="comment">// 获取父类名</span></span><br><span class="line">        System.out.println(<span class="string">"父类："</span> + obj.getClass().getSuperclass().getName());</span><br><span class="line">        System.out.println(<span class="string">"实现的接口有："</span>);</span><br><span class="line">        <span class="comment">// 获取实现的接口并输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.getClass().getInterfaces().length; i++) &#123;</span><br><span class="line">            System.out.println(obj.getClass().getInterfaces()[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strObj = <span class="keyword">new</span> String();</span><br><span class="line">        printClassInfo(strObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该程序的运行结果如下：</p>
<pre><code>类名：java.lang.String
父类：java.lang.Object
实现的接口有：
interface java.io.Serializable
interface java.lang.Comparable
interface java.lang.CharSequence</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 2 节 Java Integer 类</title>
    <url>/java-base-course-6-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Integer 类在对象中包装了一个基本类型 int 的值。Integer 类对象包含一个 int 类型的字段。此外，该类提供了多个方法，能在 int 类型和 String 类型之间互相转换，还提供了处理 int 类型时非常有用的其他一些常量和方法。</p><a id="more"></a>
<h2 id="Integer-类的构造方法"><a href="#Integer-类的构造方法" class="headerlink" title="Integer 类的构造方法"></a>Integer 类的构造方法</h2><p>Integer 类中的构造方法有以下两个：</p>
<ul>
<li>Integer(int value)：构造一个新分配的 Integer 对象，它表示指定的 int 值。</li>
<li>Integer(String s)：构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。</li>
</ul>
<p>例如，以下代码分别使用以上两个构造方法来获取 Integer 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer integer1 = <span class="keyword">new</span> Integer(<span class="number">100</span>);    <span class="comment">// 以 int 型变量作为参数创建 Integer 对象</span></span><br><span class="line">Integer integer2 = <span class="keyword">new</span> Integer(<span class="string">"100"</span>);    <span class="comment">// 以 String 型变量作为参数创建 Integer 对象</span></span><br></pre></td></tr></table></figure>

<h2 id="Integer-类的常用方法"><a href="#Integer-类的常用方法" class="headerlink" title="Integer 类的常用方法"></a>Integer 类的常用方法</h2><p>在 Integer 类内部包含一些和 int 类型操作有关的方法，表 1 列出了这些常用的方法。</p>
<blockquote>
<p>表 1 Integer类中的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">返回值</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byteValue()</td>
<td align="center">byte</td>
<td align="center">以 byte 类型返回该 Integer 的值</td>
</tr>
<tr>
<td align="center">shortValue()</td>
<td align="center">short</td>
<td align="center">以 short 类型返回该 Integer 的值</td>
</tr>
<tr>
<td align="center">intValue()</td>
<td align="center">int</td>
<td align="center">以 int 类型返回该 Integer 的值</td>
</tr>
<tr>
<td align="center">toString()</td>
<td align="center">String</td>
<td align="center">返回一个表示该 Integer 值的 String 对象</td>
</tr>
<tr>
<td align="center">equals(Object obj)</td>
<td align="center">boolean</td>
<td align="center">比较此对象与指定对象是否相等</td>
</tr>
<tr>
<td align="center">compareTo(Integeranotherlnteger)</td>
<td align="center">int</td>
<td align="center">在数字上比较两个 Integer 对象，如相等，则返回 0；如调用对象的数值小于 anotherlnteger 的数值，则返回负值；如调用对象的数值大于anotherlnteger 的数值，则返回正值</td>
</tr>
<tr>
<td align="center">valueOf(String s)</td>
<td align="center">Integer</td>
<td align="center">返回保存指定的 String 值的 Integer 对象</td>
</tr>
<tr>
<td align="center">parseInt(String s)</td>
<td align="center">int</td>
<td align="center">将数字字符串转换为 int 数值</td>
</tr>
</tbody></table>
<p>在实际的编程过程中，经常将字符串转换为 int 类型的数值，或者将 int 类型的数值转换为对应的字符串。以下代码演示如何实现这两种功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"456"</span>;</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(str);    <span class="comment">// 将字符串转换为int类型的数值</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">789</span>;</span><br><span class="line">String s = Integer.toString(i);    <span class="comment">// 将int类型的数值转换为字符串</span></span><br></pre></td></tr></table></figure>

<p>注意：在实现将字符串转换为 int 类型数值的过程中，如果字符串中包含非数值类型的字符，则程序执行将出现异常。</p>
<p><strong>例 1</strong></p>
<p>编写一个程序，在程序中创建一个 String 类型变量，然后将它转换为二进制、八进制、十进制和十六进制输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">40</span>;</span><br><span class="line">        String str = Integer.toString(num); <span class="comment">// 将数字转换成字符串</span></span><br><span class="line">        String str1 = Integer.toBinaryString(num); <span class="comment">// 将数字转换成二进制</span></span><br><span class="line">        String str2 = Integer.toHexString(num); <span class="comment">// 将数字转换成八进制</span></span><br><span class="line">        String str3 = Integer.toOctalString(num); <span class="comment">// 将数字转换成十六进制</span></span><br><span class="line">        System.out.println(str + <span class="string">"的二进制数是："</span> + str1);</span><br><span class="line">        System.out.println(str + <span class="string">"的八进制数是："</span> + str3);</span><br><span class="line">        System.out.println(str + <span class="string">"的十进制数是："</span> + str);</span><br><span class="line">        System.out.println(str + <span class="string">"的十六进制数是："</span> + str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后的输出结果如下：</p>
<pre><code>40的二进制数是：101000
40的八进制数是：50
40的十进制数是：40
40的十六进制数是：28</code></pre><h2 id="Integer-类的常量"><a href="#Integer-类的常量" class="headerlink" title="Integer 类的常量"></a>Integer 类的常量</h2><p>Integer 类包含以下 4 个常量。</p>
<ul>
<li>MAX_VALUE：值为 231-1 的常量，它表示 int 类型能够表示的最大值。</li>
<li>MIN_VALUE：值为 -231 的常量，它表示 int 类型能够表示的最小值。</li>
<li>SIZE：用来以二进制补码形式表示 int 值的比特位数。</li>
<li>TYPE：表示基本类型 int 的 Class 实例。</li>
</ul>
<p>下面的代码演示了 Integer 类中常量的使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> max_value = Integer.MAX_VALUE;    <span class="comment">// 获取 int 类型可取的最大值</span></span><br><span class="line"><span class="keyword">int</span> min_value = Integer.MIN_VALUE;    <span class="comment">// 获取 int 类型可取的最小值</span></span><br><span class="line"><span class="keyword">int</span> size = Integer.SIZE;    <span class="comment">// 获取 int 类型的二进制位</span></span><br><span class="line">Class c = Integer.TYPE;    <span class="comment">// 获取基本类型 int 的 Class 实例</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 3 节 Java Float 类</title>
    <url>/java-base-course-6-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Float 类在对象中包装了一个基本类型 float 的值。Float 类对象包含一个 float 类型的字段。此外，该类提供了多个方法，能在 float 类型与 String 类型之间互相转换，同时还提供了处理 float 类型时比较常用的常量和方法。</p><a id="more"></a>
<h2 id="Float-类的构造方法"><a href="#Float-类的构造方法" class="headerlink" title="Float 类的构造方法"></a>Float 类的构造方法</h2><p>Float 类中的构造方法有以下 3 个。</p>
<ul>
<li>Float(double value)：构造一个新分配的 Float 对象，它表示转换为 float 类型的参数。</li>
<li>Float(float value)：构造一个新分配的 Float 对象，它表示基本的 float 参数。</li>
<li>Float(String s)：构造一个新分配的 Float 对象，它表示 String 参数所指示的 float 值。</li>
</ul>
<p>例如，以下代码分别使用以上 3 个构造方法获取 Float 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Float float1 = <span class="keyword">new</span> Float(<span class="number">3.14145</span>);    <span class="comment">// 以 double 类型的变量作为参数创建 Float 对象</span></span><br><span class="line">Float float2 = <span class="keyword">new</span> Float(<span class="number">6.5</span>);    <span class="comment">// 以 float 类型的变量作为参数创建 Float 对象</span></span><br><span class="line">Float float3 = <span class="keyword">new</span> Float(<span class="string">"3.1415"</span>);    <span class="comment">// 以 String 类型的变量作为参数创建 Float 对象</span></span><br></pre></td></tr></table></figure>

<p>在 Float 类内部包含了一些和 float 操作有关的方法，见表 1。</p>
<blockquote>
<p>表 1 Float类中的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">返回值</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byteValue()</td>
<td align="center">byte</td>
<td align="center">以 byte 类型返回该 Float 的值</td>
</tr>
<tr>
<td align="center">doubleValue()</td>
<td align="center">double</td>
<td align="center">以 double 类型返回该 Float 的值</td>
</tr>
<tr>
<td align="center">floatValue()</td>
<td align="center">float</td>
<td align="center">以 float 类型返回该 Float 的值</td>
</tr>
<tr>
<td align="center">intValue()</td>
<td align="center">int</td>
<td align="center">以 int 类型返回该 Float 的值（强制转换为 int 类型）</td>
</tr>
<tr>
<td align="center">longValue()</td>
<td align="center">long</td>
<td align="center">以 long 类型返回该 Float 的值（强制转换为 long 类型）</td>
</tr>
<tr>
<td align="center">shortValue()</td>
<td align="center">short</td>
<td align="center">以 short 类型返回该 Float 的值（强制转换为 short 类型）</td>
</tr>
<tr>
<td align="center">isNaN()</td>
<td align="center">boolean</td>
<td align="center">如果此 Float 值是一个非数字值，则返回 true，否则返回 false</td>
</tr>
<tr>
<td align="center">isNaN(float v)</td>
<td align="center">boolean</td>
<td align="center">如果指定的参数是一个非数字值，则返回 true，否则返回 false</td>
</tr>
<tr>
<td align="center">toString()</td>
<td align="center">String</td>
<td align="center">返回一个表示该 Float 值的 String 对象</td>
</tr>
<tr>
<td align="center">valueOf(String s)</td>
<td align="center">Float</td>
<td align="center">返回保存指定的 String 值的 Float 对象</td>
</tr>
<tr>
<td align="center">parseFloat(String s)</td>
<td align="center">float</td>
<td align="center">将数字字符串转换为 float 数值</td>
</tr>
</tbody></table>
<p>例如，将字符串 456.7 转换为 float 类型的数值，或者将 float 类型的数值 123.4 转换为对应的字符串，以下代码演示如何实现这两种功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"456.7"</span>;</span><br><span class="line"><span class="keyword">float</span> num = Float.parseFloat(str);    <span class="comment">// 将字符串转换为 float 类型的数值</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">123.4f</span>;</span><br><span class="line">String s = Float.toString(f);    <span class="comment">// 将 float 类型的数值转换为字符串</span></span><br></pre></td></tr></table></figure>

<p>注意：在实现将字符串转换为 float 类型数值的过程中，如果字符串中包含非数值类型的字符，则程序执行将出现异常。</p>
<h2 id="Float-类的常用常量"><a href="#Float-类的常用常量" class="headerlink" title="Float 类的常用常量"></a>Float 类的常用常量</h2><p>在 Float 类中包含了很多常量，其中较为常用的常量如下。</p>
<ul>
<li>MAX_VALUE：值为 1.4E38 的常量，它表示 float 类型能够表示的最大值。</li>
<li>MIN_VALUE：值为 3.4E-45 的常量，它表示 float 类型能够表示的最小值。</li>
<li>MAX_EXPONENT:有限 float 变量可能具有的最大指数。</li>
<li>MIN_EXPONENT：标准化 float 变量可能具有的最小指数。</li>
<li>MIN_NORMAL：保存 float 类型数值的最小标准值的常量，即 2-126。</li>
<li>NaN：保存 float 类型的非数字值的常量。</li>
<li>SIZE：用来以二进制补码形式表示 float 值的比特位数。</li>
<li>TYPE：表示基本类型 float 的 Class 实例。</li>
</ul>
<p>下面的代码演示了 Float 类中常量的使用。</p>
<pre><code>float max_value = Float.MAX_VALUE;    // 获取 float 类型可取的最大值
float min_value = Float.MIN_VALUE;    // 获取 float 类型可取的最小值
float min_normal = Float.MIN_NORMAL;    // 获取 float 类型可取的最小标准值
float size = Float.SIZE;    // 获取 float 类型的二进制位</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 节 Java Double 类</title>
    <url>/java-base-course-6-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Double 类在对象中包装了一个基本类型 double 的值。Double 类对象包含一个 double 类型的字段。此外，该类还提供了多个方法，可以将 double 类型与 String 类型相互转换，同时 还提供了处理 double 类型时比较常用的常量和方法。</p><a id="more"></a>
<h2 id="Double-类的构造方法"><a href="#Double-类的构造方法" class="headerlink" title="Double 类的构造方法"></a>Double 类的构造方法</h2><p>Double 类中的构造方法有如下两个。</p>
<ul>
<li>Double(double value)：构造一个新分配的 Double 对象，它表示转换为 double 类型的参数。</li>
<li>Double(String s)：构造一个新分配的 Double 对象，它表示 String 参数所指示的 double 值。</li>
</ul>
<p>例如，以下代码分别使用以上两个构造方法获取 Double 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Double double1 = <span class="keyword">new</span> Double(<span class="number">5.456</span>);    <span class="comment">// 以 double 类型的变量作为参数创建 Double 对象</span></span><br><span class="line">Double double2 = <span class="keyword">new</span> Double(<span class="string">"5.456"</span>);       <span class="comment">// 以 String 类型的变量作为参数创建 Double 对象</span></span><br></pre></td></tr></table></figure>

<h2 id="Double-类的常用方法"><a href="#Double-类的常用方法" class="headerlink" title="Double 类的常用方法"></a>Double 类的常用方法</h2><p>在 Double 类内部包含一些和 double 操作有关的方法，见表 1。</p>
<blockquote>
<p>表 1 Double类中的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">返回值</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byteValue()</td>
<td align="center">byte</td>
<td align="center">以 byte 类型返回该 Double 的值</td>
</tr>
<tr>
<td align="center">doubleValue()</td>
<td align="center">double</td>
<td align="center">以 double 类型返回该 Double 的值</td>
</tr>
<tr>
<td align="center">fioatValue()</td>
<td align="center">float</td>
<td align="center">以 float 类型返回该 Double 的值</td>
</tr>
<tr>
<td align="center">intValue()</td>
<td align="center">int</td>
<td align="center">以 int 类型返回该 Double 的值（强制转换为 int 类型）</td>
</tr>
<tr>
<td align="center">longValue()</td>
<td align="center">long</td>
<td align="center">以 long 类型返回该 Double 的值（强制转换为 long 类型）</td>
</tr>
<tr>
<td align="center">shortValue()</td>
<td align="center">short</td>
<td align="center">以 short 类型返回该 Double 的值（强制转换为 short 类型）</td>
</tr>
<tr>
<td align="center">isNaN()</td>
<td align="center">boolean</td>
<td align="center">如果此 Double 值是一个非数字值，则返回 true，否则返回 false</td>
</tr>
<tr>
<td align="center">isNaN(double v)</td>
<td align="center">boolean</td>
<td align="center">如果指定的参数是一个非数字值，则返回 true，否则返回 false</td>
</tr>
<tr>
<td align="center">toString()</td>
<td align="center">String</td>
<td align="center">返回一个表示该 Double 值的 String 对象</td>
</tr>
<tr>
<td align="center">valueOf(String s)</td>
<td align="center">Double</td>
<td align="center">返回保存指定的 String 值的 Double 对象</td>
</tr>
<tr>
<td align="center">parseDouble(String s)</td>
<td align="center">double</td>
<td align="center">将数字字符串转换为 Double 数值</td>
</tr>
</tbody></table>
<p>例如，将字符串 56.7809 转换为 double 类型的数值，或者将 double 类型的数值 56.7809 转换为对应的字符串，以下代码演示如何实现这两种功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"56.7809"</span>;</span><br><span class="line"><span class="keyword">double</span> num = Double.parseDouble(str);    <span class="comment">// 将字符串转换为 double 类型的数值</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">56.7809</span>;</span><br><span class="line">String s = Double.toString(d);    <span class="comment">// 将double类型的数值转换为字符串</span></span><br></pre></td></tr></table></figure>

<p>在将字符串转换为 double 类型的数值的过程中，如果字符串中包含非数值类型的字符，则程序执行将出现异常。</p>
<h2 id="Double-类的常用常量"><a href="#Double-类的常用常量" class="headerlink" title="Double 类的常用常量"></a>Double 类的常用常量</h2><p>在 Double 类中包含了很多常量，其中较为常用的常量如下。</p>
<ul>
<li>MAX_VALUE:值为 1.8E308 的常量，它表示 double 类型的最大正有限值的常量。</li>
<li>MIN_VALUE：值为 4.9E-324 的常量，它表示 double 类型数据能够保持的最小正非零值的常量。</li>
<li>NaN：保存 double 类型的非数字值的常量。</li>
<li>NEGATIVE_INFINITY：保持 double 类型的负无穷大的常量。</li>
<li>POSITIVE_INFINITY：保持 double 类型的正无穷大的常量。</li>
<li>SIZE：用秦以二进制补码形式表示 double 值的比特位数。</li>
<li>TYPE：表示基本类型 double 的 Class 实例。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 5 节 Java Number 类</title>
    <url>/java-base-course-6-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Number 是一个抽象类，也是一个超类（即父类）。Number 类属于 java.lang 包，所有的包装类（如 Double、Float、Byte、Short、Integer 以及 Long）都是抽象类 Number 的子类。</p><a id="more"></a>
<p>Number 类定义了一些抽象方法，以各种不同数字格式返回对象的值。如 xxxValue() 方法，它将 Number 对象转换为 xxx 数据类型的值并返回。这些方法如下表所示：</p>
<blockquote>
<p>Number 类的方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte byteValue();</td>
<td align="center">返回 byte 类型的值</td>
</tr>
<tr>
<td align="center">double doubleValue();</td>
<td align="center">返回 double 类型的值</td>
</tr>
<tr>
<td align="center">float floatValue();</td>
<td align="center">返回 float 类型的值</td>
</tr>
<tr>
<td align="center">int intValue();</td>
<td align="center">返回 int 类型的值</td>
</tr>
<tr>
<td align="center">long longValue();</td>
<td align="center">返回 long 类型的值</td>
</tr>
<tr>
<td align="center">short shortValue();</td>
<td align="center">返回 short 类型的值</td>
</tr>
</tbody></table>
<p>抽象类不能直接实例化，而是必须实例化其具体的子类。如下代码演示了 Number 类的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Number num = <span class="keyword">new</span> Double(<span class="number">12.5</span>);</span><br><span class="line">System.out.println(<span class="string">"返回 double 类型的值："</span> + num.doubleValue());</span><br><span class="line">System.out.println(<span class="string">"返回 int 类型的值："</span> + num.intValue());</span><br><span class="line">System.out.println(<span class="string">"返回 float 类型的值："</span> + num.floatValue());</span><br></pre></td></tr></table></figure>

<p>执行上述代码，输出结果如下：</p>
<pre><code>返回 double 类型的值：12.5
返回 int 类型的值：12
返回 float 类型的值：12.5</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 6 节 Java Character 类</title>
    <url>/java-base-course-6-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Character 类是字符数据类型 char 的包装类。Character 类的对象包含类型为 char 的单个字段，这样能把基本数据类型当对象来处理，其常用方法如表 1 所示。</p><a id="more"></a>
<blockquote>
<p>表 1 Character类的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void Character(char value)</td>
<td align="center">构造一个新分配的 Character 对象，用以表示指定的 char 值</td>
</tr>
<tr>
<td align="center">char charValue()</td>
<td align="center">返回此 Character 对象的值，此对象表示基本 char 值</td>
</tr>
<tr>
<td align="center">int compareTo(Character anotherCharacter)</td>
<td align="center">根据数字比较两个 Character 对象</td>
</tr>
<tr>
<td align="center">boolean equals(Character anotherCharacter)</td>
<td align="center">将此对象与指定对象比较，当且仅当参数不是 null，而 是一个与此对象包含相同 char 值的 Character 对象时， 结果才是 true</td>
</tr>
<tr>
<td align="center">boolean isDigit(char ch)</td>
<td align="center">确定指定字符是否为数字，如果通过 Character. getType(ch) 提供的字符的常规类别类型为 DECIMAL_DIGIT_NUMBER，则字符为数字</td>
</tr>
<tr>
<td align="center">boolean isLetter(int codePoint)</td>
<td align="center">确定指定字符（Unicode 代码点）是否为字母</td>
</tr>
<tr>
<td align="center">boolean isLetterOrDigit(int codePoint)</td>
<td align="center">确定指定字符（Unicode 代码点）是否为字母或数字</td>
</tr>
<tr>
<td align="center">boolean isLowerCase(char ch)</td>
<td align="center">确定指定字符是否为小写字母</td>
</tr>
<tr>
<td align="center">boolean isUpperCase(char ch)</td>
<td align="center">确定指定字符是否为大写字母</td>
</tr>
<tr>
<td align="center">char toLowerCase(char ch)</td>
<td align="center">使用来自 UnicodeData 文件的大小写映射信息将字符参数转换为小写</td>
</tr>
<tr>
<td align="center">char toUpperCase(char ch)</td>
<td align="center">使用来自 UnicodeData 文件的大小写映射信息将字符参数转换为大写</td>
</tr>
</tbody></table>
<p>可以从 char 值中创建一个 Character 对象。例如，下列语句为字符 S 创建了一个 Character 对象。</p>
<pre><code>Character character = new Character(&apos;S&apos;);</code></pre><p>CompareTo() 方法将这个字符与其他字符比较，并且返回一个整型数组，这个值是两个字符比较后的标准代码差值。当且仅当两个字符相同时，equals() 方法的返回值才为 true。如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character character = <span class="keyword">new</span> Character(<span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">int</span> result1 = character.compareTo(<span class="keyword">new</span> Character(<span class="string">'V'</span>));</span><br><span class="line">System.out.println(result1);    <span class="comment">// 输出：0</span></span><br><span class="line"><span class="keyword">int</span> result2 = character.compareTo(<span class="keyword">new</span> Character(<span class="string">'B'</span>));</span><br><span class="line">System.out.println(resuit2);    <span class="comment">// 输出：-1</span></span><br><span class="line"><span class="keyword">int</span> result3 = character.compareTo(<span class="keyword">new</span> Character(<span class="string">'1'</span>));</span><br><span class="line">System.out.println(result3);    <span class="comment">// 输出：-2</span></span><br></pre></td></tr></table></figure>

<p><strong>例 1</strong></p>
<p>在注册会员时，需要验证用户输入的用户名、密码、性别、年龄和邮箱地址等信息是否符合标准，如果符合标准方可进行注册。那么，下面就使用 Character 类中的一些静态方法来完成这个程序，具体的实现步骤如下。</p>
<p>1）创建 Register 类，在该类中创建 validateUser() 方法，对用户输入的用户名、密码和年龄进行验证，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Register</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateUser</span><span class="params">(String uname,String upwd,String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> conUname = <span class="keyword">false</span>;       <span class="comment">// 用户名是否符合要求</span></span><br><span class="line">        <span class="keyword">boolean</span> conPwd = <span class="keyword">false</span>;    <span class="comment">// 密码是否符合要求</span></span><br><span class="line">        <span class="keyword">boolean</span> conAge = <span class="keyword">false</span>;    <span class="comment">// 年龄是否符合要求</span></span><br><span class="line">        <span class="keyword">boolean</span> con = <span class="keyword">false</span>;    <span class="comment">// 验证是否通过</span></span><br><span class="line">        <span class="keyword">if</span> (uname.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; uname.length();i++) &#123;</span><br><span class="line">                <span class="comment">// 验证用户名是否全部为字母，不能含有空格</span></span><br><span class="line">                <span class="keyword">if</span> (Character.isLetter(uname.charAt(i))) &#123;</span><br><span class="line">                    conUname = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    conUname = <span class="keyword">false</span>;</span><br><span class="line">                    System.out.println(<span class="string">"用户名只能由字母组成，且不能含有空格！"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名不能为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (upwd.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;upwd.length();j++) &#123;</span><br><span class="line">                <span class="comment">// 验证密码是否由数字和字母组成，不能含有空格</span></span><br><span class="line">                <span class="keyword">if</span> (Character.isLetterOrDigit(upwd.charAt(j))) &#123;</span><br><span class="line">                    conPwd = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    conPwd = <span class="keyword">false</span>;</span><br><span class="line">                    System.out.println(<span class="string">"密码只能由数字或字母组成！"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"密码不能为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (age.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; age.length();k++) &#123;</span><br><span class="line">                <span class="comment">// 验证年龄是否由数字组成</span></span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(age.charAt(k))) &#123;</span><br><span class="line">                    conAge = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    conAge = <span class="keyword">false</span>;</span><br><span class="line">                    System.out.println(<span class="string">"年龄输入有误!"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"年龄必须输入！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conUname &amp;&amp; conPwd &amp;&amp; conAge) &#123;</span><br><span class="line">            con = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            con = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 validateUser() 方法中，使用 for 循环遍历用户输入的用户名、密码和年龄，对其每个字符进行验证，判断其是否符合要求。在验证的过程中，分别使用了 Character 类的 isLetter() 方法、isLetterOrDigit() 方法和 isDigit() 方法。</p>
<p>2）编写测试类 Test04，调用 Register 类中的 validateUser() 方法，对用户输入的数据进行验证，并输出验证结果，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"------------用户注册--------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户名："</span>);</span><br><span class="line">        String username = input.next();</span><br><span class="line">        System.out.println(<span class="string">"密码："</span>);</span><br><span class="line">        String pwd = input.next();</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>);</span><br><span class="line">        String age = input.next();</span><br><span class="line">        <span class="keyword">boolean</span> con = Register.validateUser(username,pwd,age);</span><br><span class="line">        <span class="keyword">if</span> (con) &#123;</span><br><span class="line">            System.out.println(<span class="string">"注册成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"注册失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 main() 方法中，通过调用 Register 类的 validateUser() 方法，获取一个 boolean 类型的变量，即表明是否验证通过。当变量值为 true 时，表示验证通过，输出注册成功的提示信息；否则表示验证未通过，输出注册失败的提示信息。</p>
<p>运行该程序，当注册的用户名并非全部由字母组成时，提示“用户名只能由字母组成， 且不能含有空格！”信息，如下所示。</p>
<pre><code>------------用户注册--------------
用户名：
tg_xiake
密码：
xiake
年龄：
123
用户名只能由字母组成，且不能含有空格！
注册失败！
当注册的年龄并非只有数字组成时，则提示“年龄输入有误！”，如下所示。

------------用户注册--------------
用户名：
admin
密码：
admin
年龄：
123a
年龄输入有误！
注册失败！
当注册的密码并非只由数字或字母组成时，提示“密码只能由数字或字母组成！”，如下所示。

------------用户注册--------------
用户名：
admin
密码：
admin!
年龄：
25
密码只能由数字或字母组成！
注册失败！
如果注册的用户名、密码和年龄都通过验证，则输出“注册成功！”，如下所示。

------------用户注册--------------
用户名：
admin
密码：
admin
年龄：
123
注册成功！</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 7 节 Java Boolean 类</title>
    <url>/java-base-course-6-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Boolean 类将基本类型为 boolean 的值包装在一个对象中。一个 Boolean 类的对象只包含一个类型为 boolean 的字段。此外，此类还为 boolean 和 String 的相互转换提供了很多方法，并提供了处理 boolean 时非常有用的其他一些常用方法。</p><a id="more"></a>
<h2 id="Boolean-类的构造方法"><a href="#Boolean-类的构造方法" class="headerlink" title="Boolean 类的构造方法"></a>Boolean 类的构造方法</h2><p>Boolean 类有以下两种构造形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Boolean(<span class="keyword">boolean</span> boolValue);</span><br><span class="line">Boolean(String boolString);</span><br></pre></td></tr></table></figure>

<p>其中 boolValue 必须是 true 或 false（不区分大小写），boolString 包含字符串 true（不区分大小写），那么新的 Boolean 对象将包含 true；否则将包含 false。</p>
<h2 id="Boolean-类的常用方法"><a href="#Boolean-类的常用方法" class="headerlink" title="Boolean 类的常用方法"></a>Boolean 类的常用方法</h2><p>在 Boolean 类内部包含了一些和 Boolean 操作有关的方法，见表 1。</p>
<blockquote>
<p>表 1 Boolean 类中的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">返回值</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">booleanValue()</td>
<td align="center">boolean</td>
<td align="center">将 Boolean 对象的值以对应的 boolean 值返回</td>
</tr>
<tr>
<td align="center">equals(Object obj)</td>
<td align="center">boolean</td>
<td align="center">判断调用该方法的对象与 obj 是否相等。当且仅当参数不是 null，且与调用该方法的对象一样都表示同一个 boolean 值的 Boolean 对象时，才返回 true</td>
</tr>
<tr>
<td align="center">parseBoolean(String s)</td>
<td align="center">boolean</td>
<td align="center">将字符串参数解析为 boolean 值</td>
</tr>
<tr>
<td align="center">toString()</td>
<td align="center">string</td>
<td align="center">返回表示该 boolean 值的 String 对象</td>
</tr>
<tr>
<td align="center">valueOf(String s)</td>
<td align="center">boolean</td>
<td align="center">返回一个用指定的字符串表示的 boolean 值</td>
</tr>
</tbody></table>
<p><strong>例 1</strong></p>
<p>编写一个 Java 程序，演示如何使用不同的构造方法创建 Boolean 对象，并调用 booleanValue() 主法将创建的对象重新转换为 boolean 数据输出。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Boolean b1 = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line">        Boolean b2 = <span class="keyword">new</span> Boolean(<span class="string">"ok"</span>);</span><br><span class="line">        Boolean b3 = <span class="keyword">new</span> Boolean(<span class="string">"true"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b1 转换为 boolean 值是："</span> + b1);</span><br><span class="line">        System.out.println(<span class="string">"b2 转换为 boolean 值是："</span> + b2);</span><br><span class="line">        System.out.println(<span class="string">"b3 转换为 boolean 值是："</span> + b3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序非常简单，运行后的输出结果如下：</p>
<pre><code>b1 转换为 boolean 值是：true
b2 转换为 boolean 值是：false
b3 转换为 boolean 值是：true</code></pre><h2 id="Boolean-类的常用常量"><a href="#Boolean-类的常用常量" class="headerlink" title="Boolean 类的常用常量"></a>Boolean 类的常用常量</h2><p>在 Boolean 类中包含了很多的常量，其中较为常用的常量如下。</p>
<ul>
<li>TRUE：对应基值 true 的 Boolean 对象。</li>
<li>FALSE：对应基值 false 的 Boolean 对象。</li>
<li>TYPE：表示基本类型 boolean 的 Class 对象。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 8 节 Java Byte 类</title>
    <url>/java-base-course-6-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Byte 类将基本类型为 byte 的值包装在一个对象中。一个 Byte 类的对象只包含一个类型为 byte 的字段。此外，该类还为 byte 和 String 的相互转换提供了方法，并提供了一些处理 byte 时非常有用的常量和方法。</p><a id="more"></a>
<h2 id="Byte-类的构造方法"><a href="#Byte-类的构造方法" class="headerlink" title="Byte 类的构造方法"></a>Byte 类的构造方法</h2><p>Byte 类提供了两个构造方法来创建 Byte 对象。</p>
<ol>
<li><p>Byte(byte value)<br>通过这种方法创建的 Byte 对象，可以表示指定的 byte 值。例如，下面的示例将 5 作为 byte 类型变量，然后再创建 Byte 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> my_byte = <span class="number">5</span>;</span><br><span class="line">Byte b = <span class="keyword">new</span> Byte(my_byte);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Byte(String s)<br>通过这个方法创建的 Byte 对象，可表示 String 参数所指定的 byte 值。例如，下面的示例将 5 作为 String 类型变量，然后再创建 Byte 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String my_byte = <span class="string">"5"</span>;</span><br><span class="line">Byte b = <span class="keyword">new</span> Byte(my_byte);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意：必须使用数值型的 String 变量作为参数才能创建成功，否则会抛出 NumberFormatException 异常。</p>
<h2 id="Byte-类的常用方法"><a href="#Byte-类的常用方法" class="headerlink" title="Byte 类的常用方法"></a>Byte 类的常用方法</h2><p>在 Byte 类内部包含了一些和 Byte 操作有关的方法，见表 1。</p>
<blockquote>
<p>表 1 Byte 类中的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">返回值</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byteValue()</td>
<td align="center">byte</td>
<td align="center">以一个 byte 值返回 Byte 对象</td>
</tr>
<tr>
<td align="center">compareTo(Byte bytel)</td>
<td align="center">int</td>
<td align="center">在数字上比较两个 Byte 对象</td>
</tr>
<tr>
<td align="center">doubleValue()</td>
<td align="center">double</td>
<td align="center">以一个 double 值返回此 Byte 的值</td>
</tr>
<tr>
<td align="center">intValue()</td>
<td align="center">int</td>
<td align="center">以一个 int 值返回此 Byte 的值</td>
</tr>
<tr>
<td align="center">parseByte(String s)</td>
<td align="center">byte</td>
<td align="center">将 String 型参数解析成等价的 byte 形式</td>
</tr>
<tr>
<td align="center">toStringO</td>
<td align="center">String</td>
<td align="center">返回表示此 byte 值的 String 对象</td>
</tr>
<tr>
<td align="center">valueOf(String s)</td>
<td align="center">Byte</td>
<td align="center">返回一个保持指定 String 所给出的值的 Byte 对象</td>
</tr>
<tr>
<td align="center">equals(Object obj)</td>
<td align="center">boolean</td>
<td align="center">将此对象与指定对象比较，如果调用该方法的对象与 obj 相等 则返回 true，否则返回 false</td>
</tr>
</tbody></table>
<h2 id="Byte-类的常用常量"><a href="#Byte-类的常用常量" class="headerlink" title="Byte 类的常用常量"></a>Byte 类的常用常量</h2><p>在 Byte 类中包含了很多的常量，其中较为常用的常量如下。</p>
<ul>
<li>MIN_VALUE：byte 类可取的最小值。</li>
<li>MAX_VALUE：byte 类可取的最大值。</li>
<li>SIZE：用于以二进制补码形式表示的 byte 值的位数。</li>
<li>TYPE：表示基本类 byte 的 Class 实例。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 9 节 Java System 类</title>
    <url>/java-base-course-6-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>System 类位于 java.lang 包，代表当前 Java 程序的运行平台，系统级的很多属性和控制方法都放置在该类的内部。由于该类的构造方法是 private 的，所以无法创建该类的对象，也就是无法实例化该类。</p><a id="more"></a>
<p>System 类提供了一些类变量和类方法，允许直接通过 System 类来调用这些类变量和类方法。</p>
<h2 id="System-类的成员变量"><a href="#System-类的成员变量" class="headerlink" title="System 类的成员变量"></a>System 类的成员变量</h2><p>System 类有 3 个静态成员变量，分别是 PrintStream out、InputStream in 和 PrintStream err。</p>
<p>（1）PrintStream out<br>标准输出流。此流已打开并准备接收输出数据。通常，此流对应于显示器输出或者由主机环境或用户指定的另一个输出目标。</p>
<p>例如，编写一行输出数据的典型方式是：</p>
<pre><code>System.out.println(data);</code></pre><p>其中，println 方法是属于流类 PrintStream 的方法，而不是 System 中的方法。</p>
<p>（2）InputStream in<br>标准输入流。此流已打开并准备提供输入数据。通常，此流对应于键盘输入或者由主机环境或用户指定的另一个输入源。</p>
<p>（3）PrintStream err<br>标准的错误输出流。其语法与 System.out 类似，不需要提供参数就可输出错误信息。也可以用来输出用户指定的其他信息，包括变量的值。</p>
<p><strong>例 1</strong><br>编写一个 Java 程序，使用本节介绍的 System 类实现从键盘输入字符并显示出来。 具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入字符，按回车键结束输入:"</span>);</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = System.in.read();    <span class="comment">// 读取输入的字符</span></span><br><span class="line">            <span class="keyword">while</span>(c != <span class="string">'\r'</span>) &#123;    <span class="comment">// 判断输入的字符是不是回车</span></span><br><span class="line">                System.out.print((<span class="keyword">char</span>) c);    <span class="comment">// 输出字符</span></span><br><span class="line">                c = System.in.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.err.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码中，System.in.read() 语句读入一个字符，read() 方法是 InputStream 类拥有的方法。变量 c 必须用 int 类型而不能用 char 类型，否则会因为丢失精度而导致编译失败。</p>
<p>以上的程序如果输入汉字将不能正常输出。如果要正常输出汉字，需要把 System.in 声明为 InputStreamReader 类型的实例，最终在 try 语句块中的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStreamReader in = <span class="keyword">new</span> InputStreamReader(System.in, <span class="string">"GB2312"</span>);</span><br><span class="line">c = in.read();</span><br><span class="line"><span class="keyword">while</span>(c != <span class="string">'\r'</span>) &#123;</span><br><span class="line">    System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">    c = in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上述代码所示，语句 InputStreamReader in=new InputStreamReader(System.in,”GB2312”) 声明一个新对象 in，它从 Reader 继承而来，此时就可以读入完整的 Unicode 码，显示正常的汉字。</p>
<h2 id="System-类的成员方法"><a href="#System-类的成员方法" class="headerlink" title="System 类的成员方法"></a>System 类的成员方法</h2><p>System 类中提供了一些系统级的操作方法，常用的方法有 arraycopy()、currentTimeMillis()、exit()、gc() 和 getProperty()。</p>
<p>（1）arraycopy() 方法<br>该方法的作用是数组复制，即从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。该方法的具体定义如下：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,<span class="keyword">int</span> srcPos,Object dest,<span class="keyword">int</span> destPos,<span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure>

<p>其中，src 表示源数组，srcPos 表示从源数组中复制的起始位置，dest 表示目标数组，destPos 表示要复制到的目标数组的起始位置，length 表示复制的个数。</p>
<p><strong>例 2</strong><br>下面的示例代码演示了 arraycopy() 方法的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System_arrayCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] srcArray = &#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] destArray = &#123;<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>&#125;;</span><br><span class="line">        System.arraycopy(srcArray,<span class="number">1</span>,destArray,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"源数组："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; srcArray.length;i++) &#123;</span><br><span class="line">            System.out.println(srcArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"目标数组："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; destArray.length;j++) &#123;</span><br><span class="line">            System.out.println(destArray[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上述代码，将数组 srcArray 中，从下标 1 开始的数据复制到数组 destArray 从下标 1 开始的位置，总共复制两个。也就是将 srcArray[1] 复制给 destArray[1]，将 srcArray[2] 复制给 destArray[2]。这样经过复制之后，数组 srcArray 中的元素不发生变化，而数组 destArray 中的元素将变为 E、B、C、 H，下面为输出结果：</p>
<pre><code>源数组：
A
B
C
D
目标数组：
E
B
C
H</code></pre><p>（2） currentTimeMillis() 方法<br>该方法的作用是返回当前的计算机时间，时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数。一般用它来测试程序的执行时间。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> m = System.currentTimeMillis();</span><br></pre></td></tr></table></figure>

<p>上述语句将获得一个长整型的数字，该数字就是以差值表达的当前时间。</p>
<p><strong>例 3</strong></p>
<p>使用 currentTimeMillis() 方法来显示时间不够直观，但是可以很方便地进行时间计算。例如，计算程序运行需要的时间就可以使用如下的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System_currentTimeMillis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100000000</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = end - start;</span><br><span class="line">        System.out.println(<span class="string">"程序执行时间"</span> + time + <span class="string">"秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中的变量 time 的值表示代码中 for 循环执行所需要的毫秒数，使用这种方法可以测试不同算法的程序的执行效率高低，也可以用于后期线程控制时的精确延时实现。</p>
<p>（3） exit() 方法<br>该方法的作用是终止当前正在运行的 Java 虚拟机，具体的定义格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span></span><br></pre></td></tr></table></figure>

<p>其中，status 的值为 0 时表示正常退出，非零时表示异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</p>
<p>（4） gc() 方法</p>
<p>该方法的作用是请求系统进行垃圾回收，完成内存中的垃圾清除。至于系统是否立刻回收，取决于系统中垃圾回收算法的实现以及系统执行时的情况。定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>（5） getProperty() 方法</p>
<p>该方法的作用是获得系统中属性名为 key 的属性对应的值，具体的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProperty</span><span class="params">(String key)</span></span></span><br></pre></td></tr></table></figure>

<p>系统中常见的属性名以及属性的说明如表 1 所示。</p>
<blockquote>
<p>表 1 系统常见属性</p>
</blockquote>
<p>|属性名|    属性|说明|<br>|:——:|:——:|<br>|java.version|    Java 运行时环境版本|<br>|java.home|    Java 安装目录|<br>|os.name|    操作系统的名称|<br>|os.version|    操作系统的版本|<br>|user.name|    用户的账户名称|<br>|user.home|    用户的主目录|<br>|user.dir|    用户的当前工作目录|</p>
<p><strong>例 4</strong> </p>
<p>下面的示例演示了 getProperty() 方法的使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System_getProperty</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String jversion = System.getProperty(<span class="string">"java.version"</span>);</span><br><span class="line">        String oName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        String user = System.getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Java 运行时环境版本："</span>+jversion);</span><br><span class="line">        System.out.println(<span class="string">"当前操作系统是："</span>+oName);</span><br><span class="line">        System.out.println(<span class="string">"当前用户是："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该程序，输出的结果如下：</p>
<pre><code>Java 运行时环境版本：1.6.0_26
当前操作系统是：Windows 7
当前用户是：Administrator</code></pre><p>提示：使用 getProperty() 方法可以获得很多系统级的参数以及对应的值，这里不再一一举例。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 6 章 Java 内置的包装类</title>
    <url>/java-base-course-6-Java-built-in-wrapper-class/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 是一种面向对象的编程语言，Java 中的类把方法与数据类型连接在一起，构成了自包含式的处理单元。但在 Java 中不能定义基本类型对象，为了能将基本类型视为对象处理，并能连接相关方法，Java 为每个基本类型都提供了包装类，如 int 型数值的包装类 Integer，boolean 型数值的包装类 Boolean 等。这样便可以把这些基本类型转换为对象来处理了。</p><a id="more"></a>
<p>虽然 Java 可以直接处理基本类型，但是在有些情况下需要将其作为对象来处理，这时就需要将其转换为包装类。本章将详细介绍 Java 提供的各种包装类，以及 System 类的使用。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java Object 类  <a href="/java-base-course-6-1/">Go</a><br>第 2 节 Java Integer 类  <a href="/java-base-course-6-2/">Go</a><br>第 3 节 Java Float 类  <a href="/java-base-course-6-3/">Go</a><br>第 4 节 Java Double 类  <a href="/java-base-course-6-4/">Go</a><br>第 5 节 Java Number 类  <a href="/java-base-course-6-5/">Go</a><br>第 6 节 Java Character 类  <a href="/java-base-course-6-6/">Go</a><br>第 7 节 Java Boolean 类  <a href="/java-base-course-6-7/">Go</a><br>第 8 节 Java Byte 类  <a href="/java-base-course-6-8/">Go</a><br>第 9 节 Java System 类  <a href="/java-base-course-6-9/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>了解 Java 基类 Object 的常用方法</li><li>掌握 Integer 对象的创建及其提供的方法</li><li>掌握 Float 对象的创建及其提供的方法</li><li>掌握 Double 对象的创建及其提供的方法</li><li>掌握 Character 对象的创建及其提供的方法</li><li>掌握 Boolean 对象的创建及其提供的方法</li><li>掌握 Byte 对象的创建及其提供的方法</li><li>掌握 System 类 3 个静态变量的使用方法</li><li>熟悉 System 类提供的成员方法</li></ol>
          </div>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 1 节 Java Math 类的常用方法</title>
    <url>/java-base-course-5-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 中的 +、-、*、/ 和 % 等基本算术运算符不能进行更复杂的数学运算，例如，三角函数、对数运算、指数运算等。于是 Java 提供了 Math 工具类来完成这些复杂的运算。</p><a id="more"></a>
<p>在 Java 中 Math 类封装了常用的数学运算，提供了基本的数学操作，如指数、对数、平方根和三角函数等。Math 类位于 java.lang 包，它的构造方法是 private 的，因此无法创建 Math 类的对象，并且 Math 类中的所有方法都是类方法，可以直接通过类名来调用它们。</p>
<p>下面详细介绍该类的常量及数学处理方法</p>
<h2 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h2><p>Math 类中包含 E 和 PI 两个静态常量，正如它们名字所暗示的，它们的值分别等于 e（自然对数）和 π（圆周率）。<br><strong>例 1</strong><br>调用 Math 类的 E 和 PI 两个常量，并将结果输出。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"E 常量的值："</span> + Math.E);</span><br><span class="line">System.out.println(<span class="string">"PI 常量的值："</span> + Math.PI);</span><br></pre></td></tr></table></figure>
<p>执行上述代码，输出结果如下：</p>
<pre><code>E 常量的值：2.718281828459045
PI 常量的值：3.141592653589793</code></pre><h2 id="求最大值、最小值和绝对值"><a href="#求最大值、最小值和绝对值" class="headerlink" title="求最大值、最小值和绝对值"></a>求最大值、最小值和绝对值</h2><p>在程序中常见的就是求最大值、最小值和绝对值问题，如果使用 Math 类提供的方法可以很容易实现。这些方法的说明如表 1 所示。</p>
<p>表 1 求最大值、最小值和绝对值的方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">static int abs(int a)</td>
<td align="center">返回 a 的绝对值</td>
</tr>
<tr>
<td align="center">static long abs(long a)</td>
<td align="center">返回 a 的绝对值</td>
</tr>
<tr>
<td align="center">static float abs(float a)</td>
<td align="center">返回 a 的绝对值</td>
</tr>
<tr>
<td align="center">static double abs(double a)</td>
<td align="center">返回 a 的绝对值</td>
</tr>
<tr>
<td align="center">static int max(int x,int y)</td>
<td align="center">返回 x 和 y 中的最大值</td>
</tr>
<tr>
<td align="center">static double max(double x,double y)</td>
<td align="center">返回 x 和 y 中的最大值</td>
</tr>
<tr>
<td align="center">static long max(long x,long y)</td>
<td align="center">返回 x 和 y 中的最大值</td>
</tr>
<tr>
<td align="center">static float max(float x,float y)</td>
<td align="center">返回 x 和 y 中的最大值</td>
</tr>
<tr>
<td align="center">static int min(int x,int y)</td>
<td align="center">返回 x 和 y 中的最小值</td>
</tr>
<tr>
<td align="center">static long min(long x,long y)</td>
<td align="center">返回 x 和 y 中的最小值</td>
</tr>
<tr>
<td align="center">static double min(double x,double y)</td>
<td align="center">返回 x 和 y 中的最小值</td>
</tr>
<tr>
<td align="center">static float min(float x,float y)</td>
<td align="center">返回 x 和 y 中的最小值</td>
</tr>
</tbody></table>
<p><strong>例 2</strong></p>
<p>求 10 和 20 的较大值、15.6 和 15 的较小值、-12 的绝对值，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"10 和 20 的较大值："</span> + Math.max(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(<span class="string">"15.6 和 15 的较小值："</span> + Math.min(<span class="number">15.6</span>, <span class="number">15</span>));</span><br><span class="line">        System.out.println(<span class="string">"-12 的绝对值："</span> + Math.abs(-<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序的运行结果如下：</p>
<pre><code>10和20的较大值：20
15.6和15的较小值：15.0
-12的绝对值：12</code></pre><h2 id="求整运算"><a href="#求整运算" class="headerlink" title="求整运算"></a>求整运算</h2><p>Math 类的求整方法有很多，详细说明如表 2 所示。</p>
<p>表 2 取整方法及其说明</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">static double ceil(double a)</td>
<td align="center">返回大于或等于 a 的最小整数</td>
</tr>
<tr>
<td align="center">static double floor(double a)</td>
<td align="center">返回小于或等于 a 的最大整数</td>
</tr>
<tr>
<td align="center">static double rint(double a)</td>
<td align="center">返回最接近 a 的整数值，如果有两个同样接近的整数，则结果取偶数</td>
</tr>
<tr>
<td align="center">static int round(float a)</td>
<td align="center">将参数加上 1/2 后返回与参数最近的整数</td>
</tr>
<tr>
<td align="center">static long round(double a)</td>
<td align="center">将参数加上 1/2 后返回与参数最近的整数，然后强制转换为长整型</td>
</tr>
</tbody></table>
<p><strong>例 3</strong></p>
<p>下面的实例演示了 Math 类中取整函数方法的应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">        <span class="keyword">double</span> num = input.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">"大于或等于 "</span>+ num +<span class="string">" 的最小整数："</span> + Math.ceil(num));</span><br><span class="line">        System.out.println(<span class="string">"小于或等于 "</span>+ num +<span class="string">" 的最大整数："</span> + Math.floor(num));</span><br><span class="line">        System.out.println(<span class="string">"将 "</span>+ num +<span class="string">" 加上 0.5 之后最接近的整数："</span> + Math.round(num));</span><br><span class="line">        System.out.println(<span class="string">"最接近 "</span>+num+<span class="string">" 的整数："</span> + Math.rint(num));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<pre><code>请输入一个数字：
99.01
大于或等于 99.01 的最小整数：100.0
小于或等于 99.01 的最大整数：99.0
将 99.01 加上 0.5 之后最接近的整数：100
最接近 99.01 的整数：99.0</code></pre><h2 id="三角函数运算"><a href="#三角函数运算" class="headerlink" title="三角函数运算"></a>三角函数运算</h2><p>Math 类中包含的三角函数方法及其说明如表 3 所示。</p>
<p>表 3 三角函数方法及其说明</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">static double sin(double a)</td>
<td align="center">返回角的三角正弦值，参数以孤度为单位</td>
</tr>
<tr>
<td align="center">static double cos(double a)</td>
<td align="center">返回角的三角余弦值，参数以孤度为单位</td>
</tr>
<tr>
<td align="center">static double asin(double a)</td>
<td align="center">返回一个值的反正弦值，参数域在 [-1,1]，值域在 [-PI/2,PI/2]</td>
</tr>
<tr>
<td align="center">static double acos(double a)</td>
<td align="center">返回一个值的反余弦值，参数域在 [-1,1]，值域在 [0.0,PI]</td>
</tr>
<tr>
<td align="center">static double tan(double a)</td>
<td align="center">返回角的三角正切值，参数以弧度为单位</td>
</tr>
<tr>
<td align="center">static double atan(double a)</td>
<td align="center">返回一个值的反正切值，值域在 [-PI/2,PI/2]</td>
</tr>
<tr>
<td align="center">static double toDegrees(double angrad)</td>
<td align="center">将用孤度表示的角转换为近似相等的用角度表示的角</td>
</tr>
<tr>
<td align="center">staticdouble toRadians(double angdeg)</td>
<td align="center">将用角度表示的角转换为近似相等的用弧度表示的角</td>
</tr>
</tbody></table>
<p>在表 3 中，每个方法的参数和返回值都是 double 类型，参数以弧度代替角度来实现，其中 1 度等于 π/180 弧度，因此平角就是 π 弧度。</p>
<p><strong>例 4</strong></p>
<p>计算 90 度的正弦值、0 度的余弦值、1 的反正切值、120 度的弧度值，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"90 度的正弦值："</span> + Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"0 度的余弦值："</span> + Math.cos(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"1 的反正切值："</span> + Math.atan(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"120 度的弧度值："</span> + Math.toRadians(<span class="number">120.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，因为 Math.sin() 中的参数的单位是弧度，而 90 度表示的是角度，因此需要将 90 度转换为弧度，即 Math.PI/180*90，故转换后的弧度为 Math.PI/2，然后调用 Math 类中的 sin() 方法计算其正弦值。</p>
<p>该程序的运行结果如下：</p>
<pre><code>90 度的正弦值：1.0
0 的余弦值：1.0
1 的反正切值：0.7853981633974483
120 度的弧度值：2.0943951023931953</code></pre><h2 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h2><p>指数的运算包括求方根、取对数及其求 n 次方的运算。在 Math 类中定义的指数运算方法及其说明如表 4 所示。</p>
<p>表 4 指数方法及其说明</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">static double exp(double a)</td>
<td align="center">返回 e 的 a 次幂</td>
</tr>
<tr>
<td align="center">static double pow(double a,double b)</td>
<td align="center">返回以 a 为底数，以 b 为指数的幂值</td>
</tr>
<tr>
<td align="center">static double sqrt(double a)</td>
<td align="center">返回 a 的平方根</td>
</tr>
<tr>
<td align="center">static double cbrt(double a)</td>
<td align="center">返回 a 的立方根</td>
</tr>
<tr>
<td align="center">static double log(double a)</td>
<td align="center">返回 a 的自然对数，即 lna 的值</td>
</tr>
<tr>
<td align="center">static double log10(double a)</td>
<td align="center">返回以 10 为底 a 的对数</td>
</tr>
</tbody></table>
<p><strong>例 5</strong></p>
<p>使用 Math 类中的方法实现指数的运算，main() 方法中的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4 的立方值："</span> + Math.pow(<span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"16 的平方根："</span> + Math.sqrt(<span class="number">16</span>));</span><br><span class="line">        System.out.println(<span class="string">"10 为底 2 的对数："</span> + Math.log10(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序的运行结果如下：</p>
<pre><code>4 的立方值：64.0
16 的平方根：4.0
10 为底 2 的对数：0.3010299956639812</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 2 节 Java 生成随机数</title>
    <url>/java-base-course-5-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Java 中要生成一个指定范围之内的随机数字有两种方法：一种是调用 Math 类的 random() 方法，一种是使用 Random 类。</p><a id="more"></a>
<p>Random 类提供了丰富的随机数生成方法，可以产生 boolean、int、long、float、byte、数组以及 double 类型的随机数，这是它与 random() 方法最大的不同之处。random() 方法只能产生 double 类型的 0~1 的随机数。</p>
<p>Random 类位于 java.util 包中，该类常用的有如下两个构造方法。</p>
<ul>
<li>Random()：该构造方法使用一个和当前系统时间对应的数字作为种子数，然后使用这个种子数构造 Random 对象。</li>
<li>Random(long seed)：使用单个 long 类型的参数创建一个新的随机数生成器。</li>
</ul>
<p>Random 类提供的所有方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的概率是均等的，在表 1 中列出了 Random 类中常用的方法。</p>
<p>表 1 Random 类的常用方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean nextBoolean()</td>
<td align="center">生成一个随机的 boolean 值，生成 true 和 false 的值概率相等</td>
</tr>
<tr>
<td align="center">double nextDouble()</td>
<td align="center">生成一个随机的 double 值，数值介于 [0,1.0)，含 0 而不包含 1.0</td>
</tr>
<tr>
<td align="center">int nextlnt()</td>
<td align="center">生成一个随机的 int 值，该值介于 int 的区间，也就是 -231~231-1。如果需要生成指定区间的 int 值，则需要进行一定的数学变换</td>
</tr>
<tr>
<td align="center">int nextlnt(int n)</td>
<td align="center">生成一个随机的 int 值，该值介于 [0,n)，包含 0 而不包含 n。如果想生成指定区间的 int 值，也需要进行一定的数学变换</td>
</tr>
<tr>
<td align="center">void setSeed(long seed)</td>
<td align="center">重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同</td>
</tr>
<tr>
<td align="center">long nextLong()</td>
<td align="center">返回一个随机长整型数字</td>
</tr>
<tr>
<td align="center">boolean nextBoolean()</td>
<td align="center">返回一个随机布尔型值</td>
</tr>
<tr>
<td align="center">float nextFloat()</td>
<td align="center">返回一个随机浮点型数字</td>
</tr>
<tr>
<td align="center">double nextDouble()</td>
<td align="center">返回一个随机双精度值</td>
</tr>
</tbody></table>
<p><strong>例 1</strong></p>
<p>下面编写一个 Java 程序，演示如何使用 Random 类提供的方法来生成随机数。具体代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">double</span> d1 = r.nextDouble(); <span class="comment">// 生成[0,1.0]区间的小数</span></span><br><span class="line">        <span class="keyword">double</span> d2 = r.nextDouble() * <span class="number">7</span>; <span class="comment">// 生成[0,7.0]区间的小数</span></span><br><span class="line">        <span class="keyword">int</span> i1 = r.nextInt(<span class="number">10</span>); <span class="comment">// 生成[0,10]区间的整数</span></span><br><span class="line">        <span class="keyword">int</span> i2 = r.nextInt(<span class="number">18</span>) - <span class="number">3</span>; <span class="comment">// 生成[-3,15]区间的整数</span></span><br><span class="line">        <span class="keyword">long</span> l1 = r.nextLong(); <span class="comment">// 生成一个随机长整型值</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = r.nextBoolean(); <span class="comment">// 生成一个随机布尔型值</span></span><br><span class="line">        <span class="keyword">float</span> f1 = r.nextFloat(); <span class="comment">// 生成一个随机浮点型值</span></span><br><span class="line">        System.out.println(<span class="string">"生成的[0,1.0]区间的小数是："</span> + d1);</span><br><span class="line">        System.out.println(<span class="string">"生成的[0,7.0]区间的小数是："</span> + d2);</span><br><span class="line">        System.out.println(<span class="string">"生成的[0,10]区间的整数是："</span> + i1);</span><br><span class="line">        System.out.println(<span class="string">"生成的[-3,15]区间的整数是："</span> + i2);</span><br><span class="line">        System.out.println(<span class="string">"生成一个随机长整型值："</span> + l1);</span><br><span class="line">        System.out.println(<span class="string">"生成一个随机布尔型值："</span> + b1);</span><br><span class="line">        System.out.println(<span class="string">"生成一个随机浮点型值："</span> + f1);</span><br><span class="line">        System.out.print(<span class="string">"下期七星彩开奖号码预测："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = r.nextInt(<span class="number">9</span>); <span class="comment">// 生成[0,9]区间的整数</span></span><br><span class="line">            System.out.print(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本实例每次运行时结果都不相同，这就实现了随机产生数据的功能。该程序的运行结果如下：</p>
<pre><code>生成的[0,1.0]区间的小数是：0.8773165855918825
生成的[0,7.0]区间的小数是：6.407083074782282
生成的[0,10]区间的整数是：5
生成的[-3,15]区间的整数是：4
生成一个随机长整型值：-8462847591661221914
生成一个随机布尔型值：false
生成一个随机浮点型值：0.6397003
下期七星彩开奖号码预测：0227168</code></pre><p><strong>例 2</strong></p>
<p>Math 类的 random() 方法没有参数，它默认会返回大于等于 0.0、小于 1.0 的 double 类型随机数，即 0&lt;=随机数&lt;1.0。对 random() 方法返回的数字稍加处理，即可实现产生任意范围随机数的功能。</p>
<p>下面使用 random() 方法实现随机生成一个 2~100 偶数的功能。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">2</span>; <span class="comment">// 定义随机数的最小值</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">102</span>; <span class="comment">// 定义随机数的最大值</span></span><br><span class="line">        <span class="comment">// 产生一个2~100的数</span></span><br><span class="line">        <span class="keyword">int</span> s = (<span class="keyword">int</span>) min + (<span class="keyword">int</span>) (Math.random() * (max - min));</span><br><span class="line">        <span class="keyword">if</span> (s % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是偶数就输出</span></span><br><span class="line">            System.out.println(<span class="string">"随机数是："</span> + s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是奇数就加1后输出</span></span><br><span class="line">            System.out.println(<span class="string">"随机数是："</span> + (s + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 m+(int)(Math.random()*n) 语句可以获取 m~m+n 的随机数，所以 2+(int)(Math. random()*(102-2)) 表达式可以求出 2~100 的随机数。在产生这个区间的随机数后还需要判断是否为偶数，这里使用了对 2 取余数，如果余数不是零，说明随机数是奇数，此时将随机数加 1 后再输出。</p>
<p>该程序的运行结果如下：</p>
<pre><code>随机数是：80</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 3 节 Java 数字格式化</title>
    <url>/java-base-course-5-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数字的格式在解决实际问题时使用非常普遍，这时可以使用 DedmalFormat 类对结果进行格式化处理。例如，将小数位统一成 2 位，不足 2 位的以 0 补齐。</p><a id="more"></a>
<p>DecimalFormat 是 NumberFormat 的一个子类，用于格式化十进制数字。DecimalFormat 类包含一个模式和一组符号，常用符号的说明如表 1 所示。</p>
<p>表 1 DecimalFormat 支持的特殊字符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">显示数字，如果位数不够则补 0</td>
</tr>
<tr>
<td align="center">#</td>
<td align="center">显示数字，如果位数不够不发生变化</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">小数分隔符</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减号</td>
</tr>
<tr>
<td align="center">,</td>
<td align="center">组分隔符</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">分隔科学记数法中的尾数和小数</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">前缀或后缀，乘以 100 后作为百分比显示</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">乘以 1000 后作为千进制货币符显示。用货币符号代替。如果双写，用国际货币符号代替；如果出现在一个模式中，用货币十进制分隔符代替十进制分隔符</td>
</tr>
</tbody></table>
<p><strong>例 1</strong></p>
<p>下面编写一个 Java 程序，演示如何使用 DecimalFormat 类将数字转换成各种格式，实现代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化DecimalFormat类的对象，并指定格式</span></span><br><span class="line">        DecimalFormat df1 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.0"</span>);</span><br><span class="line">        DecimalFormat df2 = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.#"</span>);</span><br><span class="line">        DecimalFormat df3 = <span class="keyword">new</span> DecimalFormat(<span class="string">"000.000"</span>);</span><br><span class="line">        DecimalFormat df4 = <span class="keyword">new</span> DecimalFormat(<span class="string">"###.###"</span>);</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入一个float类型的数字："</span>);</span><br><span class="line">        <span class="keyword">float</span> f = scan.nextFloat();</span><br><span class="line">        <span class="comment">// 对输入的数字应用格式，并输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"0.0 格式："</span> + df1.format(f));</span><br><span class="line">        System.out.println(<span class="string">"#.# 格式："</span> + df2.format(f));</span><br><span class="line">        System.out.println(<span class="string">"000.000 格式："</span> + df3.format(f));</span><br><span class="line">        System.out.println(<span class="string">"###.### 格式："</span> + df4.format(f));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行上述代码，输出结果如下所示：</p>
<pre><code>请输入一个float类型的数字：5487.45697
0.0 格式：5487.5
#.# 格式：5487.5
000.000 格式：5487.457
###.### 格式：5487.457

请输入一个float类型的数字：5.0
0.0 格式：5.0
#.# 格式：5
000.000 格式：005.000
###.### 格式：5</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 大数字运算</title>
    <url>/java-base-course-5-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Java 中提供了用于大数字运算的类，即 java.math.BigInteger 类和 java.math.BigDecimal 类。这两个类用于高精度计算，其中 BigInteger 类是针对整型大数字的处理类，而 BigDecimal 类是针对大小数的处理类。</p><a id="more"></a>
<h2 id="BigInteger-类"><a href="#BigInteger-类" class="headerlink" title="BigInteger 类"></a>BigInteger 类</h2><p>如果要存储比 Integer 更大的数字，Integer 数据类型就无能为力了。因此，Java 中提供 BigInteger 类来处理更大的数字。</p>
<p>BigInteger 类型的数字范围较 Integer 类型的数字范围要大得多。BigInteger 支持任意精度的整数，也就是说在运算中 BigInteger 类型可以准确地表示任何大小的整数值。</p>
<p>除了基本的加、减、乘、除操作之外，BigInteger 类还封装了很多操作，像求绝对值、相反数、最大公约数以及判断是否为质数等。</p>
<p>要使用 BigInteger 类，首先要创建一个 BigInteger 对象。BigInteger 类提供了很多种构造方法，其中最直接的一种是参数以字符串形式代表要处理的数字。这个方法语法格式如下：</p>
<pre><code>BigInteger(String val)</code></pre><p>这里的 val 是数字十进制的字符串。例如，要将数字 5 转换为 BigInteger 对象，语句如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger bi = <span class="keyword">new</span> BigInteger(<span class="string">"5"</span>)</span><br></pre></td></tr></table></figure>

<p>注意：这里数字 5 的双引号是必需的，因为 BigInteger 类构造方法要求参数是字符串类型。</p>
<p>创建 BigInteger 对象之后，便可以调用 BigInteger 类提供的方法进行各种数学运算操作，表 1 列出了 BigInteger 类的常用运算方法。</p>
<blockquote>
<p>表1 BigInteger类的常用运算方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">add(BigInteger val)</td>
<td align="center">做加法运算</td>
</tr>
<tr>
<td align="center">subtract(BigInteger val)</td>
<td align="center">做减法运算</td>
</tr>
<tr>
<td align="center">multiply(BigInteger val)</td>
<td align="center">做乘法运算</td>
</tr>
<tr>
<td align="center">divide(BigInteger val)</td>
<td align="center">做除法运算</td>
</tr>
<tr>
<td align="center">remainder(BigInteger val)</td>
<td align="center">做取余数运算</td>
</tr>
<tr>
<td align="center">divideAndRemainder(BigInteger val)</td>
<td align="center">做除法运算，返回数组的第一个值为商，第二个值为余数</td>
</tr>
<tr>
<td align="center">pow(int exponent)</td>
<td align="center">做参数的 exponent 次方运算</td>
</tr>
<tr>
<td align="center">negate()</td>
<td align="center">取相反数</td>
</tr>
<tr>
<td align="center">shiftLeft(int n)</td>
<td align="center">将数字左移 n 位，如果 n 为负数，则做右移操作</td>
</tr>
<tr>
<td align="center">shiftRight(int n)</td>
<td align="center">将数字右移 n 位，如果 n 为负数，则做左移操作</td>
</tr>
<tr>
<td align="center">and(BigInteger val)</td>
<td align="center">做与运算</td>
</tr>
<tr>
<td align="center">or(BigInteger val)</td>
<td align="center">做或运算</td>
</tr>
<tr>
<td align="center">compareTo(BigInteger val)</td>
<td align="center">做数字的比较运算</td>
</tr>
<tr>
<td align="center">equals(Object obj)</td>
<td align="center">当参数 obj 是 Biglnteger 类型的数字并且数值相等时返回 true, 其他返回 false</td>
</tr>
<tr>
<td align="center">min(BigInteger val)</td>
<td align="center">返回较小的数值</td>
</tr>
<tr>
<td align="center">max(BigInteger val)</td>
<td align="center">返回较大的数值</td>
</tr>
</tbody></table>
<p><strong>例 1</strong></p>
<p>编写一个 Java 程序，将用户输入的数字作为 BigInteger 对象，然后调用该对象的各种方法实现加、减、乘、除和其他运算，并输出结果。具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个整型数字："</span>);</span><br><span class="line">        <span class="comment">// 保存用户输入的数字</span></span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line">        <span class="comment">// 使用输入的数字创建BigInteger对象</span></span><br><span class="line">        BigInteger bi = <span class="keyword">new</span> BigInteger(num + <span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 计算大数字加上99的结果</span></span><br><span class="line">        System.out.println(<span class="string">"加法操作结果："</span> + bi.add(<span class="keyword">new</span> BigInteger(<span class="string">"99"</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字减去25的结果</span></span><br><span class="line">        System.out.println(<span class="string">"减法操作结果："</span> + bi.subtract(<span class="keyword">new</span> BigInteger(<span class="string">"25"</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字乘以3的结果</span></span><br><span class="line">        System.out.println(<span class="string">"乘法橾作结果："</span> + bi.multiply(<span class="keyword">new</span> BigInteger(<span class="string">"3"</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字除以2的结果</span></span><br><span class="line">        System.out.println(<span class="string">"除法操作结果："</span> + bi.divide(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字除以3的商</span></span><br><span class="line">        System.out.println(<span class="string">"取商操作结果："</span> + bi.divideAndRemainder(<span class="keyword">new</span> BigInteger(<span class="string">"3"</span>))[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 计算大数字除以3的余数</span></span><br><span class="line">        System.out.println(<span class="string">"取余操作结果："</span> + bi.divideAndRemainder(<span class="keyword">new</span> BigInteger(<span class="string">"3"</span>))[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 计算大数字的2次方</span></span><br><span class="line">        System.out.println(<span class="string">"取 2 次方操作结果："</span> + bi.pow(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 计算大数字的相反数</span></span><br><span class="line">        System.out.println(<span class="string">"取相反数操作结果："</span> + bi.negate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码将用户输入的整型数字保存到 num 变量中，由于 BigInteger 类的构造方法只接收字符串类型的参数，所以使用“new BigInteger(num+””)”代码来创建 BigInteger 对象。接下来的代码演示了如何调用 BigInteger 类提供的运算方法，运行效果下所示。</p>
<pre><code>请输入一个整型数字：
12
加法操作结果：111
减法操作结果：-13
乘法橾作结果：36
除法操作结果：6
取商操作结果：4
取余操作结果：0
取 2 次方操作结果：144
取相反数操作结果：-12</code></pre><h2 id="BigDecimal-类"><a href="#BigDecimal-类" class="headerlink" title="BigDecimal 类"></a>BigDecimal 类</h2><p>BigInteger 和 BigDecimal 都能实现大数字的运算，不同的是 BigDecimal 加入了小数的概念。一般的 float 和 double 类型数据只能用来做科学计算或工程计算，但由于在商业计算中要求数字精度比较高，所以要用到 BigDecimal 类。BigDecimal 类支持任何精度的浮点数，可以用来精确计算货币值。</p>
<p>BigDecimal 常用的构造方法如下。</p>
<ul>
<li>BigDecimal(double val)：实例化时将双精度型转换为 BigDecimal 类型。</li>
<li>BigDecimal(String val)：实例化时将字符串形式转换为 BigDecimal 类型。</li>
</ul>
<p>BigDecimal 类的方法可以用来做超大浮点数的运算，像加、减、乘和除等。在所有运算中，除法运算是最复杂的，因为在除不尽的情况下，末位小数的处理方式是需要考虑的。</p>
<p>下面列出了 BigDecimal 类用于实现加、减、乘和除运算的方法。</p>
<pre><code>BigDecimal add(BigDecimal augend)    // 加法操作
BigDecimal subtract(BigDecimal subtrahend)    // 减法操作
BigDecimal multiply(BigDecimal multiplieand)    // 乘法操作
BigDecimal divide(BigDecimal divisor,int scale,int roundingMode )    // 除法操作</code></pre><p>其中，divide() 方法的 3 个参数分别表示除数、商的小数点后的位数和近似值处理模式。</p>
<p>表 2 列出了 roundingMode 参数支持的处理模式。</p>
<blockquote>
<p>表2 roundingMode参数支持的处理模式</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">模式名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BigDecimal.ROUND_UP</td>
<td align="center">商的最后一位如果大于 0，则向前进位，正负数都如此</td>
</tr>
<tr>
<td align="center">BigDecimal.ROUND_DOWN</td>
<td align="center">商的最后一位无论是什么数字都省略</td>
</tr>
<tr>
<td align="center">BigDecimal.ROUND_CEILING</td>
<td align="center">商如果是正数，按照 ROUND_UP 模式处理；如果是负数，按照 ROUND_DOWN 模式处理</td>
</tr>
<tr>
<td align="center">BigDecimal.ROUND_FLOOR</td>
<td align="center">与 ROUND_CELING 模式相反，商如果是正数，按照 ROUND_DOWN 模式处理；如果是负数，按照 ROUND_UP 模式处理</td>
</tr>
<tr>
<td align="center">BigDecimal.ROUND_HALF_ DOWN</td>
<td align="center">对商进行五舍六入操作。如果商最后一位小于等于 5，则做舍弃操作，否则对最后一位进行进位操作</td>
</tr>
<tr>
<td align="center">BigDecimal.ROUND_HALF_UP</td>
<td align="center">对商进行四舍五入操作。如果商最后一位小于 5，则做舍弃操作，否则对最后一位进行进位操作</td>
</tr>
<tr>
<td align="center">BigDecimal.ROUND_HALF_EVEN</td>
<td align="center">如果商的倒数第二位是奇数，则按照 ROUND_HALF_UP 处理；如果是偶数，则按照 ROUND_HALF_DOWN 处理</td>
</tr>
</tbody></table>
<p><strong>例 2</strong></p>
<p>编写一个 Java 程序，演示如何使用 BigDecimal 类提供的方法对数字执行运算，并输出结果。具体实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">        <span class="comment">// 保存用户输入的数字</span></span><br><span class="line">        <span class="keyword">double</span> num = input.nextDouble();</span><br><span class="line">        <span class="comment">// 使用输入的数字创建BigDecimal对象</span></span><br><span class="line">        BigDecimal bd = <span class="keyword">new</span> BigDecimal(num);</span><br><span class="line">        <span class="comment">// 计算大数字加上99.154的结果</span></span><br><span class="line">        System.out.println(<span class="string">"加法操作结果："</span> + bd.add(<span class="keyword">new</span> BigDecimal(<span class="number">99.154</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字减去-25.157904的结果</span></span><br><span class="line">        System.out.println(<span class="string">"减法操作结果："</span> + bd.subtract(<span class="keyword">new</span> BigDecimal(-<span class="number">25.157904</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字乘以3.5的结果</span></span><br><span class="line">        System.out.println(<span class="string">"乘法操作结果："</span> + bd.multiply(<span class="keyword">new</span> BigDecimal(<span class="number">3.5</span>)));</span><br><span class="line">        <span class="comment">// 计算大数字除以3.14的结果，并保留小数后2位</span></span><br><span class="line">        System.out.println(<span class="string">"除法操作结果(保留 2 位小数)："</span> + bd.divide(<span class="keyword">new</span> BigDecimal(<span class="number">3.14</span>), <span class="number">2</span>, BigDecimal.ROUND_CEILING));</span><br><span class="line">        <span class="comment">// 计算大数字除以3.14的结果，并保留小数后5位</span></span><br><span class="line">        System.out.println(<span class="string">"除法操作结果(保留 5 位小数)："</span> + bd.divide(<span class="keyword">new</span> BigDecimal(<span class="number">3.14</span>), <span class="number">5</span>, BigDecimal.ROUND_CEILING));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码将用户输入的数字保存到 num 变量中，然后调用“newBigDecimal(num)”方法来创建 BigDecimal 对象。接下来的代码演示了如何调用 BigDecimal 类提供的运算方法，运行效果如下所示。</p>
<pre><code>请输入一个数字：
100
加法操作结果：199.15399999999999636202119290828704833984375
减法操作结果：125.157903999999998490011421381495893001556396484375
乘法操作结果：350.0
除法操作结果(保留 2 位小数)：31.85
除法操作结果(保留 5 位小数)：31.84714</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 5 节 Java 时间日期的处理</title>
    <url>/java-base-course-5-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Java 中获取当前时间，可以使用 java.util.Date 类和 java.util.Calendar 类完成。其中，Date 类主要封装了系统的日期和时间的信息，Calendar 类则会根据系统的日历来解释 Date 对象。下面详细介绍这两个类的具体使用。</p><a id="more"></a>
<h2 id="Date-类"><a href="#Date-类" class="headerlink" title="Date 类"></a>Date 类</h2><p>Date 类表示系统特定的时间戳，可以精确到毫秒。Date 对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。</p>
<ol>
<li>构造方法</li>
</ol>
<p>Date 类有如下两个构造方法。</p>
<ul>
<li>Date()：此种形式表示分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒），使用该构造方法创建的对象可以获取本地的当前时间。</li>
<li>Date(long date)：此种形式表示从 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒开始经过参数 date 指定的毫秒数。</li>
</ul>
<p>这两个构造方法的使用示例如下：</p>
<pre><code>Date date1 = new Date();    // 调用无参数构造函数
System.out.println(date1.toString());    // 输出：Wed May 18 21:24:40 CST 2016
Date date2 = new Date(60000);    // 调用含有一个long类型参数的构造函数
System.out.println(date2);    // 输出：Thu Jan 0108:01:00 CST 1970</code></pre><p>Date 类的无参数构造方法获取的是系统当前的时间，显示的顺序为星期、月、日、小时、分、秒、年。</p>
<p>Date 类带 long 类型参数的构造方法获取的是距离 GMT 指定毫秒数的时间，60000 毫秒是一分钟，而 GMT（格林尼治标准时间）与 CST（中央标准时间）相差 8 小时，也就是说 1970 年 1 月 1 日 00:00:00 GMT 与 1970 年 1 月 1 日 08:00:00 CST 表示的是同一时间。 因此距离 1970 年 1 月 1 日 00:00:00 CST 一分钟的时间为 1970 年 1 月 1 日 00:01:00 CST，即使用 Date 对象表示为 Thu Jan 01 08:01:00 CST 1970。</p>
<ol start="2">
<li>常用方法</li>
</ol>
<p>Date 类提供了许多与日期和事件相关的方法，其中常见的方法如表 1 所示。</p>
<blockquote>
<p>表1 Date类中的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean after(Date when)</td>
<td align="center">判断此日期是否在指定日期之后</td>
</tr>
<tr>
<td align="center">boolean before(Date when)</td>
<td align="center">判断此日期是否在指定日期之前</td>
</tr>
<tr>
<td align="center">int compareTo(Date anotherDate)</td>
<td align="center">比较两个日期的顺序</td>
</tr>
<tr>
<td align="center">boolean equals(Object obj)</td>
<td align="center">比较两个日期的相等性</td>
</tr>
<tr>
<td align="center">long getTime()</td>
<td align="center">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来，此 Date 对象表示的毫秒数</td>
</tr>
<tr>
<td align="center">String toString()</td>
<td align="center">把此 Date 对象转换为以下形式的 String: dow mon dd hh:mm:ss zzz yyyy。</td>
</tr>
</tbody></table>
<p>其中 dow 是一周中的某一天(Sun、Mon、Tue、Wed、Thu、Fri 及 Sat)</p>
<p><strong>例 1</strong></p>
<p>下面使用一个实例来具体演示 Date 类的使用。假设，某一天特定时间要去做一件事，而且那个时间已经过去一分钟之后才想起来这件事还没有办，这时系统将会提示已经过去了多 长时间。具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入要做的事情："</span>);</span><br><span class="line">        String title = input.next();</span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(); <span class="comment">// 获取当前日期</span></span><br><span class="line">        System.out.println(<span class="string">"["</span> + title + <span class="string">"] 这件事发生时间为："</span> + date1);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">60000</span>);<span class="comment">// 暂停 1 分钟</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"现在时间为："</span> + date2);</span><br><span class="line">        <span class="keyword">if</span> (date2.before(date1)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你还有 "</span> + (date2.getTime() - date1.getTime()) / <span class="number">1000</span> + <span class="string">" 秒需要去完成【"</span> + title + <span class="string">"】这件事！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"【"</span> + title + <span class="string">"】事情已经过去了 "</span> + (date2.getTime() - date1.getTime()) / <span class="number">1000</span> + <span class="string">" 秒"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该程序中，分别使用 Date 类的无参数构造方法创建了两个 Date 对象。在创建完第一个 Date 对象后，使用 Thread.sleep() 方法让程序休眠 60 秒，然后再创建第二个 Date 对象，这样第二个 Date 对象所表示的时间将会在第一个 Date 对象所表示时间之后，因此“date2.before(date1)”条件表达式不成立，从而执行 else 块中的代码，表示事情已经发生过。</p>
<p>运行该程序，执行结果如下所示。</p>
<pre><code>请输入要做的事情：
收快递
【收快递】这件事发生时间为：Fri Oct 12 11:11:07 CST 2018
现在时间为：Fri Oct 12 11:12:07 CST 2018
【收快递】事情已经过去了 60 秒</code></pre><h2 id="Calendar-类"><a href="#Calendar-类" class="headerlink" title="Calendar 类"></a>Calendar 类</h2><p>Calendar 类是一个抽象类，它为特定瞬间与 YEAR、MONTH、DAY_OF—MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（如获得下星期的日期） 提供了一些方法。</p>
<p>创建 Calendar 对象不能使用 new 关键字，因为 Calendar 类是一个抽象类，但是它提供了一个 getInstance() 方法来获得 Calendar类的对象。getInstance() 方法返回一个 Calendar 对象，其日历字段已由当前日期和时间初始化。</p>
<pre><code>Calendar c = Calendar.getInstance();</code></pre><p>当创建了一个 Calendar 对象后，就可以通过 Calendar 对象中的一些方法来处理日期、时间。Calendar 类的常用方法如表 2 所示。</p>
<blockquote>
<p>表 2 Calendar类的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void add(int field, int amount)</td>
<td align="center">根据日历的规则，为给定的日历字段 field 添加或减去指定的时间量 amount</td>
</tr>
<tr>
<td align="center">boolean after(Object when)</td>
<td align="center">判断此 Calendar 表示的时间是否在指定时间 when 之后，并返回判断结果</td>
</tr>
<tr>
<td align="center">boolean before(Object when)</td>
<td align="center">判断此 Calendar 表示的时间是否在指定时间 when 之前，并返回判断结果</td>
</tr>
<tr>
<td align="center">void clear()</td>
<td align="center">清空 Calendar 中的日期时间值</td>
</tr>
<tr>
<td align="center">int compareTo(Calendar anotherCalendar)</td>
<td align="center">比较两个 Calendar 对象表示的时间值（从格林威治时间 1970 年 01 月 01 日00 时 00 分 00 秒至现在的毫秒偏移量），大则返回 1，小则返回 -1,相等返回 0</td>
</tr>
<tr>
<td align="center">int get(int field)</td>
<td align="center">返回指定日历字段的值</td>
</tr>
<tr>
<td align="center">int getActualMaximum(int field)</td>
<td align="center">返回指定日历字段可能拥有的最大值</td>
</tr>
<tr>
<td align="center">int getActualMinimum(int field)</td>
<td align="center">返回指定日历字段可能拥有的最小值</td>
</tr>
<tr>
<td align="center">int getFirstDayOfWeek()</td>
<td align="center">获取一星期的第一天。根据不同的国家地区，返回不同的值</td>
</tr>
<tr>
<td align="center">static Calendar getInstance()</td>
<td align="center">使用默认时区和语言坏境获得一个日历</td>
</tr>
<tr>
<td align="center">static Calendar getInstance(TimeZone zone)</td>
<td align="center">使用指定时区和默认语言环境获得一个日历</td>
</tr>
<tr>
<td align="center">static Calendar getInstance(TimeZone zone,Locale aLocale)</td>
<td align="center">使用指定时区和语言环境获得一个日历</td>
</tr>
<tr>
<td align="center">Date getTime()</td>
<td align="center">返回一个表示此 Calendar 时间值（从格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒至现在的毫秒偏移量）的 Date 对象</td>
</tr>
<tr>
<td align="center">long getTimeInMillis()</td>
<td align="center">返回此 Calendar 的时间值，以毫秒为单位</td>
</tr>
<tr>
<td align="center">void set(int field, int value)</td>
<td align="center">为指定的日历字段设置给定值</td>
</tr>
<tr>
<td align="center">void set(int year, int month, int date)</td>
<td align="center">设置日历字段 YEAR、MONTH 和 DAY_OF_MONTH 的值</td>
</tr>
<tr>
<td align="center">void set(int year, int month, int date, int hourOfDay,int minute, int second)</td>
<td align="center">设置字段 YEAR、MONTH、DAY_OF_MONTH、HOUR、 MINUTE 和 SECOND 的值</td>
</tr>
<tr>
<td align="center">void setFirstDayOfWeek(int value)</td>
<td align="center">设置一星期的第一天是哪一天</td>
</tr>
<tr>
<td align="center">void setTimeInMillis(long millis)</td>
<td align="center">用给定的 long 值设置此 Calendar 的当前时间值</td>
</tr>
</tbody></table>
<p>Calendar 对象可以调用 set() 方法将日历翻到任何一个时间，当参数 year 取负数时表示公元前。Calendar 对象调用 get() 方法可以获取有关年、月、日等时间信息，参数 field 的有效值由 Calendar 静态常量指定。</p>
<p>Calendar 类中定义了许多常量，分别表示不同的意义。</p>
<ul>
<li>Calendar.YEAR：年份。</li>
<li>Calendar.MONTH：月份。</li>
<li>Calendar.DATE：日期。</li>
<li>Calendar.DAY_OF_MONTH：日期，和上面的字段意义完全相同。</li>
<li>Calendar.HOUR：12小时制的小时。</li>
<li>Calendar.HOUR_OF_DAY：24 小时制的小时。</li>
<li>Calendar.MINUTE：分钟。</li>
<li>Calendar.SECOND：秒。</li>
<li>Calendar.DAY_OF_WEEK：星期几。</li>
</ul>
<p>例如，要获取当前月份可用如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> month = Calendar.getInstance().get(Calendar.MONTH);</span><br></pre></td></tr></table></figure>
<p>如果整型变量 month 的值是 0，表示当前日历是在 1 月份；如果值是 11，则表示当前日历在 12 月份。</p>
<p>使用 Calendar 类处理日期时间的实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance(); <span class="comment">// 如果不设置时间，则默认为当前时间</span></span><br><span class="line">calendar.setTime(<span class="keyword">new</span> Date()); <span class="comment">// 将系统当前时间赋值给 Calendar 对象</span></span><br><span class="line">System.out.println(<span class="string">"现在时刻："</span> + calendar.getTime()); <span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="keyword">int</span> year = calendar.get(Calendar.YEAR); <span class="comment">// 获取当前年份</span></span><br><span class="line">System.out.println(<span class="string">"现在是"</span> + year + <span class="string">"年"</span>);</span><br><span class="line"><span class="keyword">int</span> month = calendar.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">// 获取当前月份（月份从 0 开始，所以加 1）</span></span><br><span class="line">System.out.print(month + <span class="string">"月"</span>);</span><br><span class="line"><span class="keyword">int</span> day = calendar.get(Calendar.DATE); <span class="comment">// 获取日</span></span><br><span class="line">System.out.print(day + <span class="string">"日"</span>);</span><br><span class="line"><span class="keyword">int</span> week = calendar.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>; <span class="comment">// 获取今天星期几（以星期日为第一天）</span></span><br><span class="line">System.out.print(<span class="string">"星期"</span> + week);</span><br><span class="line"><span class="keyword">int</span> hour = calendar.get(Calendar.HOUR_OF_DAY); <span class="comment">// 获取当前小时数（24 小时制）</span></span><br><span class="line">System.out.print(hour + <span class="string">"时"</span>);</span><br><span class="line"><span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE); <span class="comment">// 获取当前分钟</span></span><br><span class="line">System.out.print(minute + <span class="string">"分"</span>);</span><br><span class="line"><span class="keyword">int</span> second = calendar.get(Calendar.SECOND); <span class="comment">// 获取当前秒数</span></span><br><span class="line">System.out.print(second + <span class="string">"秒"</span>);</span><br><span class="line"><span class="keyword">int</span> millisecond = calendar.get(Calendar.MILLISECOND); <span class="comment">// 获取毫秒数</span></span><br><span class="line">System.out.print(millisecond + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">int</span> dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH); <span class="comment">// 获取今天是本月第几天</span></span><br><span class="line">System.out.println(<span class="string">"今天是本月的第 "</span> + dayOfMonth + <span class="string">" 天"</span>);</span><br><span class="line"><span class="keyword">int</span> dayOfWeekInMonth = calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH); <span class="comment">// 获取今天是本月第几周</span></span><br><span class="line">System.out.println(<span class="string">"今天是本月第 "</span> + dayOfWeekInMonth + <span class="string">" 周"</span>);</span><br><span class="line"><span class="keyword">int</span> many = calendar.get(Calendar.DAY_OF_YEAR); <span class="comment">// 获取今天是今年第几天</span></span><br><span class="line">System.out.println(<span class="string">"今天是今年第 "</span> + many + <span class="string">" 天"</span>);</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.set(<span class="number">2012</span>, <span class="number">8</span>, <span class="number">8</span>); <span class="comment">// 设置年月日，时分秒将默认采用当前值</span></span><br><span class="line">System.out.println(<span class="string">"设置日期为 2012-8-8 后的时间："</span> + c.getTime()); <span class="comment">// 输出时间</span></span><br></pre></td></tr></table></figure>
<p>上面的示例代码演示了 Calendar 类中的方法与常量的结合使用，从而完成处理日期的操作。</p>
<p><strong>例 2</strong></p>
<p>下面使用 Calendar 类来实现日历的打印功能，代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.set(<span class="number">2016</span>, <span class="number">5</span>, <span class="number">1</span>); <span class="comment">// 实际的calendar对象所表示的日期为2016年6月1日</span></span><br><span class="line">        <span class="comment">// 判断2016年6月1日为一周中的第几天</span></span><br><span class="line">        <span class="keyword">int</span> index = calendar.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] title = &#123; <span class="string">'日'</span>, <span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span> &#125;; <span class="comment">// 存放曰历的头部</span></span><br><span class="line">        <span class="keyword">int</span> daysArray[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>][<span class="number">7</span>];<span class="comment">// 存放日历的数据</span></span><br><span class="line">        <span class="keyword">int</span> daysInMonth = <span class="number">31</span>; <span class="comment">// 该月的天数</span></span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">1</span>; <span class="comment">// 自动增长</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 填充第一周的日期数据，即日历中的第一行</span></span><br><span class="line">            daysArray[<span class="number">0</span>][i] = day++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 填充其他周的日历数据，控制行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果当前day表示的是本月最后一天，则停止向数组中继续赋值</span></span><br><span class="line">                <span class="keyword">if</span> (day &gt; daysInMonth) &#123;</span><br><span class="line">                    i = <span class="number">6</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                daysArray[i][j] = day++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------------2016 年 6 月--------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.length; i++) &#123;</span><br><span class="line">            System.out.print(title[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">// 输出二元数组daysArray中的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (daysArray[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果到月末，则完成显示日历的任务，停止该方法的执行</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(daysArray[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该程序看似复杂其实很简单。因为 Calendar 类所表示的时间月份是 set() 方法中表示月份的参数值 +1，因此 Calendar 类的实际时间为 2016 年 6 月 1 日。在下面的代码中分别获取 6 月 1 日为本周中的第几天，以便在相应的星期下开始输出 6 月份的日历。程序中的 daysArray 是一个二元数组，该二元数组控制了日历的格式输出，第一个子数组控制日历的行，第二个子数组控制曰历的列，即可输出二元数组中的每一个元素。</p>
<p>运行程序，执行结果如下所示。</p>
<pre><code>------------------2016 年 6 月--------------------

日 一 二 三 四 五 六
   1 2 3 4
5 6 7 8 9 10 11
12 13 14 15 16 17 18
19 20 21 22 23 24 25
26 27 28 29 30 31 </code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 6 节 Java 日期格式化</title>
    <url>/java-base-course-5-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>格式化日期表示将日期/时间格式转换为预先定义的日期/时间格式。例如将日期“Fri May 18 15:46:24 CST2016” 格式转换为 “2016-5-18 15:46:24 星期五”的格式。</p><a id="more"></a>
<p>在 Java 中，可以使用 DateFormat 类和 SimpleDateFormat 类来格式化日期，下面详细介绍这两个格式化日期类的使用。</p>
<h2 id="DateFormat-类"><a href="#DateFormat-类" class="headerlink" title="DateFormat 类"></a>DateFormat 类</h2><p>DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。日期/时间格式化子类（如 SimpleDateFormat）允许进行格式化（也就是日期→文本）、解析（文本→日期）和标准化日期。</p>
<p>在创建 DateFormat 对象时不能使用 new 关键字，而应该使用 DateFormat 类中的静态方法 getDateInstance()，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateFormat df = DateFormat.getDatelnstance();</span><br></pre></td></tr></table></figure>
<p>在创建了一个 DateFormat 对象后，可以调用该对象中的方法来对日期/时间进行格式化。DateFormat 类中常用方法如表 1 所示。</p>
<blockquote>
<p>表 1 DateFormat类的常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String format(Date date)</td>
<td align="center">将 Date 格式化日期/时间字符串</td>
</tr>
<tr>
<td align="center">Calendar getCalendar()</td>
<td align="center">获取与此日期/时间格式相关联的日历</td>
</tr>
<tr>
<td align="center">static DateFormat getDateInstance()</td>
<td align="center">获取具有默认格式化风格和默认语言环境的日期格式</td>
</tr>
<tr>
<td align="center">static DateFormat getDateInstance(int style)</td>
<td align="center">获取具有指定格式化风格和默认语言环境的日期格式</td>
</tr>
<tr>
<td align="center">static DateFormat getDateInstance(int style,Locale locale)</td>
<td align="center">获取具有指定格式化风格和指定语言环境的日期格式</td>
</tr>
<tr>
<td align="center">static DateFormat getDateTimeInstance()</td>
<td align="center">获取具有默认格式化风格和默认语言环境的日期/时间格式</td>
</tr>
<tr>
<td align="center">static DateFormat getDateTimeInstance(int dateStyle,int timeStyle)</td>
<td align="center">获取具有指定日期/时间格式化风格和默认语言环境的日期/时间格式</td>
</tr>
<tr>
<td align="center">static DateFormat getDateTimeInstance(int dateStyle,int timeStyle,Locale locale)</td>
<td align="center">获取具有指定日期/时间格式化风格和指定语言环境的日期/时间格式</td>
</tr>
<tr>
<td align="center">static DateFormat getTimeInstance()</td>
<td align="center">获取具有默认格式化风格和默认语言环境的时间格式</td>
</tr>
<tr>
<td align="center">static DateFormat getTimeInstance(int style)</td>
<td align="center">获取具有指定格式化风格和默认语言环境的时间格式</td>
</tr>
<tr>
<td align="center">static DateFormat getTimeInstance(int style,Locale locale)</td>
<td align="center">获取具有指定格式化风格和指定语言环境的时间格式</td>
</tr>
<tr>
<td align="center">void setCalendar(Calendar newCalendar)</td>
<td align="center">为此格式设置日历</td>
</tr>
<tr>
<td align="center">Date parse(String source)</td>
<td align="center">将给定的字符串解析成日期/时间</td>
</tr>
</tbody></table>
<p>格式化样式主要通过 DateFormat 常量设置。将不同的常量传入到表 1 所示的方法中，以控制结果的长度。DateFormat 类的常量如下。</p>
<ul>
<li>SHORT：完全为数字，如 12.5.10 或 5:30pm。</li>
<li>MEDIUM：较长，如 May 10，2016。</li>
<li>LONG：更长，如 May 12，2016 或 11:15:32am。</li>
<li>FULL：是完全指定，如 Tuesday、May 10、2012 AD 或 11:l5:42am CST。</li>
</ul>
<p>使用 DateFormat 类格式化曰期/时间的示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取不同格式化风格和中国环境的日期</span></span><br><span class="line">DateFormat df1 = DateFormat.getDateInstance(DateFormat.SHORT, Locale.CHINA);</span><br><span class="line">DateFormat df2 = DateFormat.getDateInstance(DateFormat.FULL, Locale.CHINA);</span><br><span class="line">DateFormat df3 = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.CHINA);</span><br><span class="line">DateFormat df4 = DateFormat.getDateInstance(DateFormat.LONG, Locale.CHINA);</span><br><span class="line"><span class="comment">// 获取不同格式化风格和中国环境的时间</span></span><br><span class="line">DateFormat df5 = DateFormat.getTimeInstance(DateFormat.SHORT, Locale.CHINA);</span><br><span class="line">DateFormat df6 = DateFormat.getTimeInstance(DateFormat.FULL, Locale.CHINA);</span><br><span class="line">DateFormat df7 = DateFormat.getTimeInstance(DateFormat.MEDIUM, Locale.CHINA);</span><br><span class="line">DateFormat df8 = DateFormat.getTimeInstance(DateFormat.LONG, Locale.CHINA);</span><br><span class="line"><span class="comment">// 将不同格式化风格的日期格式化为日期字符串</span></span><br><span class="line">String date1 = df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">String date2 = df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">String date3 = df3.format(<span class="keyword">new</span> Date());</span><br><span class="line">String date4 = df4.format(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 将不同格式化风格的时间格式化为时间字符串</span></span><br><span class="line">String time1 = df5.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time2 = df6.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time3 = df7.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time4 = df8.format(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 输出日期</span></span><br><span class="line">System.out.println(<span class="string">"SHORT："</span> + date1 + <span class="string">" "</span> + time1);</span><br><span class="line">System.out.println(<span class="string">"FULL："</span> + date2 + <span class="string">" "</span> + time2);</span><br><span class="line">System.out.println(<span class="string">"MEDIUM："</span> + date3 + <span class="string">" "</span> + time3);</span><br><span class="line">System.out.println(<span class="string">"LONG："</span> + date4 + <span class="string">" "</span> + time4);</span><br></pre></td></tr></table></figure>

<p>运行该段代码，输出的结果如下：</p>
<pre><code>SHORT：18-10-15 上午9:30
FULL：2018年10月15日 星期一 上午09时30分43秒 CST
MEDIUM：2018-10-15 9:30:43
LONG：2018年10月15日 上午09时30分43秒</code></pre><p>该示例主要介绍了 DateFormat 类中方法与常量的结合使用，通过使用 DateFomat 类可以对日期进行不同风格的格式化。</p>
<h2 id="SimpleDateFormat-类"><a href="#SimpleDateFormat-类" class="headerlink" title="SimpleDateFormat 类"></a>SimpleDateFormat 类</h2><p>如果使用 DateFormat 类格式化日期/时间并不能满足要求，那么就需要使用 DateFormat 类的子类——SimpleDateFormat。</p>
<p>SimpleDateFormat 是一个以与语言环境有关的方式来格式化和解析日期的具体类，它允许进行格式化（日期→文本）、解析（文本→日期）和规范化。SimpleDateFormat 使得可以选择任何用户定义的日期/时间格式的模式。</p>
<p>SimpleDateFormat 类主要有如下 3 种构造方法。</p>
<ul>
<li>SimpleDateFormat()：用默认的格式和默认的语言环境构造 SimpleDateFormat。</li>
<li>SimpleDateFormat(String pattern)：用指定的格式和默认的语言环境构造 SimpleDateF ormat。</li>
<li>SimpleDateFormat(String pattern,Locale locale)：用指定的格式和指定的语言环境构造 SimpleDateF ormat。</li>
</ul>
<p>SimpleDateFormat 自定义格式中常用的字母及含义如表 2 所示。</p>
<blockquote>
<p>表 2 日期/时间格式中的字母及其含义与示例</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">字母</th>
<th align="center">含义</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">y</td>
<td align="center">年份。一般用 yy 表示两位年份，yyyy 表示 4 位年份</td>
<td align="center">使用 yy 表示的年扮，如 11；使用 yyyy 表示的年份，如 2011</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">月份。一般用 MM 表示月份，如果使用 MMM，则会根据语言环境显示不同语言的月份</td>
<td align="center">使用 MM 表示的月份，如 05；使用 MMM 表示月份，在 Locale.CHINA语言环境下，如“十月”；在 Locale.US语言环境下，如 Oct</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">月份中的天数。一般用 dd 表示天数</td>
<td align="center">使用 dd 表示的天数，如 10</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">年份中的天数。表示当天是当年的第几天， 用 D 表示</td>
<td align="center">使用 D 表示的年份中的天数，如 295</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">星期几。用 E 表示，会根据语言环境的不同， 显示不同语言的星期几</td>
<td align="center">使用 E 表示星期几，在 Locale.CHINA 语言环境下，如“星期四”；在 Locale.US 语言环境下，如 Thu</td>
</tr>
<tr>
<td align="center">H</td>
<td align="center">一天中的小时数（0~23)。一般用 HH 表示小时数</td>
<td align="center">使用 HH 表示的小时数，如 18</td>
</tr>
<tr>
<td align="center">h</td>
<td align="center">一天中的小时数（1~12)。一般使用 hh 表示小时数</td>
<td align="center">使用 hh 表示的小时数，如 10 (注意 10 有可能是 10 点，也可能是 22 点）</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center">分钟数。一般使用 mm 表示分钟数</td>
<td align="center">使用 mm 表示的分钟数，如 29</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">秒数。一般使用 ss 表示秒数</td>
<td align="center">使用 ss 表示的秒数，如 38</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">毫秒数。一般使用 SSS 表示毫秒数</td>
<td align="center">使用 SSS 表示的毫秒数，如 156</td>
</tr>
</tbody></table>
<p><strong>例 1</strong></p>
<p>编写 Java 程序，使用 SimpleDateFormat 类格式化当前日期并打印，日期格式为“xxxx 年 xx 月 xx 日星期 xxx 点 xx 分 xx 秒”，具体的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(); <span class="comment">// 创建一个Date对象，获取当前时间</span></span><br><span class="line">        <span class="comment">// 指定格式化格式</span></span><br><span class="line">        SimpleDateFormat f = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"今天是 "</span> + <span class="string">"yyyy 年 MM 月 dd 日 E HH 点 mm 分 ss 秒"</span>);</span><br><span class="line">        System.out.println(f.format(now)); <span class="comment">// 将当前时间袼式化为指定的格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序的运行结果如下：</p>
<pre><code>今天是 2018 年 10 月 15 日 星期一 09 点 26 分 23 秒</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 7 节 Java 计算课程结束的日期</title>
    <url>/java-base-course-5-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>假设，每周曰到周六为整的一周，每周从周日开始算起。其中每周的周一、周二、周五需要去学校上课，总共再上9天本学期就结束了。编写 Java 程序，计算上完 9 次课后的日期及星期，以及从当天起到本学期结束总共需要度过的天数。具体的程序代码如下：</p><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test14</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一周所要上课的天数。定义为周一、周二、周五共3天上课</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HAVEClass_OF_WEEK = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 定义需要上的课次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COURSENUM = <span class="number">9</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> weekCount = -<span class="number">1</span>; <span class="comment">// 定义上完全部课程需要多少周，取整数</span></span><br><span class="line">        <span class="keyword">int</span> surplusDay = -<span class="number">1</span>; <span class="comment">// 取整后多余的天数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 获取上了多少次课</span></span><br><span class="line">        <span class="keyword">int</span> surplusClass = -<span class="number">1</span>; <span class="comment">// 取整后所剩的课程数</span></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>; <span class="comment">// 上课所花的时间总数</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 获取今天是周几</span></span><br><span class="line">        <span class="keyword">int</span> weekdays = (calendar.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 定义一周中所要上课的天数，若上课一天则count+1 周一、周二、周五上课 今天是周三，这个星期只有周五上课</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">switch</span> (weekdays) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 上课</span></span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 上课</span></span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// 上课</span></span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 计算今天是周几，如果不是周末，则计算到周六还有几天 （因为周日是一周的开始）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != weekdays)</span><br><span class="line">            surplusDay = <span class="number">6</span> - weekdays;</span><br><span class="line">        <span class="comment">// 获取上课所用多少周，取整</span></span><br><span class="line">        weekCount = (COURSENUM - count) / HAVEClass_OF_WEEK;</span><br><span class="line">        <span class="comment">// 获取取整后剩下的课程数</span></span><br><span class="line">        surplusClass = (COURSENUM - count) - (weekCount * HAVEClass_OF_WEEK);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 计算取整周后剩下的次数（从每周日开始算起） 若不剩课程，则日期-1（因为取整后的最后一天为周六，不上课） 则计算周五的日期</span></span><br><span class="line"><span class="comment">         * 若还剩1节课，肯定是周一上课，所以天数+2天 若还剩2节课，则周一、周二上课，所以天数+3天 若还剩3节课，则周一、周二、周五上课，所以天数+6天</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">switch</span> (surplusClass) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            surplusDay = surplusDay - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            surplusDay += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            surplusDay += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            surplusDay += <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 要上课所用的总天数</span></span><br><span class="line">        total = surplusDay + (weekCount * <span class="number">7</span>);</span><br><span class="line">        <span class="comment">// 设置课程结束当天的日期</span></span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) + total);</span><br><span class="line">        String strWeek = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> week = (calendar.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (week) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            strWeek = <span class="string">"一"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            strWeek = <span class="string">"二"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            strWeek = <span class="string">"三"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            strWeek = <span class="string">"四"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            strWeek = <span class="string">"五"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            strWeek = <span class="string">"六"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            strWeek = <span class="string">"日"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果取整后剩下的课程数为零，直接取周五的日期</span></span><br><span class="line">        System.out.println(<span class="string">"距离本学期结束还有 "</span> + total + <span class="string">" 天，日期为："</span> + calendar.get(Calendar.YEAR) + <span class="string">"-"</span></span><br><span class="line">                + (calendar.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + calendar.get(Calendar.DATE) + <span class="string">"，星期"</span> + strWeek);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码首先使用 Calendar.getlnstance() 创建了一个 Calendar 实例，并通过 Calendar 类的 DAY_OF_WEEK 常量获取了今天的星期，若今天为星期一、星期二、星期五中的任意一天，则上课的次数加 1。获取上课所需要的周数以及剩下的次数和所需要的天数。最后设置课程结束后当前的日期，并获取当天的星期。</p>
<p>运行程序，该程序的输出结果如下：</p>
<pre><code>距离本学期结束还有 19 天，日期为：2019-10-15，星期二</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 8 节 Java 日期查询</title>
    <url>/java-base-course-5-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本实例使用有关日期处理和日期格式化的类实现一个日期查询的功能，即查询指定日期所在周的周一日期、两个指定日期间相差的天数和指定日期为所在周的星期几的日期 3 个功能。</p><a id="more"></a>
<p>从功能上来看，本实例至少需要定义 3 个方法，分别完成：获取指定日期所在周的周一日期、获取两个指定日期的相差天数以及获取指定日期为所在周的星期几的日期这 3 个功能，同时需要定义 Date 类型的日期与 String 类型之间的转换方法。</p>
<p>(1) 新建 Exercise 类，在该类中导入需要的包。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.Parse Exception;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在该类中有5个方法，在下面的步骤中将会讲解，这里省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 在 Exercise 类中定义获取指定日期所在周的周一日期的方法——getMonday()，该方法是一个静态方法，返回值为 String 类型，并且需要传递一个 Date 类型的参数，然后将该日期参数作为 Calendar 对象的日期，并调用 Calendar 类的 set(int field,int value)方法改变 Calendar 对象中的日期，再将使用 SimpleDateFormat 类格式化后的日期返回。</p>
<p>getMonday() 方法的代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取指定日期所在周的周一日期</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMonday</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    Calendar c = Calendar.getInstance();</span><br><span class="line">    c.setTime(date);</span><br><span class="line">    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(c.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(3) 继续在 Exercise 类中定义获取两个日期间相差天数的方法——getTwoDay()，该方法需要传递两个 String 类型的参数。</p>
<p>在该方法的主体中，首先需要创建一个 SimpleDateFormat 类对象，并指定日期的格式，然后需要调用 SimpleDateFormat 对象的 parse() 方法，将传递过来的两个 String 类型的日期转换为 Date 类型，并将这两个 Date 类型的日期进行运算，得出相差的天数，返回一个 int 类型的变量。</p>
<p>getTwoDay() 方法的代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取两个日期间相差的天数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTwoDay</span><span class="params">(String sj1, String sj2)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat myFormatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Date date = myFormatter.parse(sj1);</span><br><span class="line">        Date mydate = myFormatter.parse(sj2);</span><br><span class="line">        <span class="comment">// 计算两个日期间相差的天数</span></span><br><span class="line">        day = (<span class="keyword">int</span>)((date.getTime()-mydate.getTime())/(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(4) 在 Exercise 类中继续创建两个静态方法，分别完成 String 类型的日期与 Date 类型日期的互换功能。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将String类型的日期转换为Date类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">strToDate</span><span class="params">(String strDate)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    Date date = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        date = sdf.parse(strDate);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将Date类型的日期转换为String类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">DateToStr</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    String strDate = sdf.format(date);</span><br><span class="line">    <span class="keyword">return</span> strDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(5) 在 Exercise 类中定义获取指定日期所在周的指定星期的日期方法——getWeek()，该方法需要传递两个 String 类型的参数，其中第一个参数表示指定的日期，第二个参数表示星期几。</p>
<p>在该方法的主体中，首先调用了 strToDate() 方法，将 String 类型的日期转换为 Date 类型的日期，并将该日期作为 Calendar 类对象日期，然后判断传递过来的第二个参数的值，使用 Calendar 类中的 set(int field，int value) 方法改变日期，从而将格式化后的日期返回。</p>
<p>getWeek() 方法的代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得一个日期所在周的星期几的日期，如要找出2011年5月1日所在周的星期一是几号</span></span><br><span class="line"><span class="comment">// @param sdate所确定的日期形式2011-05-01</span></span><br><span class="line"><span class="comment">// @param num要确定的是周几（1表示周一，2表示周二）</span></span><br><span class="line"><span class="comment">// @return</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeek</span><span class="params">(String sdate, String num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 再转换为时间</span></span><br><span class="line">    Date dd = strToDate(sdate);</span><br><span class="line">    Calendar c = Calendar.getInstance();</span><br><span class="line">    c.setTime(dd);</span><br><span class="line">    <span class="keyword">int</span> weekNo = Integer.parseInt(num);</span><br><span class="line">    <span class="keyword">switch</span> (weekNo) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);    <span class="comment">//返回星期一所在的日期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);    <span class="comment">//返回星期二所在的日期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);    <span class="comment">//返回星期三所在的日期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);    <span class="comment">//返回星期四所在的日期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);    <span class="comment">//返回星期五所在的日期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);    <span class="comment">//返回星期六所在的曰期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);    <span class="comment">//返回星期曰所在的日期</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(c.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(6) 创建测试类 Test15，调用 Exercise 类的方法，完成查询当前日期所在周的周一日期，并获取本周的周一曰期与当前曰期相差的天数，同时还可以查询本周中任意星期几的曰期。代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common.mxl;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> com.common.mxl.Exercise;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test15</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String monday = Exercise.getMonday(date);</span><br><span class="line">        System.out.print(<span class="string">"这周一的日期为【"</span>+monday+<span class="string">"】，"</span>);</span><br><span class="line">        String nowStr = Exercise.DateToStr(date);       <span class="comment">// 将 Date 类型的日期转换为 String 类型</span></span><br><span class="line">        <span class="keyword">int</span> num = Exercise.getTwoDay(nowStr,monday);</span><br><span class="line">        System.out.print(<span class="string">"与今天相差【"</span>+num+<span class="string">"】天"</span>);</span><br><span class="line">        SyStem.out.println(<span class="string">"\n请输入您要查询本周星期几的日期（1表示星期一，2表示星期二…)："</span>);</span><br><span class="line">        String weekNo = input.next();       <span class="comment">//获取用户输入的星期</span></span><br><span class="line">        <span class="keyword">int</span> no = Integer.parseInt(weekNo);</span><br><span class="line">        <span class="comment">//将用户输入的星期转换为int类型，以便使用switch语句</span></span><br><span class="line">        String strWeekNo = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">switch</span>(no) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期一"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期二"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期三"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期四"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期五"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期六"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                strWeekNo = <span class="string">"星期日"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"本周【"</span>+strWeekNo+<span class="string">"】的日期为："</span>+Exercise.getWeek(nowStr,weekNo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在本程序中，综合使用了 Date 类、Calendar 类和 SimpleDateFormat 类完成了时间处理功能。在源码中，多次使用 Calendar 类的 set(int field,int value) 方法来改变日期，从而获取用户查询的日期。该方法在日期操作方面比较常用，大家需要熟练掌握该方法。</p>
<p>该程序的运行结果如下所示：</p>
<pre><code>这周一的日期为【2018-10-15】，与今天相差【0】天
请输入您要查询本周星期几的日期（1表示星期一，2表示星期二…)：
1
本周【星期一】的日期为：2018-10-15</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 5 章 Java 数字和日期处理</title>
    <url>/java-base-course-5-Java-number-date-processing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在解决实际问题时，对数字和日期的处理是非常普遍的，如数学问题、随机数问题和日期问题等。为了解决这些问题，Java 提供了处理相关问题的类，包括 Math 类、Random 类、BigInteger 类、Date 类等。本章将会详细介绍这些与数学和日期处理相关的类。</p><a id="more"></a>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java Math 类的常用方法  <a href="/java-base-course-5-1/">Go</a><br>第 2 节 Java 生成随机数  <a href="/java-base-course-5-2/">Go</a><br>第 3 节 Java 数字格式化  <a href="/java-base-course-5-3/">Go</a><br>第 4 节 Java 大数字运算  <a href="/java-base-course-5-4/">Go</a><br>第 5 节 Java 时间日期的处理  <a href="/java-base-course-5-5/">Go</a><br>第 6 节 Java 日期格式化  <a href="/java-base-course-5-6/">Go</a><br>第 7 节 Java 计算课程结束的日期  <a href="/java-base-course-5-7/">Go</a><br>第 8 节 Java 日期查询  <a href="/java-base-course-5-8/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>掌握 Math 类中的各种数学运算方法</li><li>掌握生成任意范围随机数的方法</li><li>掌握对数字进行格式化的方法</li><li>熟悉大数字的各种运算</li><li>掌握日期的处理和格式化方式 </li></ol>
          </div>


]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-16/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-18/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-19/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-21/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-22/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-23/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-24/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-25/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-3-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-3-1/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-3-1/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-3-1/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-3-1/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-3-1/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-3-1/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-3-1/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-3-1/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-3-1/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-3-1/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-3-1/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-3-1/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-3-1/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-3-1/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-3-1/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-3-1/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-3-1/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-3-1/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-3-1/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-3-1/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-3-1/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-3-1/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-3-1/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-3-1/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <p>掌握定义字符串的方法<br>掌握字符串之间以及与其他类型数据转换的方法<br>掌握获取字符串长度的方法<br>掌握字符串的大小写转换<br>掌握如何提取和分割字符串<br>掌握如何替换和比较字符串<br>熟悉 StringBuffer 类操作字符串的方法<br>了解正则表达式如何操作字符串 </p>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 Java 字符串的处理</title>
    <url>/java-base-course-4-Java-string-processing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。</p><a id="more"></a>
<p>字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响到程序的运行效率。本章从如何定义字符串开始介绍字符串本身的特性，以及各种字符串操作的实现方法。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 定义字符串    <a href="/java-base-course-4-1/">Go</a><br>第 2 节 String API    <a href="/java-base-course-4-2/">Go</a><br>第 3 节 使用 Java API文档    <a href="/java-base-course-4-3/">Go</a><br>第 4 节 Java String 字符串和整型 int 的相互转换  <a href="/java-base-course-4-4/">Go</a><br>第 5 节 Java 字符串拼接  <a href="/java-base-course-4-5/">Go</a><br>第 6 节 Java 获取字符串长度  <a href="/java-base-course-4-6/">Go</a><br>第 7 节 Java 字符串大小写转换  <a href="/java-base-course-4-7/">Go</a><br>第 8 节 Java 去除字符串中的空格  <a href="/java-base-course-4-8/">Go</a><br>第 9 节 Java 提取子字符串  <a href="/java-base-course-4-9/">Go</a><br>第 10 节 Java 分割字符串  <a href="/java-base-course-4-10/">Go</a><br>第 11 节 Java 截取新闻标题  <a href="/java-base-course-4-11/">Go</a><br>第 12 节 Java 字符串的替换  <a href="/java-base-course-4-12/">Go</a><br>第 13 节 Java 字符串替换实例  <a href="/java-base-course-4-13/">Go</a><br>第 14 节 Java 字符串比较  <a href="/java-base-course-4-14/">Go</a><br>第 15 节 Java 空字符串和 null 的区别  <a href="/java-base-course-4-15/">Go</a><br>第 16 节 Java 字符串查找  <a href="/java-base-course-4-16/">Go</a><br>第 17 节 Java 校验文件名和邮箱地址  <a href="/java-base-course-4-17/">Go</a><br>第 18 节 Java 字符串的加密解密  <a href="/java-base-course-4-18/">Go</a><br>第 19 节 Java StringBuffer类  <a href="/java-base-course-4-19/">Go</a><br>第 20 节 Java StringBuffer 替换特殊字符  <a href="/java-base-course-4-20/">Go</a><br>第 21 节 String、StringBuffer和StringBuilder类的区别  <a href="/java-base-course-4-21/">Go</a><br>第 22 节 Java 正则表达式详解  <a href="/java-base-course-4-22/">Go</a><br>第 23 节 Java Pattern 类和 Matcher 类的使用  <a href="/java-base-course-4-23/">Go</a><br>第 24 节 Java 正则表达式验证电话号码  <a href="/java-base-course-4-24/">Go</a><br>第 25 节 Java 正则表达式验证IP地址  <a href="/java-base-course-4-25/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>掌握定义字符串的方法</li><li>掌握字符串之间以及与其他类型数据转换的方法</li><li>掌握获取字符串长度的方法</li><li>掌握字符串的大小写转换</li><li>掌握如何提取和分割字符串</li><li>掌握如何替换和比较字符串</li><li>熟悉 StringBuffer 类操作字符串的方法</li><li>了解正则表达式如何操作字符串 </li></ol>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 1 节 Java 语句</title>
    <url>/java-base-course-3-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>按照语句的组成部分，可以将顺序结构中的语句分为表达式语句、空语句和复合语句 3 大类。下面首先介绍 Java 中语句的编写方式，然后对这 3 类语句进行详细介绍。</p><a id="more"></a>
<h2 id="语句编写方式"><a href="#语句编写方式" class="headerlink" title="语句编写方式"></a>语句编写方式</h2><p>在 Java 中，语句是最小的组成单位，每个语句必须使用分号作为结束符。除此之外，Java 对语句无任何其他限制，开发人员可以很随意地用符合自己风格的方式编写语句。</p>
<p>例如，可以将一个语句放在多行中，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"Apple "</span></span><br><span class="line">+<span class="string">"Banner "</span></span><br><span class="line">+<span class="string">"Pear "</span></span><br><span class="line">+<span class="string">"Orange"</span>;</span><br></pre></td></tr></table></figure>
<p>由于 Java 使用分号作为语句的结束符，所以上面的 4 行代码会被 Java 认为是一条语句，因为这 4 行中只有一个分号。但是，我们不推荐使用这种方式来编写语句。</p>
<p>同样，因为使用分号作为分隔符，将多个语句放在一行来编写也是允许的。例如，下面的示例代码也是正确的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>,b,c;b=a+<span class="number">10</span>;b++;c=a*b;System.out.println(c);</span><br></pre></td></tr></table></figure>
<p>上面将 5 个语句放在一行中也是正确的，但我们不推荐使用这种方式来编写语句。</p>
<p>为了使程序语句排列得更加美观、容易阅读和排除错误，一般使用如下规则格式化源代码。</p>
<ul>
<li>在一行内只写一个语句，并采用空格、空行来保证语句容易阅读。</li>
<li>在每个复合语句内使用 Tab 键向右缩进。</li>
<li>大括号总是放在单独的一行，便于检查是否匹配。</li>
</ul>
<h2 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h2><p>所谓空语句（Empty Statement），它在程序中什么都不做，也不包含具有实际性的语句。在程序中，空语句主要用来作为空循环体。</p>
<p>空语句的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">; <span class="comment">// 其实就是一个分号</span></span><br></pre></td></tr></table></figure>
<p>执行一个空语句就是将控制转到该语句的结束点。这样，如果空语句是可到达的，则空语句的结束点也是可到达的。</p>
<h2 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h2><p>在很多的高级语言中，有专门的赋值语句。而在 Java 中将赋值作为一个运算符，因此只有赋值表达式。在赋值表达式后面添加分号就成了独立的语句。</p>
<p>以下是一些表达式的示例语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3.1415926</span>;</span><br><span class="line">(a+b)/<span class="number">2</span>;</span><br><span class="line">x*y*z-y+(<span class="number">20</span>-x);</span><br></pre></td></tr></table></figure>
<p>这些表达式能够被 Java 编译器识别，但是由于没有对程序进行任何操作，因此无任何意义。</p>
<p>一般表达式语句应该能完成一个操作，如修改变量的值或者作为函数参数等。具体方法是，在表达式的左侧指定一个变量来存储表达式的值，或者将表达式传递给函数。</p>
<p>以下是修改后的表达式语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pi=<span class="number">3.1415926</span>;</span><br><span class="line">output(pi); <span class="comment">// 将pi的值传递到output()函数中作为参数</span></span><br><span class="line">sum=(a+b)/<span class="number">2</span>;</span><br><span class="line">printf(<span class="string">"%f"</span>,sum); <span class="comment">// 将sum的值传递到printf()函数输出</span></span><br><span class="line">temp=x*y*z-y+(<span class="number">20</span>-x); <span class="comment">// 将表达式的值保存到temp变量中</span></span><br></pre></td></tr></table></figure>

<h2 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h2><p>复合语句又称为语句块，是很多个语句的组合，从而可以将多个语句看作单个语句。</p>
<p>复合语句的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    statement-list <span class="comment">// 语句列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到由一个扩在大括号内的可选 statement-list 组成。statement-list 是由一个或者多个语句组成的列表，如果不存在 statement-list，则称该语句块是空的。</p>
<p>它的执行规则如下：</p>
<ul>
<li>如果语句块是空的，控制转到语句块的结束点。</li>
<li>如果语句块不是空的，控制转到语句列表。当控制到达语句列表的结束点时，控制转到语句的结束点。</li>
</ul>
<p><strong>例 1</strong></p>
<p>创建一个语句块，该语句块包含 3 条语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    width = <span class="number">10</span>; <span class="comment">// 为width变量赋值</span></span><br><span class="line">    height = <span class="number">90</span>; <span class="comment">// 为height变量赋值</span></span><br><span class="line">    area = width * height; <span class="comment">// 计算width变量和height变量的乘积</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码执行后，area 变量的值为 900。上述的语句块中大括号内包含了 3 条语句。第一条语句为 width 变量赋值，第二条语句为 height 变量赋值，第三条语句则将 width 和 height 相乘，结果保存在 area 变量中。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 10 节 Java return 语句</title>
    <url>/java-base-course-3-10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>return 关键字并不是专门用于结束循环的，return 语句用于终止函数的执行或退出类的方法，并把控制权返回该方法的调用者。如果这个方法带有返回类型，return 语句就必须返回这个类型的值；如果这个方法没有返回值，可以使用没有表达式的 return 语句。</p><a id="more"></a>
<p>return 语句的一般语法格式如下：</p>
<pre><code>return 与方法相同类型的变量;</code></pre><p>如果一个方法使用了 return 语句并且后面跟有该方法返回类型的值，那么调用此方法后，所得到的结果为该方法返回的值。</p>
<p><strong>例 1</strong></p>
<p>当用户输入两个 double 类型的数值后需要计算这两个数值之和，而这两个操作数是可以变动的，但是求和的功能是不变的，这时就需要定义一个方法，只要在需要求和时调用该方法即可，该方法将计算之后的结果返回。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入操作数1："</span>);</span><br><span class="line">        <span class="keyword">double</span> num1 = input.nextDouble(); <span class="comment">// 获取用户输入的操作数1</span></span><br><span class="line">        System.out.println(<span class="string">"请输入操作数2："</span>);</span><br><span class="line">        <span class="keyword">double</span> num2 = input.nextDouble(); <span class="comment">// 获取用户输入的操作数2</span></span><br><span class="line">        <span class="keyword">double</span> d = sum(num1, num2);</span><br><span class="line">        System.out.println(num1 + <span class="string">"+"</span> + num2 + <span class="string">"="</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sum() 方法，返回double 类型的数值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 操作数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j 操作数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个操作数之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = i + j;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用户输入两个 double 类型的数值后，程序调用 sum() 方法。该方法有两个参数，分别表示用户输入的操作数 1 和操作数 2。在调用该方法时，只需要将用户输入的两个数值传递过去即可，然后程序会执行 sum() 方法，对这两个数求和，并使用 return 语句将计算得出的结果返回。</p>
<p>在 main() 方法中，同样需要使用 double 类型的变量来接收 sum() 方法返回的值，即变量 d 为计算后的结果。</p>
<p>运行后的结果如下所示：</p>
<pre><code>请输入操作数1：
500
请输入操作数2：
203
500.0+203.0=703.0

请输入操作数1：
5.66
请输入操作数2：
3.0158
5.66+3.0158=8.6758</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 11 节 Java break 语句</title>
    <url>/java-base-course-3-11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>某些时候需要在某种条件出现时强行终止循环，而不是等到循环条件为 false 时才退出循环。此时，可以使用 break 来完成这个功能。</p><a id="more"></a>
<p>break 用于完全结束一个循环，跳出循环体。不管是哪种循环，一旦在循环体中遇到 break，系统将完全结束该循环，开始执行循环之后的代码。</p>
<p>在 Java 中，break 语句有 3 种作用，分别是：在 switch 语句中终止一个语句序列、使用 break 语句直接强行退出循环和使用 break 语句实现 goto 的功能。</p>
<h2 id="使用-break-语句直接强行退出循环（break-不带标签）"><a href="#使用-break-语句直接强行退出循环（break-不带标签）" class="headerlink" title="使用 break 语句直接强行退出循环（break 不带标签）"></a>使用 break 语句直接强行退出循环（break 不带标签）</h2><p>可以使用 break 语句强行退出循环，忽略循环体中的任何其他语句和循环的条件判断。在循环中遇到 break 语句时，循环被终止，在循环后面的语句重新开始。</p>
<p><strong>例 1</strong></p>
<p>小明参加了一个 1000 米的长跑比赛，在 100 米的跑道上，他循环地跑着，每跑一圈，剩余路程就会减少 100 米，要跑的圈数就是循环的次数。但是，在每跑完一圈时，教练会问他是否要坚持下去，如果回答 y，则继续跑，否则表示放弃。</p>
<p>使用 break 语句直接强行退出循环的示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 定义变量存储小明的回答</span></span><br><span class="line">    String answer = <span class="string">""</span>; <span class="comment">// 一圈100米，1000米为10圈，即为循环的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"跑的是第"</span> + (i + <span class="number">1</span>) + <span class="string">"圈"</span>);</span><br><span class="line">        System.out.println(<span class="string">"还能坚持吗？"</span>); <span class="comment">// 获取小明的回答</span></span><br><span class="line">        answer = input.next(); <span class="comment">// 判断小明的回答是否为y？如果不是，则放弃，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!answer.equals(<span class="string">"y"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"放弃"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环之后的代码</span></span><br><span class="line">        System.out.println(<span class="string">"加油！继续！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序运行后的效果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">跑的是第<span class="number">1</span>圈</span><br><span class="line">还能坚持吗？</span><br><span class="line">y</span><br><span class="line">加油！继续！</span><br><span class="line">跑的是第<span class="number">2</span>圈</span><br><span class="line">还能坚持吗？</span><br><span class="line">y</span><br><span class="line">加油！继续！</span><br><span class="line">跑的是第<span class="number">3</span>圈</span><br><span class="line">还能坚持吗？</span><br><span class="line">n</span><br><span class="line">放弃</span><br></pre></td></tr></table></figure>

<p>尽管 for 循环被设计为从 0 执行到 10，但是当小明的回答不是 y 时，break 语句终止了程序的循环，继续执行循环体外的代码，输出“加油！继续！”。</p>
<p>break 语句能用于任何 Java 循环中，包括人们有意设置的无限循环。在一系列嵌套循环中使用 break 语句时，它将仅仅终止最里面的循环。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 外循环，循环5次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"次循环："</span>);</span><br><span class="line">        <span class="comment">// 内循环，设计为循环10次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 判断j是否等于3，如果是，则终止循环</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"内循环的第"</span> + (j + <span class="number">1</span>) + <span class="string">"次循环\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序运行结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">第<span class="number">1</span>次循环：内循环的第<span class="number">1</span>次循环 内循环的第<span class="number">2</span>次循环 内循环的第<span class="number">3</span>次循环</span><br><span class="line">第<span class="number">2</span>次循环：内循环的第<span class="number">1</span>次循环 内循环的第<span class="number">2</span>次循环 内循环的第<span class="number">3</span>次循环</span><br><span class="line">第<span class="number">3</span>次循环：内循环的第<span class="number">1</span>次循环 内循环的第<span class="number">2</span>次循环 内循环的第<span class="number">3</span>次循环</span><br><span class="line">第<span class="number">4</span>次循环：内循环的第<span class="number">1</span>次循环 内循环的第<span class="number">2</span>次循环 内循环的第<span class="number">3</span>次循环</span><br><span class="line">第<span class="number">5</span>次循环：内循环的第<span class="number">1</span>次循环 内循环的第<span class="number">2</span>次循环 内循环的第<span class="number">3</span>次循环</span><br></pre></td></tr></table></figure>
<p>从程序运行结果来看，在内部循环中的 break 语句仅仅终止了所在的内部循环，外部循环没有受到任何的影响。</p>
<p>注意：一个循环中可以有一个以上的 break 语句，但是过多的 break 语句会破坏代码结构。switch 循环语句中的 break 仅影响 switch 语句，不会影响循环。</p>
<p><strong>例 2</strong></p>
<p>编写一个 Java 程序，允许用户输入 6 门课程成绩，如果录入的成绩为负则跳出循环；如果录入 6 门合法成绩，则计算已有成绩之和。</p>
<p>使用 break 语句的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score; <span class="comment">// 每门课的成绩</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 成绩之和</span></span><br><span class="line">    <span class="keyword">boolean</span> con = <span class="keyword">true</span>; <span class="comment">// 记录录入的成绩是否合法</span></span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入学生的姓名："</span>);</span><br><span class="line">    String name = input.next(); <span class="comment">// 获取用户输入的姓名</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入第"</span> + i + <span class="string">"门课程的成绩："</span>);</span><br><span class="line">        score = input.nextInt();<span class="comment">// 获取用户输入的成绩</span></span><br><span class="line">        <span class="keyword">if</span> (score &lt; <span class="number">0</span>) &#123; <span class="comment">// 判断用户输入的成绩是否为负数，如果为负数，终止循环</span></span><br><span class="line">            con = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum + score; <span class="comment">// 累加求和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (con) &#123;</span><br><span class="line">        System.out.println(name + <span class="string">"的总成绩为："</span> + sum);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"抱歉，分数录入错误，请重新录入！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，当用户录入的分数低于 0 时，则输出“抱歉，分数录入错误，请重新录入！”信息，否则打印学生的总成绩。输出结果如下所示。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入学生的姓名：</span><br><span class="line">zhangpu</span><br><span class="line">请输入第<span class="number">1</span>门课程的成绩：</span><br><span class="line"><span class="number">100</span></span><br><span class="line">请输入第<span class="number">2</span>门课程的成绩：</span><br><span class="line"><span class="number">75</span></span><br><span class="line">请输入第<span class="number">3</span>门课程的成绩：</span><br><span class="line"><span class="number">-8</span></span><br><span class="line">抱歉，分数录入错误，请重新录入！</span><br><span class="line"></span><br><span class="line">请输入学生的姓名：</span><br><span class="line">zhangpu</span><br><span class="line">请输入第<span class="number">1</span>门课程的成绩：</span><br><span class="line"><span class="number">100</span></span><br><span class="line">请输入第<span class="number">2</span>门课程的成绩：</span><br><span class="line"><span class="number">68</span></span><br><span class="line">请输入第<span class="number">3</span>门课程的成绩：</span><br><span class="line"><span class="number">73</span></span><br><span class="line">请输入第<span class="number">4</span>门课程的成绩：</span><br><span class="line"><span class="number">47</span></span><br><span class="line">请输入第<span class="number">5</span>门课程的成绩：</span><br><span class="line"><span class="number">99</span></span><br><span class="line">请输入第<span class="number">6</span>门课程的成绩：</span><br><span class="line"><span class="number">84</span></span><br><span class="line">zhangpu的总成绩为：<span class="number">471</span></span><br></pre></td></tr></table></figure>
<p>在该程序中，当录入第 3 门课的成绩时，录入的成绩为负数，判断条件“score&lt;0”为 true，执行“con=false”，用 con 来标记录入是否有误。接着执行 break 语句，执行完之后程序并没有继续执行条件语句后面的语句，而是直接退出 for 循环。之后执行下面的条件判断语句，判断 boolean 变量的 con 是否为 true，如果为 true，则打印总成绩；否则打印“抱歉，分数录入错误，请重新录入！”。</p>
<h2 id="使用-break-语句实现-goto-的功能（break-带标签）"><a href="#使用-break-语句实现-goto-的功能（break-带标签）" class="headerlink" title="使用 break 语句实现 goto 的功能（break 带标签）"></a>使用 break 语句实现 goto 的功能（break 带标签）</h2><p>有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</p>
<p>幸运的是，Java 与 C++ 不同，Java 提供了一种带标签的 break 语句，用于跳出多重嵌套的循环语句。</p>
<p>break 语句可以实现 goto 的功能，并且 Java 定义了 break 语句的一种扩展形式来处理退出嵌套很深的循环这个问题。</p>
<p>通过使用扩展的 break 语句，可以终止执行一个或者几个任意代码块，这些代码块不必是一个循环或一个 switch 语句的一部分。同时这种扩展的 break 语句带有标签，可以明确指定从何处重新开始执行。</p>
<p>break 除了具有 goto 退出深层循环嵌套作用外，还保留了一些程序结构化的特性。</p>
<p>标签 break 语句的通用格式如下：</p>
<pre><code>break label;</code></pre><p>label 是标识代码块的标签。当执行这种形式的 break 语句时，控制权被传递出指定的代码块。被加标签的代码块必须包围 break 语句，但是它不需要直接包围 break 的块。也就是说，可以使用一个加标签的 break 语句来退出一系列的嵌套块，但是不能使用 break 语句将控制权传递到不包含 break 语句的代码块。</p>
<p>用标签（label）可以指定一个代码块，标签可以是任何合法有效的 Java 标识符，后跟一个冒号。加上标签的代码块可以作为 break 语句的对象，使程序在加标签的块的结尾继续执行。</p>
<p>下面是使用带标签的break 语句的示例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GotoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        label: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                System.out.println(j);</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span> label;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上程序的执行结果为：</p>
<pre><code>0
1</code></pre><p>这里的 label 是标签的名称，可以为 Java 语言中任意合法的标识符。标签语句必须和循环匹配使用，使用时书写在对应的循环语句的上面，标签语句以冒号结束。如果需要中断标签语句对应的循环，可以采用 break 后面跟标签名的方式。</p>
<p>如在上面代码中，当 j 为 1 时，“j%2!=0”条件表达式成立，则 label 标签所代表的最外层循环终止。</p>
<p>注意：通常紧跟 break 之后的标签，必须在 break 所在循环的外层循环之前定义才有意义。</p>
<h2 id="在-switch-语句中终止一个语句序列"><a href="#在-switch-语句中终止一个语句序列" class="headerlink" title="在 switch 语句中终止一个语句序列"></a>在 switch 语句中终止一个语句序列</h2><p>在 switch 语句中终止一个语句序列，就是在每个 case 子句块的最后添加语句“break;”，这个功能在《Java switch case》已经讲过，这里不在讲述。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 12 节 Java continue 语句</title>
    <url>/java-base-course-3-12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时强迫一个循环提早反复是有用的。也就是，你可能想要继续运行循环，但是要忽略这次重复剩余的循环体的语句。实际上，goto 只不过是跳过循环体，到达循环的尾部。continue 语句是 break 语句的补充。</p><a id="more"></a>
<p>在上一节<a href="/java-base-course-3-11/">《Java break语句详解》</a>中我们了解了 break，本节主要讲解 continue 语句。与 break 语句一样， 它将中断正常的控制流程。continue 语句将控制转移到最内层循环的首部。</p>
<p>continue 语句是跳过循环体中剩余的语句而强制执行下一次循环，其作用为结束本次循环，即跳过循环体中下面尚未执行的语句，接着进行下一次是否执行循环的判定。</p>
<p>continue 语句类似于 break 语句，但它只能出现在循环体中。它与 break 语句的区别在于：continue 并不是中断循环语句，而是中止当前迭代的循环，进入下一次的迭代。简单来讲，continue 是忽略循环语句的当次循环。</p>
<p>注意：continue 语句只能用在 while 语句、for 语句或者 foreach 语句的循环体之中，在这之外的任何地方使用它都会引起语法错误。</p>
<p>在循环体中使用 continue 语句有两种方式可以带有标签，也可以不带标签。语法格式如下：</p>
<pre><code>continue //不带标签
continue label //带标签，label是标签名</code></pre><p>下面看一个示例，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Count is: "</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述程序代码中，当条件 i==3 的时候执行 continue 语句，continue 语句会终止本次循环，循环体中 continue 之后的语句将不再执行，接着进行下次循环，所以输出结果中没有 3。程序运行结果如下：</p>
<pre><code>Count is: 0
Count is: 1
Count is: 2
Count is: 4
Count is: 5
Count is: 6
Count is: 7
Count is: 8
Count is: 9</code></pre><p>带标签的 continue 语句示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    label1: <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">5</span>; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">5</span>; y &gt; <span class="number">0</span>; y--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == x) &#123;</span><br><span class="line">                <span class="keyword">continue</span> label1;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(x+<span class="string">","</span>+y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Game Over!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下，continue 只会跳出最近的内循环（代码第 3 行的 for 循环），如果要跳出代码第 2 行的外循环，可以为外循环添加一个标签 label1，然后在第 5 行的 continue 语句后面指定这个标签 label1，这样当条件满足执行 continue 语句时，程序就会跳转出外循环。</p>
<p>程序运行结果如下：</p>
<pre><code>0,5
0,4
0,3
0,2
0,1
1,5
1,4
1,3
1,2
2,5
2,4
2,3
3,5
3,4
4,5
Game Over!</code></pre><p>由于跳过了 x == y，因此下面的内容没有输出。</p>
<pre><code>1,1
2,2
3,3
4,4</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 13 节 Java 判断闰年平年并输出某月的天数</title>
    <url>/java-base-course-3-13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>所谓闰年，就是指 2 月有 29 天的那一年。闰年同时满足以下条件：</p><ol>
<li>年份能被 4 整除。</li>
<li>年份若是 100 的整数倍，须被 400 整除，否则是平年。</li>
</ol><a id="more"></a>

<p>例如，1900 年能被 4 整除，但是因为其是 100 的整数倍，却不能被 400 整除，所以是平年；而 2000 年就是闰年；1904 年和 2004 年、2008 年等直接能被 4 整除且不能被 100 整除，都是闰年；2014 是平年。</p>
<p>下面综合本章学习的知识来编写一个判断闰年的案例，其主要功能如下：</p>
<ol>
<li>判断用户输入的年份是不是闰年。</li>
<li>根据年份和月份输出某年某月的天数。</li>
</ol>
<p>实现步骤分为以下几步：</p>
<p>(1) 新建一个类并在该类中导入需要的 java.util.Scanner 类，同时需要创建该类的入口方法 main()，其实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test27</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在这里编写其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 在 main() 方法中编写 Java 代码，获取用户输入的年份和月份，其实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入年份(注: 必须大于 1990 年):"</span>);</span><br><span class="line"><span class="keyword">int</span> year=sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入月份:"</span>);</span><br><span class="line"><span class="keyword">int</span> month=sc.nextInt();</span><br></pre></td></tr></table></figure>
<p>(3) 根据用户输入的年份，判断该年份是闰年还是平年，其实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isRen;</span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||(year%<span class="number">400</span>==<span class="number">0</span>)) &#123;</span><br><span class="line">    System.out.println(year+<span class="string">"闰年"</span>);</span><br><span class="line">    isRen=<span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(year+<span class="string">"平年"</span>);</span><br><span class="line">    isRen=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(4) 根据用户输入的月份，判断该月的天数，其实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> day=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        day=<span class="number">31</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        day=<span class="number">30</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span>(isRen) &#123;</span><br><span class="line">            day=<span class="number">29</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            day=<span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(year+<span class="string">"年"</span>+month+<span class="string">"月共有"</span>+day+<span class="string">"天"</span>);</span><br></pre></td></tr></table></figure>
<p>(5) 该程序代码执行结果如下所示：</p>
<pre><code>请输入年份(注: 必须大于 1990 年):
2014
请输入月份:
2
2014平年
2014年2月共有28天

请输入年份(注: 必须大于 1990 年):
2000
请输入月份:
2
2000闰年
2000年2月共有29天</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 14 节 Java 输出杨辉三角形</title>
    <url>/java-base-course-3-14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本节利用过 Java 语言中的流程控制语句，如条件语句、循环语句和跳转语句等知识输出一个指定行数的杨辉三角形。</p><a id="more"></a>
<p>杨辉三角形由数字进行排列，可以把它看作是一个数字表，其基本特性是两侧数值均为 1，其他位置的数值是其左上方数值与右上角数值之和。打印杨辉三角形时需要使用到 for 循环语句。</p>
<p>打印杨辉三角形的实现思路是：每一行前面都是空格，而每行空格的个数需要根据总行数来确定，这个可以通过找规律归纳出来。关键是数值的实现，每一行的数值（除了第一列和最后一列）都是上一行两个数值之和，因此可以通过上一行来获取。</p>
<p>实现步骤如下：</p>
<p>(1) 创建名称为 Test28 的类，在该类中声明 num() 方法，在 num() 方法中传入两个参数，即 x 和 y。其中，x 表示行，y 表示列。num() 方法用于计算第 x 行第 y 列的数值。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">1</span> || y == x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = num(x - <span class="number">1</span>, y - <span class="number">1</span>) + num(x - <span class="number">1</span>, y);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 创建名称为 calculate 的方法，在该方法中传入一个 int 类型的参数，该参数表示打印杨辉三角形的行数。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= row - i; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// 打印空格后面的字符, 从第1 列开始往后打印</span></span><br><span class="line">            System.out.print(num(i, j) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(3) 在 main() 方法中添加代码，首先接收用户在控制台输入的打印行数，然后将行数作为参数传入到调用的 calculate() 方法中。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.print(<span class="string">"打印杨辉三角形的行数："</span>);</span><br><span class="line">    <span class="keyword">int</span> row=scan.nextInt();</span><br><span class="line">    calculate(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(4) 运行代码进行测试，其运行结果如下所示：</p>
<pre><code>打印杨辉三角形的行数：7
      1
     1 1
    1 2 1
   1 3 3 1
  1 4 6 4 1
 1 5 10 10 5 1
1 6 15 20 15 6 1 </code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 15 节 Java 选择结构和循环结构的总结</title>
    <url>/java-base-course-3-15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>任何编程语言中最常见的程序结构就是顺序结构。顺序结构就是程序从上到下逐行的执行，中间没有任何判断和跳转。</p><a id="more"></a>
<p>如果 main 方法的多行代码之间没有任何流程控制，则程序总是从上向下依次执行，排在前面的代码先执行，排在后面的代码后执行。这意味着：如果没有流程控制，Java 方法里的语句是一个顺序执行流，从上向下依次执行每条语句。</p>
<p>不论哪一种编程语言，都会提供两种基本的流程控制结构：分支结构和循环结构。分支结构用于实现根据条件来选择性地执行某段代码，循环结构则用于实现根据循环条件重复执行某段代码。</p>
<p>Java 同样提供了这两种流程控制结构的语法，Java 提供了 if 和 switch 两种分支语句，并提供了 while、do while 和 for 三种循环语句。一般写循环语句时，分以下三步走：</p>
<ol>
<li>定义初始值</li>
<li>设置判断条件</li>
<li>初始值变化</li>
</ol>
<p>除此之外，JDK5 还提供了一种新的循环：foreach 循环，能以更简单的方式来遍历集合、数组的元素。</p>
<p>Java 还提供了 break、continue 和 return 来控制程序的循环结构，作用如下：</p>
<ul>
<li>break：表示跳出当前层循环</li>
<li>continue：表示跳出本次循环，进入下一次循环</li>
<li>return：跳出当前方法的循环</li>
</ul>
<p>当在实现某个功能语句时，如果需要通过某一个条件去判断，则用选择结构。当实现某个功能需要通过循环去实现，则用循环结构。当然循环和选择是可以相互嵌套的。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 2 节 Java if else 分支结构</title>
    <url>/java-base-course-3-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 支持两种选择语句：if 语句和 switch 语句。其中 if 语句使用布尔表达式或布尔值作为分支条件来进行分支控制，而 switch 语句则用于对多个整型值进行匹配，从而实现分支控制。这些语句允许你只有在程序运行时才能知道其状态的情况下，控制程序的执行过程。如果你没有 C/C++ 的编程背景，你将会为这两个语句的强大功能和灵活性而感到吃惊。</p><a id="more"></a>
<p>选择结构（也叫分支结构）解决了顺序结构不能判断的缺点，可以根据一个条件判断执行哪些语句块。选择结构适合于带有逻辑或关系比较等条件判断的计算。例如，判断是否到下班时间，判断两个数的大小等。</p>
<p>由于篇幅有限，本节主要介绍 if 语句的各种形式和用法。关于 switch 语句的用法将会在《Java switch case》一节中讲解。</p>
<h2 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a>if 结构</h2><p>if 语句是使用最多的条件分支结构，它属于选择语句，也可以称为条件语句。</p>
<p>if 选择结构是根据条件判断之后再做处理的一种语法结构。默认情况下，if 语句控制着下方紧跟的一条语句的执行。不过，通过语句块，if 语句可以控制多个语句。</p>
<p>if 语句的最简语法格式如下，表示“如果满足某种条件，就进行某种处理”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中“条件表达式”和“语句块”是比较重要的两个地方。<br>1.<code>条件表达式</code>：条件表达式可以是任意一种逻辑表达式，最后返回的结果必须是一个布尔值。取值可以是一个单纯的布尔变量或常量，也可以是使用关系或布尔运算符的表达式。如果条件为真，那么执行语句块；如果条件为假，则语句块将被绕过而不被执行。<br>2.<code>语句块</code>：该语句块可以是一条语句也可以是多条语句。如果仅有一条语句，可省略条件语句中的大括号 {}。但从编程规范角度考虑不要省略大括号，省略大括号会使程序的可读性变差。</p>
<p>if 条件语句的运行流程如图 1 所示。</p>
<p><img src="/java-base-course-3-2/java-base-course-3-2-1.jpg" alt="图1  if 语句执行流程图"></p>
<p><strong>例 1</strong></p>
<p>编写一个 Java 程序，允许用户从键盘输入一个数字，再判断该数是否大于 100。使用 if 语句的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num = input.nextInt(); <span class="comment">// 接收键盘输入的数据</span></span><br><span class="line">    <span class="comment">// 判断用户输入的数据是否大于100</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"输入的数字大于100"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断用户输入的数据是否等于100</span></span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">100</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"输入的数字等于100"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断用户输入的数据是否小于100</span></span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"输入的数字小于100"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该程序，分别使用键盘输入 99、100 和 105，结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">99</span></span><br><span class="line">输入的数字小于<span class="number">100</span></span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">100</span></span><br><span class="line">输入的数字等于<span class="number">100</span></span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">105</span></span><br><span class="line">输入的数字大于<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p><strong>例 2</strong></p>
<p>假设有 num1 和 num2 两个变量，它们的值分别是 50 和 34。下面编写程序，要求使用 if 语句判断 num1 和 num2 的大小关系，并输出比较结果。</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">34</span>;</span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">        System.out.println(<span class="string">"num1大于num2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">        System.out.println(<span class="string">"num2等于num2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">        System.out.println(<span class="string">"num1小于num2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该段选择语句判断了 num1 值和 num2 值的大于、等于和小于关系。此处 num1 为 50，num2 为 34，所以执行后会输出“num1 大于 num2”。</p>
<p><strong>例 3</strong></p>
<p>在上述两个案例代码中，由于每个 if 语句的语句块中只包含一条语句，所以省略了大括号。本实例在登录系统中要求用户名、密码和验证码都必须正确，否则将显示登录失败及错误提示。其中的语句块有多条语句，所以需要使用大括号。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String username = <span class="string">"admin"</span>; <span class="comment">// 用户名</span></span><br><span class="line">    String userpass = <span class="string">"123456"</span>; <span class="comment">// 密码</span></span><br><span class="line">    String code = <span class="string">"0000"</span>; <span class="comment">// 验证码</span></span><br><span class="line">    <span class="keyword">if</span> (username != <span class="string">"admin"</span> &amp;&amp; userpass != <span class="string">"123456"</span> &amp;&amp; code != <span class="string">"0000"</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"登录失败！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"请检查输入的用户名、密码和验证码是否正确！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里为 if 语句设置了一个复杂的复合表达式来验证登录条件。执行后的输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登录失败！</span><br><span class="line">请检查输入的用户名、密码和验证码是否正确！</span><br></pre></td></tr></table></figure>

<h2 id="if-else-结构"><a href="#if-else-结构" class="headerlink" title="if-else 结构"></a>if-else 结构</h2><p>单 if 语句仅能在满足条件时使用，而无法执行任何其他操作（停止）。而结合 else 语句的 if 可以定义两个操作，此时的 if…else 语句表示<span class="label success">“如果条件正确则执行一个操作，否则执行另一个操作”</span>。</p>
<p>使用 if…else 语句的语法格式如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">    语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述语法格式中，如果 if 关键字后面的表达式成立，那么就执行语句块 1，否则的话则执行语句块 2，其运行流程如图 2 所示。</p>
<p><img src="/java-base-course-3-2/java-base-course-3-2-2.jpg" alt="图2  if…else 运行流程图"></p>
<p><strong>例 4</strong></p>
<p>在例 3 中为实现比较 num1 和 num2 的大小，使用了 3 个 if 条件语句分别判断大于、等于和小于的情况。下面使用 if…else 双条件来实现，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">34</span>;</span><br><span class="line">    <span class="comment">// 如果num1等于num2</span></span><br><span class="line">    <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">        System.out.println(<span class="string">"num1等于num2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果num1大于num2</span></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">        System.out.println(<span class="string">"num1大于num2"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则就是num1小于num2</span></span><br><span class="line">        System.out.println(<span class="string">"num1小于num2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>双条件语句减少了代码的编写量，同时增强了程序的可读性。简化后的结果还是一样，执行后会输出“num1 大于 num2”。</p>
<h2 id="if…else-if-多分支语句"><a href="#if…else-if-多分支语句" class="headerlink" title="if…else if 多分支语句"></a>if…else if 多分支语句</h2><p>if 语句的主要功能是给程序提供一个分支。然而，有时候程序中仅仅多一个分支是远远不够的，甚至有时候程序的分支会很复杂，这就需要使用多分支的 if…else if 语句。</p>
<p>通常表现为<span class="label success">“如果满足某种条件，就进行某种处理，否则如果满足另一种条件就执行另一种处理……，这些条件都不满足则执行最后一种处理”</span>。</p>
<p>if…else if 多分支语句的语法格式如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句块<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(表达式n) &#123;</span><br><span class="line">    语句块n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，else-if 结构实际上是 if-else 结构的多层嵌套。明显的特点就是在多个分支中只执行一个语句块，而其他分支都不执行，所以这种结构可以用于有多种判断结果的分支中。</p>
<p>在使用 if…else if 语句时，依次判断表达式的值，当某个分支的条件表达式的值为 true 时，则执行该分支对应的语句块，然后跳到整个 if 语句之外继续执行程序。如果所有的表达式均为 false，则执行语句块 n+1，然后继续执行后续程序，其运行流程如图 3 所示。</p>
<p><img src="/java-base-course-3-2/java-base-course-3-2-3.jpg" alt="图3  if…else if 语句的执行流程图"></p>
<p><strong>例 5</strong></p>
<p>同样以比较 num1 和 num2 的大小为例，使用 if…else if 多条件的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">34</span>;</span><br><span class="line">    <span class="keyword">if</span> (num1 == num2) &#123; <span class="comment">// 如果num1等于num2</span></span><br><span class="line">        System.out.println(<span class="string">"num1等于num2"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &gt; num2) &#123; <span class="comment">// 如果num1大于num2</span></span><br><span class="line">        System.out.println(<span class="string">"num1大于num2"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则就是小于</span></span><br><span class="line">        System.out.println(<span class="string">"num1小于num2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上述代码所示，num1 和 num2 不满足 if 语句的“num1==num2”条件，接着测试 else if 的“num1&gt;num2”条件，满足该条件并输出“num1 大于 num2”。</p>
<p><strong>例 6</strong></p>
<p>假设某学校对成绩的判断标准是：不低于 90，可以评为优秀；低于 90 但不低于 80，可以评为良好；低于 80 但不低于 60，可以评为中等；否则评为差。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请输入考试成绩："</span>);</span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> score = input.nextInt(); <span class="comment">// 接收键盘输入的数据</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123; <span class="comment">// 考试成绩&gt;=90</span></span><br><span class="line">        System.out.println(<span class="string">"成绩优秀"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123; <span class="comment">// 90&gt;考试成绩&gt;=80</span></span><br><span class="line">        System.out.println(<span class="string">"成绩良好"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123; <span class="comment">// 80&gt;考试成绩&gt;=60</span></span><br><span class="line">        System.out.println(<span class="string">"成绩中等"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 考试成绩&lt;60</span></span><br><span class="line">        System.out.println(<span class="string">"成绩差"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当考试成绩在 [90 ~ 100] 分时，则执行第一个 if 语句，下面的 3 个条件判断语句不会执行；当考试成绩在 [80 ~ 90) 分时，则执行第一个 else if 语句；当考试成绩在 [60 ~ 80)分时，则执行第二个 else if 语句；如果上述 3 个条件都不满足，则执行 else 语句。</p>
<p>程序运行后的输出效果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入考试成绩：</span><br><span class="line"><span class="number">100</span></span><br><span class="line">成绩优秀</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入考试成绩：</span><br><span class="line"><span class="number">88</span></span><br><span class="line">成绩良好</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入考试成绩：</span><br><span class="line"><span class="number">50</span></span><br><span class="line">成绩差</span><br></pre></td></tr></table></figure>

<h2 id="嵌套-if-的使用"><a href="#嵌套-if-的使用" class="headerlink" title="嵌套 if 的使用"></a>嵌套 if 的使用</h2><p>if 语句的用法非常灵活，不仅可以单独使用，还可以在 if 语句里嵌套另一个 if 语句。同样，if…else 语句和 if…else if 语句中也可以嵌套另一个 if 结构的语句，以完成更深层次的判断。</p>
<p>嵌套 if 的语法格式如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">2</span>) &#123;</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">3</span>) &#123;</span><br><span class="line">        语句块<span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">4</span>) &#123;</span><br><span class="line">        语句块<span class="number">4</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(表达式n) &#123;</span><br><span class="line">            语句块n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            语句块n+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述格式中，应该注意每一条 else 与离它最近且没有与其他 else 对应的 if 相搭配，其执行流程如图 4 所示。</p>
<p><img src="/java-base-course-3-2/java-base-course-3-2-4.jpg" alt="图4  嵌套 if 语句执行流程图"></p>
<p><strong>例 7</strong></p>
<p>假设某航空公司为吸引更多的顾客推出了优惠活动。原来的飞机票价为 60000 元，活动时，4~11 月旺季，头等舱 9 折，经济舱 8 折；1~3 月、12 月淡季，头等舱 5 折，经济舱 4 折，求机票的价格。</p>
<p>编写 Java 程序实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入出行的月份："</span>);</span><br><span class="line">        <span class="keyword">int</span> month = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"选择头等舱还是经济舱？数字1为头等舱，数字2为经济舱"</span>);</span><br><span class="line">        <span class="keyword">int</span> kind = sc.nextInt();</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">60000</span>; <span class="comment">// 原始价格</span></span><br><span class="line">        <span class="comment">// 旺季的票价计算</span></span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">11</span> &amp;&amp; month &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (kind == <span class="number">1</span>) &#123; <span class="comment">// 旺季头等舱</span></span><br><span class="line">                result = result * <span class="number">0.9</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (kind == <span class="number">2</span>) &#123; <span class="comment">// 旺季经济舱</span></span><br><span class="line">                result = result * <span class="number">0.8</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"选择种类有误，请重新输入！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 淡季的票价计算</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">3</span>) || month == <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (kind == <span class="number">1</span>) &#123; <span class="comment">// 淡季头等舱</span></span><br><span class="line">                result = result * <span class="number">0.5</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (kind == <span class="number">2</span>) &#123; <span class="comment">// 淡季经济舱</span></span><br><span class="line">                result = result * <span class="number">0.4</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"选择种类有误，请重新输入！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"日期选择有误，请重新输入！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"您选择的机票价格为："</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码将用户输入的月份保存到 month 变量，将机票种类保存到 kind 变量。接下来判断变量 month 和 kind 的范围。如果变量 month 在 4~11，kind 为 1 则执行 result=result<em>0.9，为 2 则执行 result=result</em>0.8；变量 month 在 1~3、12，kind 为 1 则执行 result=result<em>0.5，为 2 则执行 result=result</em>0.4。当用户输入有误时，根据错误情况给予不同的提示。</p>
<p>旺季经济舱出行的输出结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入出行的月份：</span><br><span class="line"><span class="number">6</span></span><br><span class="line">选择头等舱还是经济舱？数字<span class="number">1</span>为头等舱，数字<span class="number">2</span>为经济舱</span><br><span class="line"><span class="number">2</span></span><br><span class="line">您选择的机票价格为：<span class="number">48000.0</span></span><br></pre></td></tr></table></figure>

<p>淡季头等舱的输出结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入出行的月份：</span><br><span class="line"><span class="number">2</span></span><br><span class="line">选择头等舱还是经济舱？数字<span class="number">1</span>为头等舱，数字<span class="number">2</span>为经济舱</span><br><span class="line"><span class="number">1</span></span><br><span class="line">您选择的机票价格为：<span class="number">30000.0</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 3 节 Java switch case 语句</title>
    <url>/java-base-course-3-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>if…else 语句可以用来描述一个“二岔路口”，我们只能选择其中一条路来继续走，然而生活中经常会碰到“多岔路口”的情况。switch 语句提供了 if 语句的一个变通形式，可以从多个语句块中选择其中的一个执行。</p><a id="more"></a>
<h2 id="switch-语句格式"><a href="#switch-语句格式" class="headerlink" title="switch 语句格式"></a>switch 语句格式</h2><p>switch 语句是 Java 的多路分支语句。它提供了一种基于一个表达式的值来使程序执行不同部分的简单方法。因此，它提供了一个比一系列 if…else if 语句更好的选择。</p>
<p>switch 语句的基本语法形式如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">case</span> 值n:</span><br><span class="line">        语句块n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，switch、case、default、break 都是 Java 的关键字。</p>
<h2 id="（1）switch"><a href="#（1）switch" class="headerlink" title="（1）switch"></a>（1）switch</h2><p>表示“开关”，这个开关就是 switch 关键字后面小括号里的值，小括号里要放一个整型变量或字符型变量。表达式必须为 byte，short，int，char类型。</p>
<p>Java7 增强了 switch 语句的功能，允许 switch 语句的控制表达式是 java.lang.String 类型的变量或表达式。只能是 java.lang.String 类型，不能是 StringBuffer 或 StringBuilder 这两种字符串的类型。</p>
<h2 id="（2）case"><a href="#（2）case" class="headerlink" title="（2）case"></a>（2）case</h2><p>表示“情况，情形”，case 标签可以是：</p>
<ul>
<li>类型为 char、byte、 short 或 int 的常量表达式。</li>
<li>枚举常量。</li>
<li>从 Java SE 7 开始， case 标签还可以是字符串字面量。</li>
</ul>
<p>例如：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> input = ...;</span><br><span class="line"><span class="keyword">switch</span> (input.toLowerCase()) &#123;  <span class="comment">// toLowerCase用于将大写字符转换为小写</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"yes"</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当在 switch 语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由 switch 的表达式值确定。例如：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Size</span> sz = ...;</span><br><span class="line"><span class="keyword">switch</span> (sz) &#123;</span><br><span class="line">    <span class="keyword">case</span> SMALL: <span class="comment">// no need to use Size.SMALL</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：重复的 case 值是不允许的。</p>
<h2 id="（3）default"><a href="#（3）default" class="headerlink" title="（3）default"></a>（3）default</h2><p>表示“默认”，即其他情况都不满足。default 后要紧跟冒号（英文半角），default 块和 case 块的先后顺序可以变动，不会影响程序执行结果。通常，default 块放在末尾，也可以省略不写。</p>
<h2 id="（4）break"><a href="#（4）break" class="headerlink" title="（4）break"></a>（4）break</h2><p>表示“停止”，即跳出当前结构。</p>
<p>如果在 case 分支语句的末尾没有 break 语句，有可能触发多个 case 分支。那么就会接着执行下一个 case 分支语句。这种情况相当危险，常常会引发错误。为此，我们在程序中从不使用 switch 语句。</p>
<p>如果你喜欢 switch 语句，编译代码时可以考虑加上 -Xlint:fallthrough 选项，如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">javac</span> <span class="selector-tag">-Xlint</span><span class="selector-pseudo">:fallthrough</span> <span class="selector-tag">Test</span><span class="selector-class">.java</span></span><br></pre></td></tr></table></figure>

<p>这样一来，如果某个分支最后缺少一个 break 语句，编译器就会给出一个警告消息。</p>
<p>switch 语句的执行过程如下：表达式的值与每个 case 语句中的常量作比较。如果发现了一个与之相匹配的，则执行该 case 语句后的代码。如果没有一个 case 常量与表达式的值相匹配，则执行 default 语句。当然，default 语句是可选的。如果没有相匹配的 case 语句，也没有 default 语句，则什么也不执行。</p>
<p><img src="/java-base-course-3-3/java-base-course-3-3-1.jpg" alt="图 1  switch语句执行流程图"></p>
<p><strong>例 1</strong></p>
<p>在节目的抽奖环节里，节目组会根据每位嘉宾的座位号来进行抽奖游戏，根据不同的号码来决定奖项的大小。使用 switch 语句编写 Java 程序来完成奖项分配，其实现代码如下。 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"请输入座位号码："</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"恭喜你，获得了三等奖！"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">88</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"恭喜你，获得了二等奖！"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">888</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"恭喜你，获得了一等奖！"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"谢谢参与！"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当用户输入的号码为 888 时，获取的 num 值为 888，则与第三个 case 后的值匹配，执行它后面的语句，输出“恭喜你，获得了一等奖！”，然后执行 break 语句，跳出整个 switch 结构。如果输入的号码与 case 中的值都不匹配，则执行 default 后的语句。</p>
<p>程序执行结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入座位号码：</span><br><span class="line"><span class="number">888</span></span><br><span class="line">恭喜你，获得了一等奖！</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入座位号码：</span><br><span class="line"><span class="number">88</span></span><br><span class="line">恭喜你，获得了二等奖！</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入座位号码：</span><br><span class="line"><span class="number">66</span></span><br><span class="line">谢谢参与！</span><br></pre></td></tr></table></figure>

<p><strong>例 2</strong></p>
<p>编写一个 Java 程序，根据当前的星期数字输出对应的汉字。在这里使用包含 break 的 switch 语句来判断当前的星期，实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String weekDate = <span class="string">""</span>;</span><br><span class="line">    Calendar calendar = Calendar.getInstance();  <span class="comment">// 获取当前时间</span></span><br><span class="line">    <span class="keyword">int</span> week = calendar.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;  <span class="comment">// 获取星期的第几日</span></span><br><span class="line">    <span class="keyword">switch</span> (week) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            weekDate = <span class="string">"星期日"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            weekDate = <span class="string">"星期一"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            weekDate = <span class="string">"星期二"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            weekDate = <span class="string">"星期三"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            weekDate = <span class="string">"星期四"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            weekDate = <span class="string">"星期五"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            weekDate = <span class="string">"星期六"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"今天是 "</span> + weekDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本程序首先获取当前的星期值，然后使用 switch 语句判断 week 的值：0 表示星期日，1 表示星期一，2 表示星期二……以此类推，6 表示星期六。只要 week 值与 case 值相符合，则程序将执行该 case 中的语句，并跳出 switch 语句，输出结果。</p>
<p>运行程序，输出的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">今天是星期五</span><br></pre></td></tr></table></figure>

<h2 id="嵌套-switch-语句"><a href="#嵌套-switch-语句" class="headerlink" title="嵌套 switch 语句"></a>嵌套 switch 语句</h2><p>可以将一个 switch 语句作为一个外部 switch 语句的语句序列的一部分，这称为嵌套 switch 语句。因为一个 switch 语句定义了自己的块，外部 switch 语句和内部 switch 语句的 case 常量不会产生冲突。例如，下面的程序段是完全正确的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (count) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">switch</span> (target) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"target is zero"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"target is one"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本例中，内部 switch 语句中的case 1：语句与外部 switch 语句中的case 1：语句不冲突。变量 count 仅与外层的 case 语句相比较。如果变量 count 为 1，则变量 target 与内层的 case 语句相比较。</p>
<p>学到这里我们可以发现以下几点：</p>
<ul>
<li>switch 语句不同于 if 语句的是 switch 语句仅能测试相等的情况，而 if 语句可计算任何类型的布尔表达式。也就是 switch 语句只能寻找 case 常量间某个值与表达式的值相匹配。</li>
<li>在同一个 switch 语句中没有两个相同的 case 常量。当然，外部 switch 语句中的 case 常量可以和内部 switch 语句中的 case 常量相同。</li>
<li>switch 语句通常比一系列嵌套 if 语句更有效。</li>
</ul>
<p>最后一点尤其有趣，因为它使我们知道 Java 编译器如何工作。当编译一个 switch 语句时，Java 编译器将检查每个 case 常量并且创造一个“跳转表”，这个表将用来在表达式值的基础上选择执行路径。因此，如果你需要在一组值中做出选择，switch 语句将比与之等效的 if-else 语句快得多。</p>
<p>编译器可以这样做是因为它知道 case 常量都是同类型的，所要做的只是将它与 switch 表达式相比较看是否相等。对于一系列的 if 表达式，编译器就无此功能。</p>
<h2 id="if-语句和-switch-语句的区别"><a href="#if-语句和-switch-语句的区别" class="headerlink" title="if 语句和 switch 语句的区别"></a>if 语句和 switch 语句的区别</h2><p>if 和 switch 语句都表示条件语句，可以从使用效率和实用性两方面加以区分。<br>1.从使用效率上区分<br>从使用效率上区分，在对同一个变量的不同值作条件判断时，既可以使用 switch 语句，也可以使用 if 语句。使用 switch 语句的效率更高一些，尤其是判断的分支越多，越明显。<br>2.从实用性上区分<br>从语句的实用性角度区分，switch 语句不如 if 条件语句，if 语句是应用最广泛和最实用的语句。<br>3.何时使用 if 语句和 switch 语句<br>在程序开发的过程中，何时使用 if 语句和 switch 语句，需要根据实际情况而定，应尽量做到物尽其用。不能因为 switch 语句的效率高就一直使用，也不能因为 if 语句常用就不用 switch 语句。需要根据实际情况，具体问题具体分析，使用最适合的条件语句。</p>
<span class="label success">一般情况下，对于判断条件较少的，可以使用 if 条件语句，但是在实现一些多条件的判断中，最好使用 switch 语句。</span> 



]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 节 Java 使用 switch 实现淡旺季飞机票打折</title>
    <url>/java-base-course-3-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>教程<a href="/java-base-course-3-2/">《Java if else 分支结构》</a>中的例 7 是用嵌套 if 实现的淡旺季飞机票打折的示例，本节我们用 switch 实现。</p><a id="more"></a>
<p>代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入出行的月份："</span>);</span><br><span class="line">    <span class="keyword">int</span> month = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"选择头等舱还是经济舱？数字1为头等舱，数字2为经济舱"</span>);</span><br><span class="line">    <span class="keyword">int</span> kind = sc.nextInt();</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">60000</span>; <span class="comment">// 原始价格</span></span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="comment">// 旺季的票价计算</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">switch</span> (kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 旺季头等舱</span></span><br><span class="line">            result = result * <span class="number">0.9</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            result = result * <span class="number">0.8</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"选择种类有误，请重新输入！"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">switch</span> (kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 旺季头等舱</span></span><br><span class="line">            result = result * <span class="number">0.5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            result = result * <span class="number">0.4</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"选择种类有误，请重新输入！"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"日期选择有误，请重新输入！"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"您选择的机票价格为："</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入出行的月份：</span><br><span class="line"><span class="number">6</span></span><br><span class="line">选择头等舱还是经济舱？数字<span class="number">1</span>为头等舱，数字<span class="number">2</span>为经济舱</span><br><span class="line"><span class="number">2</span></span><br><span class="line">您选择的机票价格为：<span class="number">48000.0</span></span><br></pre></td></tr></table></figure>

<p>淡季头等舱的输出结果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入出行的月份：</span><br><span class="line"><span class="number">2</span></span><br><span class="line">选择头等舱还是经济舱？数字<span class="number">1</span>为头等舱，数字<span class="number">2</span>为经济舱</span><br><span class="line"><span class="number">1</span></span><br><span class="line">您选择的机票价格为：<span class="number">30000.0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 5 节 Java 根据出生日期计算星座</title>
    <url>/java-base-course-3-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下面我们来了解一下十二星座对应的日期划分范围。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">白羊：<span class="number">0321</span>~<span class="number">0420</span>          天秤：<span class="number">0924</span>~<span class="number">1023</span></span><br><span class="line">金牛：<span class="number">0421</span>~<span class="number">0521</span>          天蝎：<span class="number">1024</span>~<span class="number">1122</span></span><br><span class="line">双子：<span class="number">0522</span>~<span class="number">0621</span>          射手：<span class="number">1123</span>~<span class="number">1221</span></span><br><span class="line">巨蟹：<span class="number">0622</span>~<span class="number">0722</span>          摩羯：<span class="number">1222</span>~<span class="number">0120</span></span><br><span class="line">狮子：<span class="number">0723</span>~<span class="number">0823</span>          水瓶：<span class="number">0121</span>~<span class="number">0219</span></span><br><span class="line">处女：<span class="number">0824</span>~<span class="number">0923</span>          双鱼：<span class="number">0220</span>~<span class="number">0320</span></span><br></pre></td></tr></table></figure><a id="more"></a>

<p>例如，出生日期为 0609（6 月 9 号），则对应的是双子座。</p>
<p>根据上述描述，在程序中需要用户输入一个 4 位数字，再根据这个数字所处的范围进行判断，其中前两位是月份，后两位是日期。这里我们分别用 if else 语句和 switch 语句实现，希望读者自己运行，以便更好的掌握 if else 和 switch 的区别和适用场景。</p>
<h2 id="switch实现计算星座功能"><a href="#switch实现计算星座功能" class="headerlink" title="switch实现计算星座功能"></a>switch实现计算星座功能</h2><p>在这里使用 switch 语句判断出生的月份，然后根据日期确定星座名称。</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请输入您的出生年月（如 0123 表示 1 月 23 日）："</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> monthday = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> month = monthday/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> day = monthday%<span class="number">100</span>;</span><br><span class="line">    String xingzuo = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">21</span>?<span class="string">"摩羯座"</span>:<span class="string">"水瓶座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">20</span>? <span class="string">"水瓶座"</span>:<span class="string">"双鱼座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">21</span>?<span class="string">"双鱼座"</span>:<span class="string">"白羊座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">21</span>?<span class="string">"白羊座"</span>:<span class="string">"金牛座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">22</span>?<span class="string">"金牛座"</span>:<span class="string">"双子座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">22</span>?<span class="string">"双子座"</span>:<span class="string">"巨蟹座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">23</span>?<span class="string">"巨蟹座"</span>:<span class="string">"狮子座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">24</span>?<span class="string">"狮子座"</span>:<span class="string">"处女座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">24</span>?<span class="string">"处女座"</span>:<span class="string">"天秤座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">24</span>?<span class="string">"天秤座"</span>:<span class="string">"天蝎座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">23</span>?<span class="string">"天蝎座"</span>:<span class="string">"射手座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">　　    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            xingzuo = day&lt;<span class="number">22</span>?<span class="string">"射手座"</span>:<span class="string">"摩羯座"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"您的星座是："</span> +xingzuo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中， 首先声明变量 monthday 保存用户输入的信息，然后用 month 和 day 变量分别表示月份和日期。接下来 switch 语句根据月份判断执行 case 子句中的代码，在每个 case 子句中，使用三元运算符根据日期判断所属的星座。</p>
<p>最终运行效果如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入您的出生年月（如 <span class="number">0123</span> 表示 <span class="number">1</span> 月 <span class="number">23</span> 日）：</span><br><span class="line"><span class="number">0521</span></span><br><span class="line">您的星座是：金牛座</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入您的出生年月（如 <span class="number">0123</span> 表示 <span class="number">1</span> 月 <span class="number">23</span> 日）：</span><br><span class="line"><span class="number">1109</span></span><br><span class="line">您的星座是：天蝎座</span><br></pre></td></tr></table></figure>

<h2 id="if-else-实现计算星座功能"><a href="#if-else-实现计算星座功能" class="headerlink" title="if-else 实现计算星座功能"></a>if-else 实现计算星座功能</h2><p>在这里我们使用嵌套 if，与 switch 一样首先判断出生的月份，然后根据日期确定星座名称。</p>
<p>实现代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请输入您的出生年月（如 0123 表示 1 月 23 日）："</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> monthday = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> month = monthday / <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> day = monthday % <span class="number">100</span>;</span><br><span class="line">    String xingzuo = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">21</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"摩羯座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"水瓶座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"水瓶座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"双鱼座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">21</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"双鱼座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"白羊座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">21</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"白羊座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"金牛座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">22</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"金牛座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"双子座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">22</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"双子座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"巨蟹座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">23</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"巨蟹座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"狮子座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">24</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"狮子座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"处女座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">24</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"处女座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"天秤座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">24</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"天秤座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"天蝎座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">23</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"天蝎座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"射手座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">22</span>) &#123;</span><br><span class="line">            xingzuo = <span class="string">"射手座"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xingzuo = <span class="string">"摩羯座"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"您的星座是："</span> + xingzuo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们输入和上边一样的日期，运行结果如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入您的出生年月（如 <span class="number">0123</span> 表示 <span class="number">1</span> 月 <span class="number">23</span> 日）：</span><br><span class="line"><span class="number">0521</span></span><br><span class="line">您的星座是：金牛座</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入您的出生年月（如 <span class="number">0123</span> 表示 <span class="number">1</span> 月 <span class="number">23</span> 日）：</span><br><span class="line"><span class="number">1109</span></span><br><span class="line">您的星座是：天蝎座</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 6 节 Java while 循环</title>
    <url>/java-base-course-3-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>循环是程序中的重要流程结构之一。循环语句能够使程序代码重复执行，适用于需要重复一段代码直到满足特定条件为止的情况。</p><a id="more"></a>
<p>所有流行的编程语言中都有循环语句。Java 中采用的循环语句与C语言中的循环语句相似，主要有 while、do-while 和 for。另外 Java 5 之后推出了 for-each 循环语句，for-each 循环是 for 循环的变形，它是专门为集合遍历而设计的。for-each 并不是一个关键字。</p>
<p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体。当反复执行这个循环体时，需要在合适的时候把循环条件改为假，从而结束循环，否则循环将一直执行下去，形成死循环。</p>
<p>循环语句可能包含如下 4 个部分。</p>
<ul>
<li>初始化语句（init statement）： 一条或多条语句，这些语句用于完成一些初始化工作，初始化语句在循环开始之前执行。</li>
<li>循环条件（test_expression）：这是一个 boolean 表达式，这个表达式能决定是否执行循环体。</li>
<li>循环体（body_statement）：这个部分是循环的主体，如果循环条件允许，这个代码块将被重复执行。如果这个代码块只有一行语句，则这个代码块的花括号是可以省略的。</li>
<li>迭代语句（iteration_statement）：这个部分在一次循环体执行结束后，对循环条件重新求值（之后循环条件决定是否执行循环体），通常用于控制循环条件中的变量，使得循环在合适的时候结束。</li>
</ul>
<p>上面 4 个部分只是一般性的分类，并不是每个循环中都非常清晰地分出了这 4 个部分。</p>
<p>由于篇幅有限，本文主要介绍 while 和 do-while。关于 for 循环，大家可以参考<a href="/java-base-course-3-7/">《Java for 循环》</a>一节。</p>
<h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>while 语句是 Java 最基本的循环语句，是一种先判断的循环结构，可以在一定条件下重复执行一段代码。该语句需要判断一个测试条件，如果该条件为真，则执行循环语句（循环语句可以是一条或多条），否则跳出循环。</p>
<p>while 循环语句的语法结构如下：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中语句块中的代码可以是一条或者多条语句，而条件表达式是一个有效的 boolean 表达式，它决定了是否执行循环体。当条件表达式的值为 true 时，就执行大括号中的语句块。</p>
<p>执行完毕，再次检查表达式是否为 true，如果还为 true，则再次执行大括号中的代码，否则就跳出循环，执行 while 循环之后的代码。图 1 表示了 while 循环语句的执行流程。</p>
<p><img src="/java-base-course-3-6/java-base-course-3-6-1.jpg" alt="图 1  while 循环语句执行流程图"></p>
<p><strong>例 1</strong></p>
<p>使用 while 语句计算 10 的阶乘，其具体代码如下所示。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        n=n*i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"10的阶乘结果为："</span>+n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，定义了两个变量 i 和 n，循环每执行一次 i 值就加 1，判断 i 的值是否小于等于 10，并利用 n=n*i 语句来实现阶乘。当 i 的值大于 10 之后，循环便不再执行并退出循环。</p>
<p>运行程序，执行的结果如下所示：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span>的阶乘结果为：<span class="number">3628800</span></span><br></pre></td></tr></table></figure>

<h2 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h2><p>如你刚才所见，<span class="label success">如果 while 循环一开始条件表达式就是假的，那么循环体就根本不被执行。</span> 然而，有时需要在开始时条件表达式即使是假的情况下，while 循环至少也要执行一次。换句话说，有时你需要在一次循环结束后再测试中止表达式，而不是在循环开始时。</p>
<p>幸运的是，Java就提供了这样的循环：do-while循环。do-while 循环语句也是 Java 中运用广泛的循环语句，它由循环条件和循环体组成，但它与 while 语句略有不同。<span class="label success">do-while 循环语句的特点是先执行一次循环体，然后判断循环条件是否成立。</span> </p>
<p>do-while 语句的语法格式如下：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>
<p>以上语句的执行过程是，首先执行一次循环操作，然后再判断 while 后面的条件表达式是否为 true，如果循环条件满足，循环继续执行，否则退出循环。<span class="label danger">while 语句后必须以分号表示循环结束</span>，其运行流程如图 2 所示。</p>
<p><img src="/java-base-course-3-6/java-base-course-3-6-2.jpg" alt="图 2  do-while 循环语句的执行流程"></p>
<p><strong>例 2</strong></p>
<p>编写一个程序，计算 10 的阶乘。使用 do-while 循环的实现代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">1</span>,result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        result*=number;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(number &lt;= <span class="number">10</span>);</span><br><span class="line">    System.out.print(<span class="string">"10阶乘结果是："</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行后输出结果如下：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span>阶乘结果是：<span class="number">3628800</span></span><br></pre></td></tr></table></figure>

<p><strong>例 3</strong></p>
<p>在一个图书系统的推荐图书列表中保存了 50 条信息，现在需要让它每行显示 10 条，分 5 行进行显示。下面使用 do-while 循环语句来实现这个效果，其具体代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bookIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.print(bookIndex+<span class="string">"\t"</span>);</span><br><span class="line">        <span class="keyword">if</span>(bookIndex%<span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        bookIndex++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(bookIndex&lt;<span class="number">51</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中， 声明一个变量 bookIndex 用来保存图书的索引，该变量赋值为 1 表示从第一本开始。在 do-while 循环体内，首先输出了 bookIndex 的值，然后判断 bookIndex 是否能被 10 整除，如果可以则说明当前行已经输出 10 条，用 System.out.println() 语句输出了一个换行符。之后使 bookIndex 加 1，相当于更新当前的索引。最后在 while 表达式中判断是否超出循环的范围，即 50 条以内。</p>
<p>运行程序，执行的结果如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"><span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br><span class="line"><span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span></span><br><span class="line"><span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span> <span class="number">49</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h2 id="while和do-while的比较"><a href="#while和do-while的比较" class="headerlink" title="while和do-while的比较"></a>while和do-while的比较</h2><p>while 循环和 do-while 循环的相同处是：都是循环结构，使用 while(循环条件) 表示循环条件，使用大括号将循环操作括起来。</p>
<p>while 循环和 do-while 循环的不同处如下：</p>
<ul>
<li>语法不同：与 while 循环相比，do-while 循环将 while 关键字和循环条件放在后面，而且前面多了 do 关键字，后面多了一个分号。</li>
<li>执行次序不同：while 循环先判断，再执行。do-while 循环先执行，再判断。</li>
<li>一开始循环条件就不满足的情况下，while 循环一次都不会执行，do-while 循环则不管什么情况下都至少执行一次。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java for 循环</title>
    <url>/java-base-course-3-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>for 语句是应用最广泛、功能最强的一种循环语句。大部分情况下，for 循环可以代替 while 循环、do while 循环。</p><a id="more"></a>
<p>for 语句是一种在程序执行前就要先判断条件表达式是否为真的循环语句。假如条件表达式的结果为假，那么它的循环语句根本不会执行。for 语句通常使用在知道循环次数的循环中。</p>
<p>for 语句语法格式如下所示。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(条件表达式<span class="number">1</span>;条件表达式<span class="number">2</span>;条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for 循环中 3 个条件表达式的含义如表 1 所示。</p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">形式</th>
<th>功能</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">条件表达式 1</td>
<td align="center">赋值语句</td>
<td>循环结构的初始部分，为循环变量赋初值</td>
<td align="center">int i=1</td>
</tr>
<tr>
<td align="center">条件表达式 2</td>
<td align="center">条件语句</td>
<td>循环结构的循环条件</td>
<td align="center">i&gt;40</td>
</tr>
<tr>
<td align="center">条件表达式 3</td>
<td align="center">迭代语句，通常使用 ++ 或 – 运算符</td>
<td>循环结构的迭代部分，通常用来修改循环变量的值</td>
<td align="center">i++</td>
</tr>
</tbody></table>
<p>for 关键字后面括号中的 3 个条件表达式必须用“;”隔开。for 循环中的这 3 部分以及大括号中使循环体必需的 4 个组成部分完美地结合在一起，简单明了。</p>
<p>for 循环语句执行的过程为：首先执行条件表达式 1 进行初始化，然后判断条件表达式 2 的值是否为 true，如果为 true，则执行循环体语句块；否则直接退出循环。最后执行表达式 3，改变循环变量的值，至此完成一次循环。接下来进行下一次循环，直到条件表达式 2 的值为 false，才结束循环，其运行流程如图 1 所示。</p>
<p><img src="/java-base-course-3-7/java-base-course-3-7-1.jpg" alt="图 1  for循环执行流程图"></p>
<p>值得指出的是，for 循环的循环迭代语句并没有与循环体放在一起，因此即使在执行循环体时遇到 continue 语句结束本次循环，循环迭代语句也一样会得到执行。</p>
<p>for 循环和 while、do while 循环不一样：由于 while、do while 循环的循环迭代语句紧跟着循环体，因此如果循环体不能完全执行，如使用 continue 语句来结束本次循环，则循环迭代语句不会被执行。但 for 循环的循环迭代语句并没有与循环体放在一起，因此不管是否使用 continue 语句来结束本次循环，循环迭代语句一样会获得执行。</p>
<p>与前面循环类似的是，如果循环体只有一行语句，那么循环体的大括号可以省略。</p>
<p>例如，同样是计算 5 的阶乘，使用 for 循环的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">1</span>; number &lt;= <span class="number">5</span>; number++) &#123;</span><br><span class="line">        result *= number;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">"5 的阶乘结果是："</span> + result);   <span class="comment">// 输出"5的阶乘结果是：120"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述语句的含义可以理解为，将 number 变量的值从 1 开始，每次递增 1，直到大于 5 时终止循环。在循环过程中，将 number 的值与当前 result 的值进行相乘。</p>
<p>for 语句中初始化、循环条件以及迭代部分都可以为空语句（但分号不能省略），三者均为空的时候，相当于一个无限循环。下面对这些情况依次进行介绍。</p>
<h2 id="1．条件表达式-1-为空"><a href="#1．条件表达式-1-为空" class="headerlink" title="1．条件表达式 1 为空"></a>1．条件表达式 1 为空</h2><p>for 语句中条件表达式 1 的作用可以在程序的其他位置给出，所以当条件表达式 1 为空时，for 语句后面括号内其他条件表达式执行的顺序不变。</p>
<p>例如，使用 for 语句的这种形式计算 1~100 所有奇数的和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">1</span>; <span class="comment">// 相当于for语句的第1个表达式</span></span><br><span class="line">    <span class="keyword">for</span> (; number &lt; <span class="number">101</span>; number++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">"100 以内所有奇数和为："</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行后的输出结果如下：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span>以内所有奇数和为：<span class="number">2500</span></span><br></pre></td></tr></table></figure>
<h2 id="2．条件表达式-2-为空"><a href="#2．条件表达式-2-为空" class="headerlink" title="2．条件表达式 2 为空"></a>2．条件表达式 2 为空</h2><p>当 for 语句中条件表达式 2 为空时，将没有循环的终止条件。此时 for 语句会认为条件表达式 2 的值总是为真，循环无限制执行下去。因此，为了使循环达到某种条件时退出，需要在语句块中进行逻辑判断，并使用 break 语句来跳出循环，否则将产生死循环。</p>
<p>同样是计算 1~100 所有奇数的和，使用这种方式的代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">1</span>;; number++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 相当于for语句的表达式2，满足时就退出for循环</span></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">"100 以内所有奇数和为："</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3．条件表达式-3-为空"><a href="#3．条件表达式-3-为空" class="headerlink" title="3．条件表达式 3 为空"></a>3．条件表达式 3 为空</h2><p>当 for 语言中条件表达式 3 为空时，也就没有设置控制变量的表达式，即每次循环之后无法改变变量的值，此时也无法保证循环正常结束。</p>
<p>同样是计算1~100 所有奇数的和，使用这种方式的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">1</span>; number &lt; <span class="number">101</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">        number++; <span class="comment">// 相当于for语句的条件表达式3，每次递增1</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">"100 以内所有奇数和为："</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有循环体语句，number 变量的值为 1，永远小于 101，因此将无法结束循环，形成无限循环。在上面代码中将 number 的递增语句放在 for 循环体内，效果与完整 for 语句功能相同。</p>
<h2 id="4．3-个条件表达式都为空"><a href="#4．3-个条件表达式都为空" class="headerlink" title="4．3 个条件表达式都为空"></a>4．3 个条件表达式都为空</h2><p>在 for 循环语句中，无论缺少哪部分条件表达式，都可以在程序的其他位置补充，从而保持 for 循环语句的完整性，使循环正常进行。</p>
<p>当 for 语句中循环体全为空时，即没有循环初值，不判断循环条件，循环变量不增值，此时无条件执行循环体，形成无限循环或者死循环。对于这种情况，读者在使用时应该尽量避免。</p>
<p>例如，计算 1~100 所有奇数的和，使用这种方式的代码如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">1</span>; <span class="comment">// 相当于for语句的条件表达式1</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 相当于for语句的条件表达式2</span></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">        number++; <span class="comment">// 相当于for语句的条件表达式3</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">"100 以内所有奇数和为： "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例 1</strong></p>
<p>编写一个 Java 程序，统计某超市上半年的总销售量，要求由用户输入每月的销量。使用 for 循环的实现代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入第"</span> + i + <span class="string">" 个月的销售数量："</span>);</span><br><span class="line">        num = sc.nextInt();</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"上半年的销售总量为："</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该程序中, 声明循环变量 i，控制循环的次数，它被初始化为 1。每执行一次循环，都要对 i 进行判断，看其值是否小于等于 6，条件成立则继续累加成绩，否则退出循环。</p>
<p>每执行完一次循环体，都会对 i 累加 1。如此循环重复，直到 i 的值大于 6 时停止循环。此时退出 for 循环体，执行最下方的语句输出累加的销售总量。</p>
<p>运行程序，执行结果如下所示。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">请输入第<span class="number">1</span> 个月的销售数量：</span><br><span class="line"><span class="number">6840</span></span><br><span class="line">请输入第<span class="number">2</span> 个月的销售数量：</span><br><span class="line"><span class="number">5449</span></span><br><span class="line">请输入第<span class="number">3</span> 个月的销售数量：</span><br><span class="line"><span class="number">6546</span></span><br><span class="line">请输入第<span class="number">4</span> 个月的销售数量：</span><br><span class="line"><span class="number">2400</span></span><br><span class="line">请输入第<span class="number">5</span> 个月的销售数量：</span><br><span class="line"><span class="number">908</span></span><br><span class="line">请输入第<span class="number">6</span> 个月的销售数量：</span><br><span class="line"><span class="number">8048</span></span><br><span class="line">上半年的销售总量为：<span class="number">30191</span></span><br></pre></td></tr></table></figure>
<p>一般选择循环变量时，习惯选择 i、j、k 来作为循环变量。</p>
<h2 id="for、do-while-和-while-的区别"><a href="#for、do-while-和-while-的区别" class="headerlink" title="for、do-while 和 while 的区别"></a>for、do-while 和 while 的区别</h2><p>在《Java while和do while循环》中我们学习了 do-while 和 while 循环，这一节我们又学习了 for 循环。关于 do-while 和 while 具体的相同点和不同点在刚刚提到的教程中已经介绍过了，在这里不过多讲解了。下面主要介绍它们的区别，如下表 2 所示。</p>
<p>表 2 for、do-while和while的区别</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">概念</th>
<th>适用场景</th>
<th align="center">特点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">for</td>
<td align="center">根据循环次数限制做多少次重复操作</td>
<td>适合循环次数是已知的操作</td>
<td align="center"><em>初始化的条件可以使用局部变量和外部变量 *使用局部变量时，控制执行在 for 结束后会自动释放，提高内存使用效率。</em>且变量在 for 循环结束后，不能被访问。*先判断，在执行</td>
</tr>
<tr>
<td align="center">while</td>
<td align="center">当满足什么条件的时候，才做某种操作</td>
<td>适合循环次数是未知的操作</td>
<td align="center">*初始化的条件只能使用外部变量，且变量在 while 循环结束后可以访问 *先判断，在执行</td>
</tr>
<tr>
<td align="center">do-while</td>
<td align="center">先执行一次，在判断是否满足条件</td>
<td>适合至少执行一次的循环操作</td>
<td align="center">*在先需要执行一次的情况下，代码更加简洁。 *先执行一次，在判断</td>
</tr>
</tbody></table>
<p><strong>例 2</strong><br>分别用 for、do-while 和 while 求出 1-10 的和。<br>1）使用for循环<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果为 55。<br>2）使用 do-while 循环<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt; <span class="number">11</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>运行结果为 55。</code></pre><p>3）使用 while 循环<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">11</span>) &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>运行结果为 55。</code></pre><p>从上边代码可以看出 for 语句明显更加简练，因为知道循环次数。 </p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 8 节 Java for 循环嵌套</title>
    <url>/java-base-course-3-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>和其他编程语言一样，Java 允许循环嵌套。如果把一个循环放在另一个循环体内，那么就可以形成嵌套循环。</p><a id="more"></a>
<p>嵌套循环既可以是 for循环嵌套 while 循环，也可以是 while 循环嵌套 do-while 循环 …… 即各种类型的循环都可以作为外层循环，也可以作为内层循环。</p>
<p>当程序遇到嵌套循环时，如果外层循环的循环条件允许，则开始执行外层循环的循环体，而内层循环将被外层循环的循环体来执行——只是内层循环需要反复执行自己的循环体而已。</p>
<p>当内层循环执行结束，且外层循环的循环体执行结束时，则再次计算外层循环的循环条件，决定是否再次开始执行外层循环的循环体。</p>
<p>根据上面分析，假设外层循环的循环次数为 n 次，内层循环的循环次数为 m 次，那么内层循环的循环体实际上需要执行 n×m 次。嵌套循环的执行流程如图 1 所示。<br>嵌套循环的执行流程</p>
<p><img src="/java-base-course-3-8/java-base-course-3-8-1.jpg" alt="图 1  嵌套循环的执行流程"></p>
<p>从图 1 来看，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内层循环，才可以结束外层循环的当次循环，开始下一次循环。下面是一个使用嵌套循环输出九九乘法表实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"乘法口诀表："</span>);</span><br><span class="line">    <span class="comment">// 外层循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(j + <span class="string">"*"</span> + i + <span class="string">"="</span> + j * i + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上面程序，看到如下运行结果:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">乘法口诀表：</span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span> <span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span> <span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span> <span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span> <span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span> <span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span> <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span> <span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span> <span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span> <span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span> <span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span> <span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span> <span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span> <span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span> <span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span> <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span> <span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span> <span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span> <span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span> <span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span> <span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span> <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span> <span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span> <span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span> <span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span> <span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span> <span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span> <span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span> <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span> <span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span> <span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span> <span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span> <span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span> <span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span> <span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span> <span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span> <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure>

<p>从上面运行结果可以看出，进入嵌套循环时，循环变量 i 开始为 1，这时即进入了外层循环。进入外层循环后，内层循环把 i 当成一个普通变量，其值为 0。在外层循环的当次循环里，内层循环就是一 个普通循环。</p>
<p>实际上，嵌套循环不仅可以是两层嵌套，而且可以是三层嵌套、四层嵌套 …… 不论循环如何嵌套, 总可以把内层循环当成外层循环的循环体来对待，区别只是这个循环体里包含了需要反复执行的代码。</p>
<p>关于必须掌握以及面试中经常遇到的冒泡排序，大家可以参考《Java冒泡排序》一节，前提是已经了解了数组的用法。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 9 节 Java foreach 语句</title>
    <url>/java-base-course-3-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>foreach 循环语句是 Java 1.5 的新特征之一，在遍历数组、集合方面，foreach 为开发者提供了极大的方便。foreach 循环语句是 for 语句的特殊简化版本，主要用于执行遍历功能的循环。</p><a id="more"></a>
<p>foreach 循环语句的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(类型 变量名:集合) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，“类型”为集合元素的类型，“变量名”表示集合中的每一个元素，“集合”是被遍历的集合对象或数组。每执行一次循环语句，循环变量就读取集合中的一个元素，其执行流程如图 1 所示。</p>
<p><img src="/java-base-course-3-9/java-base-course-3-9-1.jpg" alt="图 1  foreach 循环语句的执行流程图"></p>
<p><strong>例 1</strong></p>
<p>假设有一个数组，采用 for 语句遍历数组的方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化数组</span></span><br><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">43</span>, <span class="number">32</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">75</span>, <span class="number">7</span>, <span class="number">10</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">"----for----"</span>);</span><br><span class="line"><span class="comment">// for语句</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Count is:"</span> + numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述第 2 行语句声明并初始化了 7 个元素数组集合，目前大家只需要知道当初始化数组时，要把相同类型的元素放到 {…} 中并且用逗号分隔（,）即可。</p>
<p>关于数组集合会在教程后面详细介绍，这里我们只需要大概了解就可以。numbers.length 是获得数组的长度，length 是数组的属性，numbers[i] 是通过数组下标访问数组元素。</p>
<p>那么采用 for-each 循环语句遍历数组的方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化int数组</span></span><br><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">43</span>, <span class="number">32</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">75</span>, <span class="number">7</span>, <span class="number">10</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">"----for each----"</span>);</span><br><span class="line"><span class="comment">// for-each语句</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : numbers) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Count is:"</span> + item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从示例中可以发现，item 不是循环变量，它保存了集合中的元素，for-each 语句将集合中的元素一一取出来，并保存到 item 中，这个过程中不需要使用循环变量，通过数组下标访问数组中的元素。可见 for-each 语句在遍历集合的时候要简单方便得多。</p>
<p><strong>例 2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] urls = &#123; <span class="string">"http://c.biancheng.net/java"</span>, <span class="string">"http://c.biancheng.net/c"</span>, <span class="string">"http://c.biancheng.net/golang/"</span> &#125;;</span><br><span class="line"><span class="comment">// 使用foreach循环来遍历数组元素</span></span><br><span class="line"><span class="comment">// 其中book将会自动迭代每个数组元素</span></span><br><span class="line"><span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">    System.out.println(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面程序可以看出，使用 foreach 循环遍历数组元素时无须获得数组长度，也无须根据索引来访问数组元素。</p>
<p>foreach 循环和普通循环不同的是，它无须循环条件，无须循环迭代语句，这些部分都由系统来完成，foreach 循环自动迭代数组的每个元素，当每个元素都被迭代一次后，foreach 循环自动结束。</p>
<p>当使用 foreach 循环来迭代输出数组元素或集合元素时，通常不要对循环变量进行赋值，虽然这种赋值在语法上是允许的，但没有太大的实际意义，而且极容易引起错误。例如下面程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] urls = &#123; <span class="string">"http://c.biancheng.net/java"</span>, <span class="string">"http://c.biancheng.net/c"</span>, <span class="string">"http://c.biancheng.net/golang/"</span> &#125;;</span><br><span class="line"><span class="comment">// 使用foreach循环来遍历数组元素，其中 book 将会自动迭代每个数组元素</span></span><br><span class="line"><span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">    url = <span class="string">"https://c.biancheng.net"</span>;</span><br><span class="line">    System.out.println(url);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(urls[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>运行上边程序，将看到如下结果：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//c.biancheng.net</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//c.biancheng.net</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//c.biancheng.net</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//c.biancheng.net/java</span></span><br></pre></td></tr></table></figure>
<p>从上面运行结果来看，由于在 foreach 循环中对数组元素进行赋值，结果导致不能正确遍历数组元素，不能正确地取出每个数组元素的值。而且当再次访问第一个数组元素时，发现数组元素的值依然没有改变。</p>
<p>不难看出，当使用 foreach 来迭代访问数组元素时，foreach 中的循环变量相当于一个临时变量，系统会把数组元素依次赋给这个临时变量，而这个临时变量并不是数组元素，它只是保存了数组元素的值。因此，如果希望改变数组元素的值，则不能使用这种 foreach 循环。</p>
<p>使用 foreach 循环迭代数组元素时，并不能改变数组元素的值，因此不要对 foreach 的循环变量进行赋值。</p>
<p><strong>例 3</strong></p>
<p>在一个字符串数组中存储了几种编程语言，现在将这些编程语言遍历输出。</p>
<p>foreach 语句的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] languages=&#123;<span class="string">"Java"</span>,<span class="string">"ASP.NET"</span>,<span class="string">"Python"</span>,<span class="string">"C#"</span>,<span class="string">"PHP"</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">"现在流行的编程语言有："</span>);</span><br><span class="line">    <span class="comment">// 使用 foreach 循环语句遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(String lang:languages) &#123;</span><br><span class="line">        System.out.println(lang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在循环体执行的过程中，每循环一次，会将 languages 数组中的一个元素赋值给 lang 变量，直到遍历 languages 数组中所有元素，循环终止。</p>
<p>该程序运行后的结果如下所示。<br>现在流行的编程语言有：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Java</span><br><span class="line">ASP.NET</span><br><span class="line">Python</span><br><span class="line">C#</span><br><span class="line">PHP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 3 章 Java 流程控制语句</title>
    <url>/java-base-course-3-Java-process-control-statement/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>流程是人们生活中不可或缺的一部分，它表示人们每天都在按照一定的流程做事。比如出门搭车、上班、下班、搭车回家。这其中的步骤是有顺序的。程序设计也需要有流程控制语句来完成用户的要求，根据用户的输入决定程序要进入什么流程，即“做什么”以及“怎么做”等。</p><a id="more"></a>
<p>从结构化程序设计角度出发，程序有 3 种结构：顺序结构、选择结构和循环结构。若是在程序中没有给出特别的执行目标，系统则默认自上而下一行一行地执行该程序，这类程序的结构就称为顺序结构。</p>
<p>到目前为止，我们所编写的程序都属于顺序结构。但是事物的发展往往不会遵循早就设想好的轨迹进行，因此，所设计的程序还需要具有在不同的条件下处理不同的问题的能力以及当需要进行一些相同的重复操作时，如何能省时省力地解决问题的能力。</p>
<p>在本章中，我们将对 Java 程序中的上述3种流程结构进行学习。初学者应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 语句 <a href="/java-base-course-3-1/">Go</a><br>第 2 节 Java if else 分支结构 <a href="/java-base-course-3-2/">Go</a><br>第 3 节 Java switch case 语句 <a href="/java-base-course-3-3/">Go</a><br>第 4 节 Java 使用 switch 实现淡旺季飞机票打折 <a href="/java-base-course-3-4/">Go</a><br>第 5 节 Java 根据出生日期计算星座 <a href="/java-base-course-3-5/">Go</a><br>第 6 节 Java while 循环 <a href="/java-base-course-3-6/">Go</a><br>第 7 节 Java for 循环 <a href="/java-base-course-3-7/">Go</a><br>第 8 节 Java for 循环嵌套 <a href="/java-base-course-3-8/">Go</a><br>第 9 节 Java foreach 语句 <a href="/java-base-course-3-9/">Go</a><br>第 10 节 Java return 语句 <a href="/java-base-course-3-10/">Go</a><br>第 11 节 Java break 语句 <a href="/java-base-course-3-11/">Go</a><br>第 12 节 Java continue 语句 <a href="/java-base-course-3-12/">Go</a><br>第 13 节 Java 判断闰年平年并输出某月的天数 <a href="/java-base-course-3-13/">Go</a><br>第 14 节 Java 输出杨辉三角形 <a href="/java-base-course-3-14/">Go</a><br>第 15 节 Java 选择结构和循环结构的总结 <a href="/java-base-course-3-15/">Go</a></p>
          </div>

<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>了解什么是算法及其描述方式</li><li>掌握 Java 中顺序结构的使用</li><li>掌握 if 的单条件、多条件和嵌套用法</li><li>掌握 switch 语句的使用</li><li>掌握 while 和 do…while 的使用</li><li>掌握 for 语句的使用</li><li>掌握 foreach 语句的使用</li><li>熟悉 return 语句的用法</li><li>了解 break 语句和 continue 语句 </li></ol>
          </div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 2 章 Java 程序设计基础</title>
    <url>/java-base-course-2-Java-Fundamentals-of-programming/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 2 章 Java 程序设计基础</p>
          </div>

<a id="more"></a>

<p>要想编写规范、可读性高的 Java 程序，就必须对 Java 基本语法有所了解。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。</p>
<p>一个 Java 程序通常由数据类型、变量、运算符和控制流程语句4部分组成。其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作，变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。</p>
<p>本章将详细介绍 Java 程序中的基本数据类型、变量、常量、运算符等相关知识。对初学者来说，应该对本章的每个小节进行仔细阅读、思考，这样才能达到事半功倍的效果。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>掌握常量的声明</li><li>掌握变量的声明和赋值</li><li>掌握数据类型的分类</li><li>掌握算术运算符和赋值运算符</li><li>熟悉逻辑运算符和关系运算符</li><li>了解位运算符</li><li>熟悉运算符的优先级</li><li>熟悉两种基本类型转换</li></ol>
          </div>

<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 标识符和关键字<br>第 2 节 Java 注释：单行、多行和文档注释<br>第 3 节 Java 常量：Java 常量的定义和分类<br>第 4 节 Java 变量的声明和初始化<br>第 5 节 Java 变量的作用域：静态变量、全局变量和局部变量<br>第 6 节 Java 数据类型：基本数据类型和引用数据类型<br>第 7 节 Java 数据类型转换：强制类型转换+自动类型转换<br>第 8 节 Java 算数运算符<br>第 9 节 Java 赋值运算符（=）<br>第 10 节 Java 逻辑运算符（&amp;&amp;、||和!）<br>第 11 节 Java 关系运算符<br>第 12 节 Java 自增和自减运算符（++和–）<br>第 13 节 Java 位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算<br>第 14 节 Java 三目运算符（条件运算符? :）<br>第 15 节 Java 运算符优先级<br>第 16 节 Java 直接量（字面量）</p>
          </div>

<hr>
<h2 id="第-1-节-Java标识符和关键字"><a href="#第-1-节-Java标识符和关键字" class="headerlink" title="第 1 节 Java标识符和关键字"></a>第 1 节 Java标识符和关键字</h2><p>任何一种计算机语言都离不开标识符和关键字，因此下面将详细介绍 Java 的标识符、关键字和保留字。</p>
<p><strong>标识符</strong></p>
<p>Java 中标识符是为方法、变量或其他用户定义项所定义的名称。标识符可以有一个或多个字符。在 Java 语言中，标识符的构成规则如下。</p>
<ul>
<li>标识符由数字（0~9）和字母（A~Z 和 a~z）、美元符号（$）、下划线（_）以及 Unicode 字符集中符号大于 0xC0 的所有符号组合构成（各符号之间没有空格）。</li>
<li>标识符的第一个符号为字母、下划线和美元符号，后面可以是任何字母、数字、美元符号或下划线。</li>
</ul>
<p>另外，Java 区分大小写，因此 myvar 和 MyVar 是两个不同的标识符。</p>
<p>提示：标识符命名时，切记不能以数字开头，也不能使用任何 Java 关键字作为标识符，而且不能赋予标识符任何标准的方法名。</p>
<p>标识符分为两类，分别为关键字和用户自定义标识符。</p>
<ol>
<li>关键字是有特殊含义的标识符，如 true、false 表示逻辑的真假。</li>
<li>用户自定义标识符是由用户按标识符构成规则生成的非保留字的标识符，如 abc 就是一个标识符。</li>
</ol>
<p>提示：使用标识符时一定要注意，或者使用关键字，或者使用自定义的非关键字标识符。此外，标识符可以包含关键字，但不能与关键字重名。</p>
<p>例如以下合法与不合法标识符。</p>
<ul>
<li>合法标识符：date、$2011、<em>date、D</em>$date 等。</li>
<li>不合法的标识符：123.com、2com、for、if、fruit 等。</li>
</ul>
<p>标识符用来命名常量、变量、类和类的对象等。因此，一个良好的编程习惯要求命名标识符时，应赋予它一个有意义或有用途的名字。</p>
<p><strong>关键字</strong></p>
<p>关键字（或者保留字）是对编译器有特殊意义的固定单词，不能在程序中做其他目的使用。关键字具有专门的意义和用途，和自定义的标识符不同，不能当作一般的标识符来使用。例如，在《使用记事本编写运行Java程序》一节的实例 HelloJava.java 中的 class 就是一个关键字，它用来声明一个类，其类名称为 HelloJava。public 也是关键字，它用来表示公共类。另外，static 和 void 也是关键字，它们的使用将在本教程后面的章节中详细介绍。</p>
<p>Java 的关键字对 Java 编译器有特殊的意义，它们用来表示一种数据类型，或者表示程序的结构等。保留字是为 Java 预留的关键字，它们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。</p>
<p>Java 语言目前定义了 51 个关键字，这些关键字不能作为变量名、类名和方法名来使用。以下对这些关键字进行了分类。</p>
<ul>
<li>数据类型：boolean、int、long、short、byte、float、double、char、class、interface。</li>
<li>流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally。</li>
<li>修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native。</li>
<li>动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new。</li>
<li>保留字：true、false、null、goto、const。</li>
</ul>
<p>提示：由于 Java 区分大小写，因此 public 是关键字，而 Public 则不是关键字。但是为了程序的清晰及可读性，要尽量避免使用关键字的其他形式来命名。：单行、多行和文档注释</p>
<hr>
<h2 id="第-2-节-Java注释：单行、多行和文档注释"><a href="#第-2-节-Java注释：单行、多行和文档注释" class="headerlink" title="第 2 节 Java注释：单行、多行和文档注释"></a>第 2 节 Java注释：单行、多行和文档注释</h2><p>注释是对程序语言的说明，有助于开发者和用户之间的交流，方便理解程序。注释不是编程语句，因此被编译器忽略。</p>
<p>Java 支持以下三种注释方式：<br>1）单行注释<br>以双斜杠“//”标识，只能注释一行内容，用在注释信息内容少的地方。打开 Eclipse，在 Java 代码中使用单行注释，如图 1 所示。</p>
<p><img src="/java-base-course-2-Java-Fundamentals-of-programming/java-base-course-2-2-1.png" alt="图 1  单行注释"></p>
<p>2）多行注释<br>包含在“/<em>”和“</em>/”之间，能注释很多行的内容。为了可读性比较好，一般首行和尾行不写注释信息（这样也比较美观好看），如图 2 所示。</p>
<p>注意：多行注释可以嵌套单行注释，但是不能嵌套多行注释和文档注释。</p>
<p><img src="/java-base-course-2-Java-Fundamentals-of-programming/java-base-course-2-2-2.png" alt="图 2  多行注释"></p>
<p>3）文档注释<br>包含在“/<em>*”和“</em>/”之间，也能注释多行内容，一般用在类、方法和变量上面，用来描述其作用。注释后，鼠标放在类和变量上面会自动显示出我们注释的内容，如图 3 所示。</p>
<p>注意：文档注释能嵌套单行注释，不能嵌套多行注释和文档注释，一般首行和尾行也不写注释信息。</p>
<p><img src="/java-base-course-2-Java-Fundamentals-of-programming/java-base-course-2-2-3.png" alt="图 3  文档注释"></p>
<p>文档注释可以通过 Javadoc 命令把文档注释中的内容生成文档，并输出到 HTML 文件中，方便记录程序信息。还可以包含一个或多个 @ 标签，每个 @ 标签都在新的一行开始。Javadoc 工具识别的标签如下表所示：</p>
<table>
<thead>
<tr>
<th align="right">标签</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="right">@author</td>
<td align="center">标识一个类的作者</td>
<td align="center">@author description</td>
</tr>
<tr>
<td align="right">@deprecated</td>
<td align="center">指名一个过期的类或成员</td>
<td align="center">@deprecated description</td>
</tr>
<tr>
<td align="right">{@docRoot}</td>
<td align="center">指明当前文档根目录的路径</td>
<td align="center">Directory Path</td>
</tr>
<tr>
<td align="right">@exception</td>
<td align="center">标志一个类抛出的异常</td>
<td align="center">@exception exception-name explanation</td>
</tr>
<tr>
<td align="right">{@inheritDoc}</td>
<td align="center">从直接父类继承的注释</td>
<td align="center">Inherits a comment from the immediate surperclass.</td>
</tr>
<tr>
<td align="right">{@link}</td>
<td align="center">插入一个到另一个主题的链接</td>
<td align="center">{@link name text}</td>
</tr>
<tr>
<td align="right">{@linkplain}</td>
<td align="center">插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>
<td align="center">Inserts an in-line link to another topic.</td>
</tr>
<tr>
<td align="right">@param</td>
<td align="center">说明一个方法的参数</td>
<td align="center">@param parameter-name explanation</td>
</tr>
<tr>
<td align="right">@return</td>
<td align="center">说明返回值类型</td>
<td align="center">@return explanation</td>
</tr>
<tr>
<td align="right">@see</td>
<td align="center">指定一个到另一个主题的链接</td>
<td align="center">@see anchor</td>
</tr>
<tr>
<td align="right">@serial</td>
<td align="center">说明一个序列化属性</td>
<td align="center">@serial description</td>
</tr>
<tr>
<td align="right">@serialData</td>
<td align="center">说明通过 writeObject() 和 writeExternal() 方法写的数据</td>
<td align="center">@serialData description</td>
</tr>
<tr>
<td align="right">@serialField</td>
<td align="center">说明一个 ObjectStreamField 组件</td>
<td align="center">@serialField name type description</td>
</tr>
<tr>
<td align="right">@since</td>
<td align="center">标记当引入一个特定的变化时</td>
<td align="center">@since release</td>
</tr>
<tr>
<td align="right">@throws</td>
<td align="center">和 @exception 标签一样.    The</td>
<td align="center">@throws tag has the same meaning as the @exception tag.</td>
</tr>
<tr>
<td align="right">{@value}</td>
<td align="center">显示常量的值，该常量必须是 static 属性。</td>
<td align="center">Displays the value of a constant, which must be a static field.</td>
</tr>
<tr>
<td align="right">@version</td>
<td align="center">指定类的版本</td>
<td align="center">@version info</td>
</tr>
</tbody></table>
<p>在 Java 中，一行注释以双斜杠“//”标识；多行注释包含在“/*”和“*/”之间；文档注释包含在“/**”和“*/”之间。当编译器执行到“//”时，就会忽略该行“//”之后的所有文本；当执行到“/*”时，会扫描下一个“*/”并忽略“/*”和“*/”之间的任何文本；当执行到“/**”时，也会扫描下一个“*/”并忽略“/**”和“*/”之间的任何文本内容。</p>
<hr>
<h2 id="第-3-节-Java常量：Java常量的定义和分类"><a href="#第-3-节-Java常量：Java常量的定义和分类" class="headerlink" title="第 3 节 Java常量：Java常量的定义和分类"></a>第 3 节 Java常量：Java常量的定义和分类</h2><hr>
<h2 id="第-4-节-Java变量的声明和初始化"><a href="#第-4-节-Java变量的声明和初始化" class="headerlink" title="第 4 节 Java变量的声明和初始化"></a>第 4 节 Java变量的声明和初始化</h2><hr>
<h2 id="第-5-节-Java变量的作用域：静态变量、全局变量和局部变量"><a href="#第-5-节-Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="第 5 节 Java变量的作用域：静态变量、全局变量和局部变量"></a>第 5 节 Java变量的作用域：静态变量、全局变量和局部变量</h2><hr>
<h2 id="第-6-节-Java数据类型：基本数据类型和引用数据类型"><a href="#第-6-节-Java数据类型：基本数据类型和引用数据类型" class="headerlink" title="第 6 节 Java数据类型：基本数据类型和引用数据类型"></a>第 6 节 Java数据类型：基本数据类型和引用数据类型</h2><hr>
<h2 id="第-7-节-Java数据类型转换：强制类型转换-自动类型转换"><a href="#第-7-节-Java数据类型转换：强制类型转换-自动类型转换" class="headerlink" title="第 7 节 Java数据类型转换：强制类型转换+自动类型转换"></a>第 7 节 Java数据类型转换：强制类型转换+自动类型转换</h2><hr>
<h2 id="第-8-节-Java算数运算符"><a href="#第-8-节-Java算数运算符" class="headerlink" title="第 8 节 Java算数运算符"></a>第 8 节 Java算数运算符</h2><hr>
<h2 id="第-9-节-Java赋值运算符（-）"><a href="#第-9-节-Java赋值运算符（-）" class="headerlink" title="第 9 节 Java赋值运算符（=）"></a>第 9 节 Java赋值运算符（=）</h2><hr>
<h2 id="第-10-节-Java逻辑运算符（-amp-amp-、-和-）"><a href="#第-10-节-Java逻辑运算符（-amp-amp-、-和-）" class="headerlink" title="第 10 节 Java逻辑运算符（&amp;&amp;、||和!）"></a>第 10 节 Java逻辑运算符（&amp;&amp;、||和!）</h2><hr>
<h2 id="第-11-节-Java关系运算符"><a href="#第-11-节-Java关系运算符" class="headerlink" title="第 11 节 Java关系运算符"></a>第 11 节 Java关系运算符</h2><hr>
<h2 id="第-12-节-Java自增和自减运算符（-和–）"><a href="#第-12-节-Java自增和自减运算符（-和–）" class="headerlink" title="第 12 节 Java自增和自减运算符（++和–）"></a>第 12 节 Java自增和自减运算符（++和–）</h2><hr>
<h2 id="第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"><a href="#第-13-节-Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算" class="headerlink" title="第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算"></a>第 13 节 Java位运算符：Java移位运算符、复合位赋值运算符及位逻辑运算</h2><hr>
<h2 id="第-14-节-Java三目运算符（条件运算符-）"><a href="#第-14-节-Java三目运算符（条件运算符-）" class="headerlink" title="第 14 节 Java三目运算符（条件运算符? :）"></a>第 14 节 Java三目运算符（条件运算符? :）</h2><hr>
<h2 id="第-15-节-Java运算符优先级"><a href="#第-15-节-Java运算符优先级" class="headerlink" title="第 15 节 Java运算符优先级"></a>第 15 节 Java运算符优先级</h2><hr>
<h2 id="第-16-节-Java直接量（字面量）"><a href="#第-16-节-Java直接量（字面量）" class="headerlink" title="第 16 节 Java直接量（字面量）"></a>第 16 节 Java直接量（字面量）</h2><hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>第 1 章 Java 入门基础及环境搭建</title>
    <url>/java-base-course-1-Java-Introduction-foundation-and-environment-construction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>第 1 章 Java 入门基础及环境搭建</p>
          </div>

<a id="more"></a>

<p>Java 是当今世界最重要、使用最广泛的计算机语言之一，在多年之前它就巳经拥有这一荣誉。全球每天有超过百万的开发者在用 Java 进行各式各样程序的开发，用 Java 编写的程序因为其硬件环境无关性而越来越受到人们的青睐。</p>
<p>如果你也想成为 Java 开发阵营的一员，那么就跟随教程第 1 章来全面了解一下 Java。本章主要讲述 Java 的一些基础知识及其开发环境的搭建和使用。</p>
<div class="note info">
            <p>本章学习要点</p>
          </div>

<div class="note success">
            <ol><li>了解 Java 语言的版本及特点</li><li>了解学习 Java 的方法</li><li>掌握 JDK 的安装</li><li>掌握环境变量的配置</li><li>熟悉 Java 程序的编写、编译和运行过程</li><li>了解 Java 虚拟机的作用</li><li>熟悉 Java 程序的各个组成部分</li><li>了解 Java 编程规范</li><li>掌握 Eclipse 创建 Java 程序的方法</li><li>掌握 Eclipse 调试程序的方法</li></ol>
          </div>


<div class="note info">
            <p>本章节目录</p>
          </div>

<div class="note success">
            <p>第 1 节 Java 是什么？Java 的特点有哪些？<br>第 2 节 Java 薪资待遇如何？就业方向有哪些？<br>第 3 节 Java JDK 下载与安装教程<br>第 4 节 Java JDK 环境变量配置<br>第 5 节 使用记事本编写运行 Java 程序<br>第 6 节 Java 编程规范（命名规则）<br>第 7 节 Java 程序的运行过程（执行流程）分析<br>第 8 节 Java 虚拟机（JVM）及 Java 跨平台原理<br>第 9 节 Java 中 JVM、JRE 和 JD K三者有什么区别和联系？<br>第 10 节 Java 和 C/C++ 到底有什么关系？它们有什么区别？<br>第 11 节 Java 常用开发工具有哪些？<br>第 12 节 Java Eclipse 下载安装教程<br>第 13 节 使用 Eclipse 开发第一个 Java 程序<br>第 14 节 Java 修改 Eclipse 编辑器字体大小<br>第 15 节 Java Eclipse 如何调试代码<br>第 16 节 Eclipse 快捷键大全<br>第 17 节 Java 初学者容易犯的错误<br>第 18 节 学习 Java 前一定要掌握这几个方法，事半功倍！<br>第 19 节 Java 程序员必须知道的学习路线</p>
          </div>

<hr>
<h2 id="第-1-节-Java是什么？Java的特点有哪些？"><a href="#第-1-节-Java是什么？Java的特点有哪些？" class="headerlink" title="第 1 节 Java是什么？Java的特点有哪些？"></a>第 1 节 Java是什么？Java的特点有哪些？</h2><p>Java 是近 10 年来计算机软件发展过程中的传奇，其在众多开发者心中的地位可谓“爱不释手”，与其他一些计算机语言随着时间的流逝影响也逐渐减弱不同，Java 随着时间的推移反而变得更加强大。</p>
<p>从首次发布开始，Java 就跃到了 Internet 编程的前沿。后续的每一个版本都进一步巩固了这一地位。如今，Java 依然是开发基于 Web 的应用程序的最佳选择。此外，Java 还是智能手机变革的推手，Android 编程采用的就是 Java 语言。</p>
<p><strong>什么是Java语言</strong></p>
<p>简单地说，Java 是由 Sun Microsystems 公司于 1995 年推出的一门面向对象程序设计语言。2010 年 Oracle 公司收购 Sun Microsystems，之后由 Oracle 公司负责 Java 的维护和版本升级。</p>
<p>其实，Java 还是一个平台。Java 平台由 Java 虚拟机（Java Virtual Machine，JVM）和 Java 应用编程接口（Application Programming Interface，API）构成。Java 应用编程接口为此提供了一个独立于操作系统的标准接口，可分为基本部分和扩展部分。在硬件或操作系统平台上安装一个 Java 平台之后，Java 应用程序就可运行。</p>
<p>Java 平台已经嵌入了几乎所有的操作系统。这样 Java 程序只编译一次，就可以在各种系统中运行。Java 应用编程接口已经从 1.1x 版本发展到 1.2 版本。常用的 Java 平台基于 Java 1.6，最新版本为Java 1.8。</p>
<p>Java 发展至今，就力图使之无所不能。按应用范围，Java 可分为 3 个体系，即 Java SE、Java EE 和 Java ME。下面简单介绍这 3 个体系。</p>
<ol>
<li>Java SE</li>
</ol>
<p>Java SE（Java Platform Standard Edition，Java 平台标准版）以前称为 J2SE，它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java EE 提供基础，如 Java 语言基础、JDBC 操作、I/O 操作、网络通信以及多线程等技术。<br>图 1 所示为 Java SE 的体系结构。</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-SE-System-structure.jpg" alt="图 1 Java SE的体系结构"></p>
<ol start="2">
<li>Java EE</li>
</ol>
<p>Java EE（Java Platform Enterprise Edition，Java 平台企业版）以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（Service Oriented Architecture，SOA）和 Web 2.0 应用程序。</p>
<ol start="3">
<li>Java ME</li>
</ol>
<p>Java ME（Java Platform Micro Edition，Java 平台微型版）以前称为 J2ME，也叫 K-JAVA。 Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。</p>
<p>Java ME 包括灵活的用户界面、健壮的安全模型、丰富的内置网络协议以及对可以动态下载的联网和离线应用程序。基于 Java ME 规范的应用程序 只需编写一次就可以用于许多设备，而且可以利用每个设备的本机功能。</p>
<p><strong>Java语言的特点</strong></p>
<p>Java 语言的风格很像 C 语言和 C++ 语言，是一种纯粹的面向对象语言，它继承了 C++ 语言面向对象的技术核心，但是拋弃了 C++ 的一些缺点，比如说容易引起错误的指针以及多继承等，同时也增加了垃圾回收机制，释放掉不被使用的内存空间，解决了管理内存空间的烦恼。</p>
<p>Java 语言是一种分布式的面向对象语言，具有面向对象、平台无关性、简单性、解释执行、多线程、安全性等很多特点，下面针对这些特点进行逐一介绍。</p>
<ol>
<li>面向对象</li>
</ol>
<p>Java 是一种面向对象的语言，它对对象中的类、对象、继承、封装、多态、接口、包等均有很好的支持。为了简单起见，Java 只支持类之间的单继承，但是可以使用接口来实现多继承。使用 Java 语言开发程序，需要采用面向对象的思想设计程序和编写代码。</p>
<ol start="2">
<li>平台无关性</li>
</ol>
<p>平台无关性的具体表现在于，Java 是“一次编写，到处运行（Write Once，Run any Where）”的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</p>
<p>Java 语言使用 Java 虚拟机机制屏蔽了具体平台的相关信息，使得 Java 语言编译的程序只需生成虚拟机上的目标代码，就可以在多种平台上不加修改地运行。</p>
<ol start="3">
<li>简单性</li>
</ol>
<p>Java 语言的语法与 C 语言和 C++ 语言很相近，使得很多程序员学起来很容易。对 Java 来说，它舍弃了很多 C++ 中难以理解的特性，如操作符的重载和多继承等，而且 Java 语言不使用指针，加入了垃圾回收机制，解决了程序员需要管理内存的问题，使编程变得更加简单。</p>
<ol start="4">
<li>解释执行</li>
</ol>
<p>Java 程序在 Java 平台运行时会被编译成字节码文件，然后可以在有 Java 环境的操作系统上运行。在运行文件时，Java 的解释器对这些字节码进行解释执行，执行过程中需要加入的类在连接阶段被载入到运行环境中。</p>
<ol start="5">
<li>多线程</li>
</ol>
<p>Java 语言是多线程的，这也是 Java 语言的一大特性，它必须由 Thread 类和它的子类来创建。Java 支持多个线程同时执行，并提供多线程之间的同步机制。任何一个线程都有自己的 run() 方法，要执行的方法就写在 run() 方法体内。</p>
<ol start="6">
<li>分布式</li>
</ol>
<p>Java 语言支持 Internet 应用的开发，在 Java 的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库，包括 URL、URLConnection、Socket 等。Java 的 RIM 机制也是开发分布式应用的重要手段。</p>
<ol start="7">
<li>健壮性</li>
</ol>
<p>Java 的强类型机制、异常处理、垃圾回收机制等都是 Java 健壮性的重要保证。对指针的丢弃是 Java 的一大进步。另外，Java 的异常机制也是健壮性的一大体现。</p>
<ol start="8">
<li>高性能</li>
</ol>
<p>Java 的高性能主要是相对其他高级脚本语言来说的，随着 JIT（Just in Time）的发展，Java 的运行速度也越来越高。</p>
<ol start="9">
<li>安全性</li>
</ol>
<p>Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防止恶意代码的攻击。除了 Java 语言具有许多的安全特性以外，Java 还对通过网络下载的类增加一个安全防范机制，分配不同的名字空间以防替代本地的同名类，并包含安全管理机制。</p>
<p>Java 语言的众多特性使其在众多的编程语言中占有较大的市场份额，Java 语言对对象的支持和强大的 API 使得编程工作变得更加容易和快捷，大大降低了程序的开发成本。Java 的“一次编写，到处执行”正是它吸引众多商家和编程人员的一大优势。</p>
<hr>
<h2 id="第-2-节-Java薪资待遇如何？就业方向有哪些？"><a href="#第-2-节-Java薪资待遇如何？就业方向有哪些？" class="headerlink" title="第 2 节 Java薪资待遇如何？就业方向有哪些？"></a>第 2 节 Java薪资待遇如何？就业方向有哪些？</h2><p>Java 的就业前景如何，看培训班就知道了，比如以 Java 培训为主的达内，传智播客，北大青鸟等各种各样的培训班。</p>
<p>Java 作为业界长老型语言，相对于其他编程语言，不管是之前的霸屏语言，还是之后的后起之秀，都不及 Java 的就业岗位多。</p>
<p>根据 IDC 的统计，在所有软件开发类人才的需求中，对 Java 工程师的需求曾达到全部需求量的 50% 以上。而且，Java 工程师的薪水相对较高。通常来说，具有 3~5 年开发经验的工程师，年薪几十万是很正常的一个工资。</p>
<p>一些重点院校的优秀毕业生能够进入国内一流的 IT 企业（百度、腾讯、阿里巴巴等），年薪一般在 20 万左右，拿到多个 offer 的，证明很有实力，可以跟企业谈价，幸运的话可以拿到 30 万。</p>
<p>我们以北京 Java 程序员工资情况为例，具体看一下。在职友集搜索北京 Java 工程工资，得到如下结果：</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-wages.png" alt="Java 程序员的平均工资"></p>
<p>从上图可以看出，北京 Java 程序员的平均工资是 ¥21380/月，数据取自 74283 份样本，可信度还是很高的。</p>
<p>目前，Java 的主要就业方向有四个。</p>
<p><strong>Web 开发</strong></p>
<p>Web 开发语言很多，Java 是其中之一。Java 在开发高访问、高并发、集群化的大型网站方面有很大的优势，例如人人网、去哪儿网、美团等。</p>
<p><strong>Android 开发</strong></p>
<p>Android 是全球最大的智能手机操作系统，它的主要开发语言就是 Java。</p>
<p>Android 从 2010 年才开始走入大众视野，虽然最近几年发展非常快速，但人才积累却没有跟上，优秀的 Android 开发工程师仍然存在不小的缺口，这也是导致 Android 开发人员工资高，难招人的原因。</p>
<p><strong>客户端开发</strong></p>
<p>Java 客户端开发主要面向政府、事业单位和大型企业，如医疗、学校、OA、邮箱、投票、金融、考试、物流、矿山等信息方面的系统。</p>
<p>但是客户端开发往往不是这些企业的主要业务，而是为主要业务提供辅助，以便企业能够更加高效的运营，因此必然不是企业的主要部门，虽然待遇可能和前面两者差不多，但是前景却不看好，企业没有精心打磨这些产品并推向市场的动力，都是内部员工使用，能用就好。</p>
<p><strong>游戏开发</strong></p>
<p>国内游戏行业近年来发展十分迅速，专业的游戏人才一直存在需求缺口。目前有一些游戏脚本语言可以与 Java 开发语言进行无缝交互，Java 开发语言本身也可以编写游戏脚本。因此学会 Java 开发后，也可以选择成为一名游戏开发人员。</p>
<p>从编程语言的大趋势来看，“Java 不会被摧毁”这是一条值得我们相信和肯定的论断。建议初学者在进行 Java 学习时选好就业方向。因为根据就业方向的不同，在进行 Java 学习的时候，侧重点也会略有不同。</p>
<hr>
<h2 id="第-3-节-Java-JDK下载与安装教程"><a href="#第-3-节-Java-JDK下载与安装教程" class="headerlink" title="第 3 节 Java JDK下载与安装教程"></a>第 3 节 Java JDK下载与安装教程</h2><p>万事开头难。在了解什么是 Java、Java 语言的特点以及学习方法之后，本节将介绍如何搭建编写 Java 程序所需要的开发环境——JDK（Java Development Kit）。</p>
<p>JDK 是一种用于构建在 Java 平台上发布的应用程序、Applet 和组件的开发环境，即编写 Java 程序必须使用 JDK，它提供了编译和运行 Java 程序的环境。</p>
<p>在安装 JDK 之前，首先要到 Oracle 网站获取 JDK 安装包。JDK 安装包被集成在 Java SE 中，因此下载 Java SE 即可，具体步骤如下。</p>
<p>(1) 在浏览器中输入 <a href="www.oracle.com">www.oracle.com</a>，打开 Oracle 公司的官方网站。在首页的栏目中选择 Downloads 选项。</p>
<p>在转向的页面中选择 Java for Developers 选项，单击 Java for Developers 超链接，进入 Java SE 的下载页面。</p>
<p>提示：由于 Java 版本不断更新，当读者浏览 JavaSE 的下载页面时，显示的是当前最新的版本。</p>
<p>(2) 在页面的 JDK 下方单击 DOWNLOAD 按钮，如图 3 所示。在进入的 JDK 下载页面中包括 Windows、Solaris 和 Linux 等平台的不同环境 JDK 的下载链接。</p>
<p>(3) 在下载之前需要选中 Accept License Agreement 单选按钮，接受许可协议。由于本教程中使用的是 64 位版的 Windows 操作系统，因此这里需要选择与平台相对应的 Windows x64 类型的 jdlo8u92-windows-x64.exe 超链接，对 JDK 进行下载，如图 4 所示。</p>
<p>注意：需要登录 Oracle 账号</p>
<p>(4) 下载完成后，在磁盘中会发现一个名称为 jdk-8u92-windows-x64.exe 的可执行文件。双击该文件，打开 JDK 的欢迎界面。</p>
<p>(5) 单击“下一步”按钮，打开定制安装对话框。选择安装的 JDK 组件。（这里一路点击下一步）</p>
<p>(6) 单击“更改”按钮，可以更改 JDK 的安装路径。（不建议修改，一路点击下一步）</p>
<p>(7) 在安装过程中会打开如图所示的目标文件夹对话框，选择 JRE 的安装路径，这里使用默认值。</p>
<p>(8) 单击“下一步”按钮，安装 JRE。当 JRE 安装完成之后，将打开 JDK 安装完成界面，如图 10 所示。</p>
<p>安装完成，点击关闭。</p>
<p>安装完成后，在安装位置打开 JDK 的文件夹，内容和目录结构如图 11 所示。</p>
<p>JDK安装目录<br>图 11  JDK安装目录</p>
<p>从图 11 可以看出，JDK 安装目录下具有多个子目录和一些网页文件，其中重要目录和文件的说明如下。</p>
<ul>
<li>bin：提供 JDK 工具程序，包括 javac、java、javadoc、appletviewer 等可执行程序。</li>
<li>include：存放用于本地访问的文件。</li>
<li>jre：存放 Java 运行环境文件。</li>
<li>lib：存放 Java 的类库文件，工具程序实际上使用的是 Java 类库。JDK 中的工具程序，大多也由 Java 编写而成。</li>
<li>src.zip：Java 提供的 API 类的源代码压缩文件。如果需要查看 API 的某些功能是如何实现的，可以査看这个文件中的源代码内容。</li>
</ul>
<hr>
<h2 id="第-4-节-Java-JDK环境变量配置"><a href="#第-4-节-Java-JDK环境变量配置" class="headerlink" title="第 4 节 Java JDK环境变量配置"></a>第 4 节 Java JDK环境变量配置</h2><p>JDK 安装和配置完成后，可以测试其是否能够正常运行。</p>
<p>点击“开始”|“运行”命令（快捷键：Win键 + R），在打开的“运行”对话框中输入 cmd 命令，按 Enter 键进入到 DOS 环境下。</p>
<p>在命令提示符后输入并执行 java -version 命令，系统如果输出类似图 1 所示的 JDK 版本信息，说明 JDK 已经配置成功。</p>
<p>查看JDK版本<br>图 1  查看JDK版本</p>
<p>注意：在命令提示符后输入测试命令时，需要注意 java 和减号之间有一个空格，而减号和 version 之间没有空格。</p>
<p>如果没有出现图 1 所示内容，说明 JDK 没有安装成功。另外，一些 Java 程序会通过环境变量搜索 JDK 的路径，使用压缩包安装 JDK 的方式也需要配置环境变量。下面以 Windows 7 系统为例，配置环境变量的具体步骤如下。</p>
<p>(1) 从桌面上右击“计算机”图标，从快捷菜单中选择“属性”命令，在打开的“系统属性”对话框中单击“环境变量”按钮，如图 2 所示。</p>
<p>“系统属性”对话框<br>图 2 “系统属性”对话框</p>
<p>(2) 从弹出的“环境变量”对话框中单击“系统变量”列表框下方的“新建”按钮，如图 3 所示。</p>
<p>“环境变量”对话框<br>图 3 “环境变量”对话框</p>
<p>(3) 此时会弹出“新建系统变量”对话框。在“变量名”文本框中输入 JAVA_HOME，在“变量值”文本框中输入 JDK 的安装路径，图 4 所示。最后单击“确定”按钮，保存 JAVA_HOME 变量。</p>
<p>新建JAVA_HOME系统变量<br>图 4  新建JAVA_HOME系统变量</p>
<p>(4) 在图 3 所示的“系统变量”列表框中双击 Path 变量，进入“编辑系统变量”对话框。在“变量值”文本框的最前端添加<code>.;％JAVA__HOME%\bin;</code>（注意：使用英文半角输入！）内容，如图 5 所示。最后单击“确定”按钮。</p>
<p>编辑Path系统变量<br>图 5  编辑Path系统变量</p>
<p>注意：字符串“<code>.;％JAVA_HOME%\bin;</code>”中的两个分号是不可缺少的，它们用于分隔多个环境变量。第一个分号前是一个英文状态半角下的句号，表示命令行下的当前目录；第二个分号前则是 JDK 的 bin 目录。</p>
<hr>
<h2 id="第-5-节-使用记事本编写运行Java程序"><a href="#第-5-节-使用记事本编写运行Java程序" class="headerlink" title="第 5 节 使用记事本编写运行Java程序"></a>第 5 节 使用记事本编写运行Java程序</h2><p>经过上节的操作已经配置完了 Java 的开发环境，但并不清楚所配置的开发环境是否真的可以运行 Java 应用程序。为了解除这个疑虑，也为了使读者对开发 Java 应用程序的步骤有一个初步的了解，本节将展示一个完整 Java 应用程序的开发过程。</p>
<p><strong>编写 Java 源程序</strong></p>
<p>Java 源程序可以使用任何一个文本编辑器来编写，这里以 Windows 下的记事本为例。</p>
<p>(1) 新建一个空白记事本，然后如实地输入下列内容。 很多初学者可能不明白此程序的全部意义，没关系（点击右上角复制，先完成实践），请完全按照实例的样式输入，包括各种括号与标点符号。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*第一个 java 程序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJava</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里是程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.println(<span class="string">"你好 Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面对源代码中的重要组成元素进行简单介绍。</p>
<ul>
<li>关键字 public 表示访问说明符，表明该类是一个公共类，可以控制其他对象对类成员的访问。</li>
<li>关键字 class 用于声明一个类，其后所跟的字符串是类的名称。</li>
<li>关键字 static 表示该方法是一个静态方法，允许调用 main() 方法，无须创建类的实例。</li>
<li>关键字 void 表示 main() 方法没有返回值。</li>
<li>main() 方法是所有程序的入口，最先开始执行。</li>
<li>“/*”  “*/”之间的内容和以“//”开始的内容为 Java 程序的注释。</li>
</ul>
<p>(2) 将写完代码后的文件另存为 HelloJava.java，保存类型选择“所有文件”，接着单击“保存”按钮，保存文件到 D:\myJava 文件夹中，如图 1 所示。</p>
<p>保存 HelloJava.java 文件<br>图 1  保存 HelloJava.java 文件</p>
<div class="note danger">
            <p>注意：保存的文件名中不能出现空格，类似“Hello Java.java”的文件名在编译时会出现找不到文件的错误。</p>
          </div>

<p><strong>编译和运行</strong></p>
<p>将 Java 源程序编写并保存到文件之后，还需要进行编译才能运行。编译 Java 源程序使用的是 JDK 中的 javac 命令，例如编译上节的 HelloJava.java，完整命令如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac HelloJava.java</span><br></pre></td></tr></table></figure>

<p>这里<code>javac HelloJava.java</code> 命令的作用是让 Java 编译器获取 Java 应用程序 HelloJava.java 的源代码，把它编译成符合 Java 虚拟机规范的字节码文件。这时会生成一个新文件 HelloJava.class，此文件便是我们所说的字节码文件，它也是 JVM 上的可执行文件，如图 2 所示。</p>
<p>生成HelloJava.class文件<br>图 2  生成 HelloJava.class 文件</p>
<p>运行 Java 程序需要使用 JDK 中的 java 命令，例如运行上步生成的 .class 文件，完整命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java HelloJava</span><br></pre></td></tr></table></figure>

<p>具体的执行效果如图 3 所示。</p>
<p>HelloJava执行效果<br>图 3  HelloJava执行效果</p>
<p>对图片中各个步骤的说明：</p>
<ol>
<li>选择“开始”|“运行”命令，打开“运行”对话框后输入 cmd 命令，按 Enter 键进入到 DOS 环境。</li>
<li>输入 <code>d:</code> 按 Enter 键，切换到 Java 源程序所在的 D 盘。</li>
<li>输入 <code>cd myJava</code> 命令，进入 Java 源程序所在的目录，即 d:\myJava。</li>
<li>输入 <code>javac HelloJava.java</code> 命令进行编译，此时如果没有任何其他信息，表示该源程序通过了编译；反之便说明程序中存在错误，必须在记事本中打开 HelloJava.java 文件进行修改，再次保存此文件后回到命令提示符窗口重新编译（可能要反复几次），直到编译通过为止。</li>
<li>输入 <code>java HelloJava</code> 命令执行程序，如果出现“你好 Java”字符，说明程序执行成功。</li>
</ol>
<p><strong>编译常见错误解决方法</strong></p>
<p>在使用 javac 编译器编译源代码文件时，可能会出现下面几个常见问题。</p>
<p>(1) Error:cannot read:HelloJava.java javac。<br>工具程序找不到指定的 java 文件，需要检查文件是否存储在当前目录中，或文件名是否错误。</p>
<p>(2) HelloJava.java:4:class HelloJava is public,should be declared in a file named MyApplication.java。<br>源文件中类的名称和源文件名称不符，需要确定源文件名称和类名称是否相同。</p>
<p>(3) HelloJava.java:6:cannot find symbol。<br>源程序文件中某些代码部分输入错了，最常产生的原因可能是没有注意到字母的大小写。</p>
<p>(4) Javac 不是内部或外部命令、可执行程序或批量文件。<br>path 设置有误或没有在 path 系统变量中加入 JDK 的 bin 目录。</p>
<p>如果没有出现上述所列问题，即成功编译了该 Java 文件。在解释执行 .class 文件时，可能会出现下面几个常见问题。</p>
<p>(1) Exception in thread “main” java.lang.NoClassDe£FoundError。<br>Java 工具程序找不到所指定的 .class 类，需要确定指定的类是否存储在当前目录中，名称是否正确。</p>
<p>(2) Exception in thread “main” java.lang.NoSuchMetliodError:main。<br>没有指定 Java 程序的入口。Java 工具程序指定的类必须有一个程序入口，也就是必须包括 main(String args[]) 这个方法。</p>
<p>提示：在后面的章节中，如果不是特别强调，就不再重复介绍如何编译与解释执行 Java 程序。</p>
<hr>
<h2 id="第-6-节-Java编程规范（命名规则）"><a href="#第-6-节-Java编程规范（命名规则）" class="headerlink" title="第 6 节 Java编程规范（命名规则）"></a>第 6 节 Java编程规范（命名规则）</h2><p>编程规范是对编程的一种约定，主要作用是增强代码的可读性和可维护性，便于代码重用。</p>
<p>首先要求程序中的各个要素都遵守命名规则，然后在编码中严格按照编码格式编写代码。命名规则包括以下几点。</p>
<ul>
<li>包的名称由一个小写字母序列组成。</li>
<li>类的名称由大写字母开头，其他字母都由小写的单词组成。</li>
<li>类的实例的名称由一个小写字母开头，后面的单词由大写字母开头。</li>
<li>常量的名称都大写，并且指出完整含义。</li>
<li>参数的名称无其他具体规定。</li>
<li>数组的命名使用“<code>类型[] 数组名</code>”的形式。</li>
</ul>
<p>另外，编码格式规定如下。</p>
<ul>
<li>程序最开始编写导入包和类语句，即 import 语句。import 语句可以有多行，编写完 import 语句后空一行。</li>
<li>定义 public 类，顶格书写。类的主体左括号“{”不换行书写，右括号“}”顶格书写。</li>
<li>定义 public 类中的变量，缩进书写。</li>
<li>定义方法用缩进书写，方法的左括号“{”不换行书写，右括号“}”和方法首行第一个字符对齐。方法体要再次缩进书写，最后一个变量定义和第一个方法定义之间、方法和方法之间最好空一行。</li>
</ul>
<p>提示：在单一的语句后有“;”，在一对括号“{}“之外无“;”。方法调用名和紧跟在其后的左括号“(”无空格，该左括号和其后的标识符之间无空格。多个参数之间的逗号和前一个参数紧靠，与后一个参数空一格。</p>
<hr>
<h2 id="第-7-节-Java程序的运行过程（执行流程）分析"><a href="#第-7-节-Java程序的运行过程（执行流程）分析" class="headerlink" title="第 7 节 Java程序的运行过程（执行流程）分析"></a>第 7 节 Java程序的运行过程（执行流程）分析</h2><p>万事知其然，要知其所以然，所以本节带大家来详细了解一下 Java 程序的执行过程。</p>
<p>从《使用记事本编写运行Java程序》一节的案例可以看出，Java 程序的运行必须经过编写、编译和运行 3 个步骤。</p>
<ol>
<li>编写：是指在 Java 开发环境中进行程序代码的输入，最终形成后缀名为 .java 的 Java 源文件。</li>
<li>编译：是指使用 Java 编译器对源文件进行错误排査的过程，编译后将生成后缀名为 .class 的字节码文件，不像C语言那样生成可执行文件。</li>
<li>运行：是指使用 Java 解释器将字节码文件翻译成机器代码，执行并显示结果。</li>
</ol>
<p>Java 程序运行流程如图 1 所示。</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-7-1.png" alt="图 1  Java程序运行流程"></p>
<p>字节码文件是一种和任何具体机器环境及操作系统环境无关的中间代码。它是一种二进制文件，是 Java 源文件由 Java 编译器编译后生成的目标代码文件。编程人员和计算机都无法直接读懂字节码文件，它必须由专用的 Java 解释器来解释执行，因此 Java 是一种在编译基础上进行解释运行的语言。</p>
<p>Java 解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码，以便执行。因此 Java 程序不能直接运行在现有的操作系统平台上，它必须运行在被称为 Java 虚拟机的软件平台之上。</p>
<p>Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是 Java 虚拟机的一部分。在运行 Java 程序时，首先会启动 JVM，然后由它来负责解释执行 Java 的字节码程序，并且 Java 字节码程序只能运行于 JVM 之上。这样利用 JVM 就可以把 Java 字节码程序和具体的硬件平台以及操作系统环境分隔开来，只要在不同的计算机上安装了针对特定平台的 JVM，Java 程序就可以运行，而不用考虑当前具体的硬件平台及操作系统环境，也不用考虑字节码文件是在何种平台上生成的。</p>
<p>JVM 把这种不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。JVM 是 Java 平台架构的基础，Java 的跨平台特性正是通过在 JVM 中运行 Java 程序实现的。</p>
<p>Java 的这种运行机制可以通过图 2 来说明。</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-7-2.png" alt="图 2  JVM工作方式"></p>
<p>Java 语言这种“一次编写，到处运行”的方式，有效地解决了目前大多数高级程序设计语言需要针对不同系统来编译产生不同机器代码的问题，即硬件环境和操作平台的异构问题，大大降低了程序开发、维护和管理的开销。</p>
<div class="note danger">
            <p>提示：Java 程序通过 JVM 可以实现跨平台特性，但 JVM 是不跨平台的。也就是说，不同操作系统之上的 JVM 是不同的，Windows 平台之上的 JVM 不能用在 Linux 平台，反之亦然。</p>
          </div>

<hr>
<h2 id="第-8-节-Java虚拟机（JVM）及Java跨平台原理"><a href="#第-8-节-Java虚拟机（JVM）及Java跨平台原理" class="headerlink" title="第 8 节 Java虚拟机（JVM）及Java跨平台原理"></a>第 8 节 Java虚拟机（JVM）及Java跨平台原理</h2><p>在 Java 语言白皮书上面有这样一段话：Java 是一种简单的，面向对象的，适用于网络应用的，平台无关的，解释的，健壮的，安全的，结构自然的，可移植的，高性能的，多线程的，动态的语言。</p>
<p>就单从平台无关这一点上面来说，就已经超越 C/C++ 一大截了。就比如说我们在 Windows 下面写出来的一段 Java 程序，换成 Linux，macOS 系统里面，一样可以正常运行并且输出相同的结果，但是这一点，换成 C/C++ 却很难办到。那么跨平台的特性，就是 JVM 决定的了。</p>
<p><strong>JVM 的专业解释如下：</strong></p>
<p>Java 虚拟机（Java Virtual Machine，简称 JVM）是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java 虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。JVM 在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>
<p>上面的解释看不懂也比较正常，本来不想把专业解释放上来的，想了想还是算了，毕竟还是要让大家对 JVM 有一点详细的认识。如果看不懂专业解释的话，我就用大白话给大家说：</p>
<p>JVM，也就是 Java 虚拟机，就是一个平台，包含于 JRE 的下面。当你需要执行某个 Java 程序时，由 JVM 帮你进行编译和执行。我们编写的 Java 源码，编译后会生成一种 .class 文件，称为字节码文件。Java 虚拟机就是负责将字节码文件翻译成特定平台下的机器码然后运行。</p>
<p>而且，如图 1 所示。</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-8-1.png" alt="图 1  JVM 实现跨平台"></p>
<p>JVM 分为很多个系统版本的，你编写好的 Java 程序，无论到哪个平台上，Windows 也好，Linux 也好，macOS 也好，只需要找到 JVM，便可以成功编译和执行。也就是说，只要在不同平台上安装对应的 JVM，就可以运行字节码文件，运行我们编写的 Java 程序。所以这也就是 Java 跨平台性良好，平台无关特性的来历。</p>
<p>而这个过程中，我们编写的 Java 程序没有做任何改变，仅仅是通过 JVM 这一”中间层“，就能在不同平台上运行，真正实现了”一次编译，到处运行“的目的。</p>
<p>JVM 是一个“桥梁”，是一个“中间件”，是实现跨平台的关键，Java 代码首先被编译成字节码文件，再由 JVM 将字节码文件翻译成机器语言，从而达到运行 Java 程序的目的。</p>
<div class="note danger">
            <p>注意：编译的结果不是生成机器码，而是生成字节码，字节码不能直接运行，必须通过 JVM 翻译成机器码才能运行。不同平台下编译生成的字节码是一样的，但是由 JVM 翻译成的机器码却不一样。<br>所以，运行 Java 程序必须有 JVM 的支持，因为编译的结果不是机器码，必须要经过 JVM 的再次翻译才能执行。即使你将 Java 程序打包成可执行文件（例如 .exe），仍然需要 JVM 的支持。</p>
          </div>

<div class="note danger">
            <p>注意：跨平台的是 Java 程序，不是 JVM。JVM 是用 C/C++ 开发的，是编译后的机器码，不能跨平台，不同平台下需要安装不同版本的 JVM。</p>
          </div>

<p><strong>关于 JVM 的执行效率</strong></p>
<p>Java 推出的前几年，人们有不同的看法，解释字节码肯定比全速运行机器码慢很多，牺牲性能换来跨平台的优势是否值得？</p>
<p>然而，JVM 有一个选项，可以将使用最频繁的字节码翻译成机器码并保存，这一过程被称为即时编译。这种方式确实很有效，致使微软的 .NET 平台也使用了虚拟机。</p>
<p>现在的即时编译器已经相当出色，甚至成了传统编译器的竞争对手，某些情况下甚至超过了传统编译器，原因是 JVM 可以监控运行时信息。例如，即时编译器可以监控使用频率高的代码并进行优化，可以消除函数调用（即“内嵌”）。</p>
<p>但是，Java 毕竟有一些 C/C++ 没有的额外的开销，关键应用程序速度较慢。比如 Java 采用了与平台无关的绘图方式，GUI 程序（客户端程序）执行要慢；虚拟机启动也需要时间。</p>
<p><strong>客户端市场的折戟</strong></p>
<p>Java 的 GUI 库称不上出色，界面不算友好，大部分用户不太习惯；Java 的客户端资源消耗也比较大，大数据量的应用和功能复杂的应用性能堪忧。</p>
<p>更加不能接受的是，微软因自身利益和 SUN 分家后，Windows  便不再预装 JVM 了，用户安装你的程序之前，必须要安装 JVM 并正确设置，你可以要求普通用户安装你的软件，但是你能期望他了解 JVM 的有关知识并正确安装设置吗？</p>
<p>虽然你可以将 JVM 集成在你的程序中，自动安装并设置，不让用户干预，但是你希望附带一个比你的程序还要大好多的 JVM 吗？一个软件这样做或许可以接受，成千上万个软件都这样做，那用户要安装多少个 JVM？磁盘空间要浪费多少？</p>
<p>所以，直接投放市场的面向普通用户的客户端程序，用 Java 开发的很少，大部分 Java 开发的客户端是给企业内部员工使用，员工领到电脑时，技术部已经给配置好了。如果你希望从事客户端开发，建议学习 C/C++ 和 .NET，它们在 Window 客户端开发方面有较大的优势。</p>
<p>种种原因，注定了 Java 客户端不利于推向市场，让普通用户接受。不过话又说回来，客户端开发也不是 Java 的初衷，Java 最初是面向嵌入式的，却随着互联网的兴起而快速成长，在 Web 开发上大显身手。</p>
<hr>
<h2 id="第-9-节-Java中JVM、JRE和JDK三者有什么区别和联系？"><a href="#第-9-节-Java中JVM、JRE和JDK三者有什么区别和联系？" class="headerlink" title="第 9 节 Java中JVM、JRE和JDK三者有什么区别和联系？"></a>第 9 节 Java中JVM、JRE和JDK三者有什么区别和联系？</h2><p>任何语言或者软件的运行都需要环境。就像人要生活在空气中，鱼要活在水中，喜阴植物就不能放在阳光下暴晒一样，任何对象个体的存在都离不开其所需要的环境，编程语言亦是一样的。</p>
<p>Java 语言的开发运行，也离不开 Java 语言的运行环境 JRE。没有 JRE 的支持，Java 语言便无法运行。当然，如果还想编译 Java 程序，搞搞小开发的话，JRE 是明显不够了，这时候就需要 JDK。</p>
<p>其实，JDK 就是 JRE 加上一些常用工具组成的。JDK 不仅能运行已经被编译好的 Java 程序，还能支持我们编译 Java 程序（JDK=JRE+各种工具）。</p>
<p>在《JVM及Java跨平台原理》一节中，我们学习了 Java 虚拟机 JVM。那么 JDK，JVM 和 JRE，那他们三个有什么区别呢？又有什么联系呢？如果你学到这里产生这样一个疑问，我想说，你到目前为止，学的很不错！那现在整理一下三者的关系和区别吧：</p>
<ul>
<li>JDK（Java Development Kid，Java 开发开源工具包），是针对 Java 开发人员的产品，是整个 Java 的核心，包括了 Java 运行环境 JRE、Java 工具和 Java 基础类库。</li>
<li>JRE（Java Runtime Environment，Java 运行环境）是运行 Java 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。</li>
<li>JVM（Java Virtual Machine，Java 虚拟机）是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。</li>
</ul>
<p>所以说大家看出来三者的关系了吗？其实如下图所示：</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-9-1.jpg" alt="图 1  "><br><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-9-2.png" alt="图 2  "></p>
<p>由图中可以看出以下几点：</p>
<ul>
<li>JDK=JRE+多种Java开发工具</li>
<li>JRE=JVM+各种类库</li>
</ul>
<p>这三者的关系是一层层的嵌套关系。JDK&gt;JRE&gt;JVM</p>
<hr>
<h2 id="第-10-节-Java和C-C-到底有什么关系？它们有什么区别？"><a href="#第-10-节-Java和C-C-到底有什么关系？它们有什么区别？" class="headerlink" title="第 10 节 Java和C/C++到底有什么关系？它们有什么区别？"></a>第 10 节 Java和C/C++到底有什么关系？它们有什么区别？</h2><p>自 2001 年起，TIOBE 编程语言排行榜的三甲位置一直被 Java、C 与 C++ 长期占据。那么这一节就跟大家简单说一说 Java 和 C/C++ 之间的关系和发展历程。</p>
<p>大家知道，编程语言的发展，其实是经过了三个比较大的阶段阶段，那就是汇编语言 –&gt;  面向过程语言 -&gt;面向对象语言。（第一代计算机语言：机器语言 –&gt;  第二代计算机语言：汇编语言 –&gt;  第三代计算机语言：高级语言（C、C++、Java等））</p>
<p>汇编语言由于其难度太大，需要记忆的语句命令过多，但是其对计算机底层的控制和操作能力还是很强大的，由于学习成本太大，效率较低，已经不作为现在计算机系的重点教程了。</p>
<p>C语言可以作为面向过程语言的一种代表，算是一种比较纯正的面向过程语言了。而面向过程的语言也称为结构化程序设计语言，是高级语言的一种。在面向过程程序设计中，问题被看作一系列需要完成的任务，函数则用于完成这些任务，解决问题的焦点集中于函数。所以说C语言的基本单位也是函数。</p>
<p>其概念最早由 E．W．Dijikstra 在 1965 年提出，它的主要观点是采用自顶向下、逐步求精的程序设计方法，使用三种基本控制结构构造程序，即任何程序都可由顺序、选择（if-else，switch-default）、循环（for，while，do-while）三种基本控制结构构造。</p>
<p>像C语言这种面向过程语言的最大的优势就是适合模块化设计。一个程序可以分解为多个函数，通过函数调用过程，使得可以用一条函数调用语句实现函数所完成的复杂运算过程。这种方法使得可以将一个复杂问题的解决过程分解为较为简单的几个子问题的解决过程。</p>
<p>首先通过编写函数用语句描述解决每一个子问题的解决过程的步骤，然后可以用一条函数凋用语句描述解决某个子问题的过程的步骤，最后在一个主程序中用多条函数调用语句描述解决分解为多个子问题的复杂问题的解决过程的步骤。</p>
<p>但是当我们在做研发系统诸如此类的问题时，开始肯定不清楚这个系统完工后的架构是怎么样的，所以说，利用模块化设计的语言，就很难对开发出来的系统进行调整（或者工作量会很大）。在此类诸多问题的压力下，面向对象语言便体现出了其独一无二的优势。</p>
<p>面向对象语言，OOP（Object-Oriented Programming），是一类以对象作为基本程序结构单位的程序设计语言。Java 便就是面向对象编程中的一种代表性语言。</p>
<table>
<thead>
<tr>
<th>编程语言</th>
<th align="center">问世时间</th>
</tr>
</thead>
<tbody><tr>
<td>C 语言</td>
<td align="center">19 世纪 70 年代初问世，1978 年美国电话电报公司（AT&amp;T）贝尔实验室正式发布C语言。</td>
</tr>
<tr>
<td>C++</td>
<td align="center">在 C 基础上，1983 年贝尔实验室推出了 C++。</td>
</tr>
<tr>
<td>Java</td>
<td align="center">由 Sun 公司于 1995 年 5 月推出。</td>
</tr>
</tbody></table>
<p>然而，C++ 在面向对象上做的并不是太好，比如说 C++ 支持多继承，多继承会引发不确定性。C++ 同时支持指针，指针直接对内存底层操作，虽然效率高，危险系数却非常高，比如，一个简单的病毒程序就可以靠指针完成：你通过指针给程序中的一个变量随机赋值，能够获取到访问不属于本程序执行空间的其他空间的权限，那么这也就是一个计算机病毒。</p>
<p>当然，真正的病毒不可能那么简单，但这是基本特性，所以 Java 在 C++ 的基础上移除了指针，增加了引用，提高了安全性。</p>
<p>Java 是由 C++发展而来的，保留了 C++ 的大部分内容，其编程方式类似于 C++。但 Java 的句法更清晰、规模更小、更易学。Sun 公司曾对多种程序设计语言进行分析研究，取其精华去其糟粕，最终推出了 Java。Java 从根本上解决了 C++ 的固有缺陷，形成了新一代面向对象的程序设计语言。</p>
<p>Java 和 C/C++ 的相似之处多于不同之处，有 C 基础的读者，学习 Java 会更容易。相较而言，Java 的编程环境更为简单。</p>
<p>在 C++ 中，假如你写同样一个程序，在 Java 里面会报错，而在 C++ 语言里面是不会报错的。为什么？因为 C/C++ 语言设计的思想是：你想怎么写程序就怎么写，只要你的这种写法错得不是很离谱，就认为你这么写有特殊的含义，可以通过。但 Java 不行：只要你这么写有歧义，或者说这样写不太好，那么它都会报错。</p>
<p>比如 C++ 中你可以将一个浮点型数据赋给一个整型变量，编译时只会警告，因为会丢失精度，但是在 Java 中这样写就会报错，它在语法上就禁止你这样写。这就是不同的语言对同样一个问题有不同的理解和处理方式。</p>
<p>由于 C++ 中大大小小的问题会导致不安全性，所以就在 C++ 的基础上，取其精华，去其糟粕，便形成了早期的 Java 语言。直到现在，Java 又多了很多新的特性，比如说集合，反射，泛型，Lambda 表达式等等。所以，正因为 C -&gt; C++ -&gt; Java 的发展历史，所以导致了 Java 在一定程度上继承了多数C语言的语法，但又有一定的改变。</p>
<p>以下整理了 Java 和 C/C++ 的 10 条不同之处。</p>
<ol>
<li>C++ 支持指针，而 Java 没有指针的概念。</li>
<li>C++ 支持多继承，而 Java 不支持多重继承，但允许一个类实现多个接口。</li>
<li>Java 是完全面向对象的语言，并且还取消了 C/C++ 中的结构和联合，使编译程序更加简洁</li>
<li>Java 自动进行无用内存回收操作，不再需要程序员进行手动删除，而 C++ 中必须由程序释放内存资源，这就增加了程序员的负担。</li>
<li>Java 不支持操作符重载，操作符重载则被认为是 C++ 的突出特征。</li>
<li>Java 允许预处理，但不支持预处理器功能，所以为了实现预处理，它提供了引入语句（import），但它与 C++ 预处理器的功能类似。</li>
<li>Java 不支持缺省参数函数，而 C++ 支持 。</li>
<li>C 和 C++ 不支持字符串变量，在 C 和 C++ 程序中使用“Null”终止符代表字符串的结束。在 Java 中字符串是用类对象（String 和 StringBuffer）来实现的</li>
<li>goto 语句是 C 和 C++ 的“遗物”，Java 不提供 goto 语句，虽然 Java 指定 goto 作为关键字，但不支持它的使用，这使程序更简洁易读。</li>
<li>Java 不支持 C++ 中的自动强制类型转换，如果需要，必须由程序显式进行强制类型转换。</li>
</ol>
<hr>
<h2 id="第-11-节-Java常用开发工具有哪些？"><a href="#第-11-节-Java常用开发工具有哪些？" class="headerlink" title="第 11 节 Java常用开发工具有哪些？"></a>第 11 节 Java常用开发工具有哪些？</h2><p>本节介绍一下 Java 常用的几个开发工具。下面这些工具或许功能和作用不同，但是有着一个共同的主旨，那就是——它们都是为了给 Java 编码和开发提供卓越的支持。</p>
<p><strong>常用源码编辑工具介绍</strong></p>
<p>Java 源代码本质上其实就是普通的文本文件，所以理论上来说任何可以编辑文本文件的编辑器都可以作为我们的 Java 代码编辑工具。比如：Windows 记事本，Mac OS X 下的文本编辑，Linux 下的 vi、emacs、gedit、DOS 下的 edit 等。但是这些简单工具没有语法的高亮提示、自动完成等功能，这些功能的缺失会大大降低代码的编写效率。</p>
<p>所以学习开发时一般我们不会选用这些简单文本编辑工具。我们一般会选用一些功能比较强大的类似记事本的工具，比如： Notepad++、Sublime Text、editplus、ultraedit、vim 等。下面我们分别具体介绍一下它们的优缺点，方便大家找到适合自己开发工具。</p>
<p>大家可以点击文中蓝色的工具名称，直接进入官网下载。</p>
<p>（1）Notepad++<br>Notepad++ 是 Windows 操作系统下的一套文本编辑器，有完整的中文化接口及支持多国语言编写的功能（UTF8 技术）。</p>
<p>Notepad++ 优点：</p>
<ul>
<li>功能比 Windows 中的 Notepad（记事本）强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。</li>
<li>不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。</li>
<li>是免费软件，可以免费使用，自带中文，支持所有主流的计算机程序语言。</li>
</ul>
<p>Notepad++ 缺点：</p>
<ul>
<li>比起专用的 IDE 缺少语法检查，颜色选取，代码的 outline，注释的解析，TODO，调试工具集成，部署工具集成等等好多功能。</li>
<li>打开大文件比较慢</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-1.png" alt="Java 开发工具 Notepad++"></p>
<p>（2）EditPlus<br>EditPlus 是一款由韩国 Sangil Kim （ES-Computing）出品的小巧但是功能强大的可处理文本、HTML 和程序语言的 Windows 编辑器，甚至可以通过设置用户工具将其作为 C，Java，Php 等等语言的一个简单的 IDE。</p>
<p>EditPlus 优点：</p>
<ul>
<li>EditPlus 界面简洁美观，且启动速度快。</li>
<li>对中文支持比较好。</li>
<li>支持多种日期、时间输入；支持语法高亮；支持代码折叠；支持代码自动完成。</li>
<li>配置功能强大，且比较容易，扩展也比较强。</li>
<li>适合编辑网页。</li>
</ul>
<p>EditPlus 缺点：</p>
<ul>
<li>不支持代码提示功能。</li>
<li>不免费，收费单位美元，注册费用高</li>
<li>功能较简单。</li>
<li>版本更新比较慢。</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-2.png" alt="Java 开发工具 EditPlus"></p>
<p>（3）UltraEdit<br>UltraEdit 是一套功能强大的文本编辑器，可以编辑文本、十六进制、ASCII 码，完全可以取代记事本，它是一款需要花费 49.95 美元的共享软件。</p>
<p>UltraEdit 优点：</p>
<ul>
<li>提供了友好界面的编程编辑器，支持语法高亮，代码折叠和宏。</li>
<li>内置了对于 HTML、PHP 和 JavaScript 等语法的支持，可同时编辑多个文件，而且即使开启很大的文件速度也不会慢。</li>
</ul>
<p>UltraEdit 缺点：</p>
<ul>
<li>启动速度较慢。</li>
<li>默认的设置中不支持 Pascal 语言。</li>
<li>对中文支持不是很好。</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-3.png" alt="Java 开发工具 Ultraedit"></p>
<p>（4）Sublime Text<br>Sublime Text 是由程序员 Jon Skinner 于 2008 年 1 月份所开发出来，它最初被设计为一个具有丰富扩展功能的 Vim。</p>
<p>它是一款收费软件，但是可以无限期试用，它是一个跨平台的编辑器，同时支持 Windows、Linux、Mac OS X 等操作系统。</p>
<p>Sublime Text 优点：</p>
<ul>
<li>主流前端开发编辑器</li>
<li>体积较小，运行速度快</li>
<li>文本功能强大</li>
<li>支持编译功能且可在控制台看到输出</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-4.png" alt="Java 开发工具 Sublime Text"></p>
<p>（5）Vim<br>Vim 是从 Vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。是 Unix 系统用户最喜欢的文本编辑器。</p>
<p>Vim 优点：</p>
<ul>
<li>支持多种操作系统</li>
<li>打开大文件速度较快，在大文件中查找的速度也非常快。</li>
<li>免费，开源</li>
<li>有搜索高亮功能</li>
<li>支持多中编辑语言</li>
<li>功能强大</li>
</ul>
<p>Vim 缺点：</p>
<ul>
<li>比较难学</li>
<li>虽然有菜单，但 Windows 用户第一次上手会很难</li>
<li>界面不太好看</li>
<li>键盘命令多，必须长期使用才能熟练。</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-5.png" alt="Java 开发工具 Vim"></p>
<p><strong>集成开发工具介绍</strong></p>
<p>Java 初学者为了能更好的掌握 Java 代码的编写，我们一般会选用一款高级记事本类的工具作为开发工具， 而实际项目开发时，更多的还是选用集成 IDE 做为开发工具，比如当下最流行的两款工具：Eclipse、IDEA。</p>
<p>所谓集成 IDE 就是把代码的编写、调试、编译、执行都集成到一个工具中了，不用单独在为每个环节使用工具。</p>
<p>（1）Eclipse IDE<br>Eclipse 是一个开放源码的项目，是著名的跨平台的自由集成开发环境（IDE），最初主要用来 Java 语言开发，后来通过安装不同的插件 Eclipse 可以支持不同的计算机语言，比如 C++ 和 Python 等开发工具。</p>
<p>Eclipse 优点：</p>
<ul>
<li>能提供关于代码完成、重构和语法检查这些急需的帮助。</li>
<li>能提供 JDT 的一系列工具，包括各种插件工具来帮助开发各种 Java 应用。</li>
<li>允许开发人员使用不同的语言支持，如它也可以提供 C/C++ 和 PHP 的 IDE。这使得它成为了 Java 开发的一个一站式资源。</li>
<li>Eclipse 是免费的，这点很重要，所以大多公司里依然是使用 Eclipse 这款 IDE，而且它良好的性能，也在市场占着不小的比重。</li>
</ul>
<p>Eclipse 缺点：</p>
<ul>
<li>版本间不兼容，特别是插件，在一个版本下可以很好工作，在另一个版本下就完全无法工作，就算两个版本的版本号只有微小的差异。</li>
<li>与 JDK 捆绑过于紧密。当 JDK 新的版本出来后，Eclipse 一般要滞后很长一段时间才有一个新版本支持新的 JDK，然后等各个插件能在新版本的 Eclipse 下使用又要过很长时间。</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-6.png" alt="Java 开发工具 Eclipse"></p>
<p>（2）MyEclipse<br>MyEclipse 是同 Eclipse 一个公司的，在功能上增加了不少，相对于 Eclipse 来说，MyEclipse 更像将 Eclipse 中好多插件都集成起来了，当然，性能上面也有更好的考虑，不过这款 IDE 是收费的。</p>
<p>因 MyEclipse 属于收费软件，所以大公司很少使用。</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-7.png" alt="Java 开发工具 MyEclipse"></p>
<p>（3）Intellij IDEA<br>Intellij IDEA 简称 IDEA，具有美观，高效等众多特点。IDEA 是 JetBrains 公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持 HTML，CSS，PHP，MySQL，Python 等。免费版只支持 Java 等少数语言。</p>
<p>据传它有“最智慧的 Java ide”之称。它能帮助开发人员拿出最具有创造性的解决方案。它的“Smart Code Completion”和“On-the-fly Code Analysis”功能等可以提高开发人员的工作效率，并且还提供了对 web 和移动开发高级支持。</p>
<p>IDEA 缺点：</p>
<ul>
<li>编辑超大文件不靠谱，易卡顿或直接卡死。</li>
<li>相对于一些专用工具，显得不够专业：比如批量修改项目中的文件编码效果就很差劲。</li>
<li>消耗大量硬件资源，IntelliJ IDEA 要求内存大，并且还要用的流畅还需要固态硬盘辅助。比如在做微服务类的项目的时候，一般需要同时启动多个项目，内存一会就上来的，8G 内存完全不够用的。</li>
</ul>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-8.png" alt="Java 开发工具 Intellij IDEA"></p>
<p>（4）NetBeans<br>NetBeans 是业界第一款支持创新型 Java 开发的开放源码 IDE。开发人员可以利用业界强大的开发工具来构建桌面、Web 或移动应用。同时，通过 NetBeans 和开放的 API 的模块化结构，第三方能够非常轻松地扩展或集成 NetBeans 平台。 </p>
<p>NetBeans IDE 目前支持 PHP、Ruby、JavaScript、Ajax、Groovy、Grails 和 C/C ++ 等开发语言。</p>
<p>NetBeans 是甲骨文公司生产的 IDE，在其中也内置了许多功能，相对于 idea 和 Eclipse 市场还是较少的。</p>
<p>NetBeans 提供了功能全面的阵列。如转换器，编辑器和代码分析器，这些工具可以帮助你使用最新的 Java 技术实现应用程序。工具范围相当广泛，而且 IDE 背后的团队也在不断地改进。此外你还可以得到静态分析工具的帮助——编写出无 bug 的代码。</p>
<p><img src="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/java-base-course-1-11-9.png" alt="Java 开发工具 NetBeans"></p>
<p>在使用这些开发工具之前，我们最好能熟知这些软件的优点和缺点，以便根据实际情况选择应用。编程工具只是工具，为了方便人们工作而开发的，各有特点，因此，选工具主要的依据自己将要从事的领域是什么，而不是盲目的认为那种工具好，那种工具不好。看完这篇文章后希望大家都能找到自己合适的 Java 开发工具。</p>
<hr>
<h2 id="第-12-节-Java-Eclipse下载安装教程"><a href="#第-12-节-Java-Eclipse下载安装教程" class="headerlink" title="第 12 节 Java Eclipse下载安装教程"></a>第 12 节 Java Eclipse下载安装教程</h2><p>学习 Java 语言程序设计必须选择一个功能强大、使用简单，能够辅助程序设计的 IDE。</p>
<p>Eclipse 是目前最流行的 Java 语言开发工具，它强大的代码辅助功能，可以帮助开发人员自动完成语法修正、补全文字、代码修复、API 提示等编码工作，大量节省程序开发所需的时间。</p>
<p>本教程使用 Eclipse 为开发工具，下面介绍它的安装。</p>
<p>(1) Eclipse 是一个开放源代码的项目，其官方网站是 <a href="http://www.eclipse.org。图" target="_blank" rel="noopener">www.eclipse.org。图</a> 1 所示为 Eclipse 官方网站的首页。</p>
<p>Eclipse官网首页<br>图1 Eclipse官网首页</p>
<p>(2) 从首页中单击 DOWNLOAD 按钮，进入图 2 所示的页面。</p>
<p>跳转页面<br>图2 跳转页面</p>
<p>(3) 点击 Download Packages，进入 Eclipse 下载页面。从 Eclipse IDE for Java EE Developers 后面选择适合当前系统的版本，这里单击 64 bit 按钮，下载 64 位的安装包，如图 3 所示。</p>
<p>下载Eclipse<br>图3 下载Eclipse</p>
<p>(4) 点击“64-bit”后跳转到“Choose a mirror close to you”界面。点击“Sellect Another Mioor”，选择“大连东软信息学院”，如图 4 所示。</p>
<p>图4 Choose a mirror close to you界面</p>
<p>(5) 下载完成后或者下载没有开始，进入如下所示的页面。如果下载没有开始，点击“click here”重新开始下载。</p>
<p>下载完成<br>图5 下载完成</p>
<p>下载完成后会得到一个名为 eclipse_java_mars_2_win32_x86_64.zip 的压缩文件。虽然 Eclipse 本身是用 Java 语言编写，但下载的压缩包中并不包含 Java 运行环境（即安装 Eclipse，应首先安装 JDK），需要用户自己另行安装 JRE，并且要在操作系统的环境变量中指明 JRE 中 bin 的路径。</p>
<p>(6) Eclipse 的安装非常简单，只需将下载的压缩包进行解压，然后双击 eclipse.exe 文件即可。Eclipse 第一次启动时会要求用户选择一个工作空间（Workspace），如图 6 所示。</p>
<p>选择Eclipse的工作空间<br>图6 选择Eclipse的工作空间</p>
<p>由于 Eclipse 是一个开源项目，因此所有社区和开发者都可以为 Eclipse 开发扩展功能。下面介绍为 Eclipse 安装汉化包的方法。</p>
<p>(7) Eclipse 有一个子项目 Babel，专门负责 Eclipse 程序的多国语言包，其官方网站是 <a href="http://www.eclipse.org/babel，进入后的" target="_blank" rel="noopener">www.eclipse.org/babel，进入后的</a> Babel 项目首页如图 7 所示。</p>
<p>Babel项目首页<br>图7 Babel项目首页</p>
<p>(8) 从页面导航中单击 Downloads 链接进入下载页面。在下载页面的 Babel Language Pack Zips 标题下选择对应 Eclipse 版本的超链接下载语言包。前面下载 Eclipse 的安装文件是 eclipse_java_mars_2_win32_x86_64.zip，因此这里单击 Mars 链接，如图 8 所示。</p>
<p>选择Eclipse版本<br>图8 选择Eclipse版本</p>
<p>(9) 在进入的语言选择页面中列出了当前支持的所有语言列表，从中单击 Chinese(Simplified) 链接进入简体中文的下载列表，在这里又针对不同插件和功能分为多个 ZIP 压缩包。从列表中单击 BabelLanguagePack_birt_zh_4.5.0.v20151128060001.zip 链接，下载完整版语言包，如图 9 所示。</p>
<p>选择简体中文语言包<br>图9 选择简体中文语言包</p>
<p>(10) 下载后会得到 BabelLanguagePack_birt_zh_4.5.0.v20151128060001.zip 文件，将其解压并覆盖 Eclipse\drogins文件夹中同名的 features 目录和 plugins 目录，这样下次启动 Eclipse 时便会自动加载语言包。</p>
<p>(11) 在工作空间选择页面中，单击“浏览”按钮，将工作空间放到 E:\java_workspace，然后选中“将此值用作缺省值并且不再询问”复选框，再单击“确定”按钮。</p>
<p>(12) 启动 Eclipse，进入 Eclipse 的欢迎界面。选择“帮助”|“关于 Eclipse”命令，可以在弹出的对话框中查看当前 Eclipse 的详细信息。</p>
<hr>
<h2 id="第-13-节-使用Eclipse开发第一个Java程序"><a href="#第-13-节-使用Eclipse开发第一个Java程序" class="headerlink" title="第 13 节 使用Eclipse开发第一个Java程序"></a>第 13 节 使用Eclipse开发第一个Java程序</h2><p>虽然在《使用记事本编写运行Java程序》一节中已经开发过一个 Java 程序，但是那毕竟是通过记事本创建的。在上一节《Java Eclipse下载安装教程》中，我们已经安装了 Eclipse 工具，因此本节将介绍如何通过 Eclipse 开发 Java 程序。</p>
<p>在 Eclipse 中编写程序，必须先创建项目。Eclipse 中有很多项目，其中 java 项目用于管理和编写 Java 程序，具体步骤如下。</p>
<p>(1) 在图 1 所示的界面中选择“file（文件）”|“new（新建）”|“Java Project（Java项目）”命令，打开“New Java Project（新建Java项目）”对话框。</p>
<p>(2) 设置“Project name（项目名）”为 HelloJava，选中“Use default location（使用缺省位置）”复选框，将项目保存到工作空间中，其他暂时不用设置，如图 1 所示。</p>
<p>New Java Project（新建Java项目）对话框<br>图 1  New Java Project（新建Java项目）对话框</p>
<p>(3) 单击“Next（下一步）”按钮，在进入的对话框中更改项目的 Sourse（源码）选项，如图 2 所示。同时还可以设置 Project（项目）、Libraries（库）、Order and Export（排序和导出）方面的选项，分别如图 3、图 4 和图 5 所示。</p>
<p>设置Sourse（源码）选项<br>图 2  设置Sourse（源码）选项</p>
<p>设置Project（项目）选项<br>图 3  设置Project（项目）选项</p>
<p>设置Libraries（库）选项<br>图 4  设置Libraries（库）选项</p>
<p>设置Order and Export（排序和导出）选项<br>图 5  设置Order and Export（排序和导出）选项</p>
<p>(3) 单击“Finish（完成）”按钮，创建名为 HelloJava 的项目，Eclipse 会自动生成相关代码和布局结构。在 Eclipse 左侧“Package Explorer（包资源管理器）”窗格中会显示整个 Java 项目的目录结构，默认为空项目。</p>
<p>(4) 右击 src 目录，选择“new（新建）”|“Class（类）” 命令，打开“New Java Class（新建 Java 类）”对话框。设置类的名称为 HelloJava，并选中 public static void main(String[] args) 复选框为新类生成 main() 方法，如图 6 所示。</p>
<p>New Java Class（新建Java类）对话框<br>图 6  New Java Class（新建Java类）对话框</p>
<p>(7) 最后单击“Finish（完成）”按钮，会看到生成的 HelloJava.java 文件的内容，并处于编辑状态，如图 7 所示。</p>
<p>HelloJava.java 文件<br>图 7  HelloJava.java 文件<br>例 1</p>
<p>1) 对生成的源代码进行修改，最终文件代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO自动生成的方法存根</span></span><br><span class="line">        System.out.println(<span class="string">"    *"</span>);</span><br><span class="line">        System.out.println(<span class="string">"   ***"</span>);</span><br><span class="line">        System.out.println(<span class="string">"  *****"</span>);</span><br><span class="line">        System.out.println(<span class="string">" *******"</span>);</span><br><span class="line">        System.out.println(<span class="string">"*********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读者输入上面代码的时候，会充分体会到 Eclipse 强大的代码辅助功能。图 8 所示为代码的自动提示补全功能。</p>
<p>自动补全代码<br>图 8  自动补全代码</p>
<p>2) 编写完成之后按 Ctrl+S 快捷键保存修改。在工具栏中单击“运行”按钮后，如果程序没有编译错误，在底部的“Console（控制台）”窗格中会看到输出的等腰三角形，这就是程序的运行效果，如图 9 所示。</p>
<p>查看输出结果<br>图 9  查看输出结果</p>
<hr>
<h2 id="第-14-节-Java修改Eclipse编辑器字体大小"><a href="#第-14-节-Java修改Eclipse编辑器字体大小" class="headerlink" title="第 14 节 Java修改Eclipse编辑器字体大小"></a>第 14 节 Java修改Eclipse编辑器字体大小</h2><p>在第一次使用 Eclipse 编写程序时，由于 Eclipse 默认使用的是 Cosnolas 字体，字号为 10，所以编辑器中的字体非常小，不方便查看。</p>
<p>我们可以通过下面所示的方法来修改编辑器的字体大小。如图 1 所示，具体修改方法为：<br>选择“窗口”|“首选项”命令，打开“首选项”对话框，从左侧窗格依次展开“General（常规）”|“Appearance（外观）”|“Colors and Fonts（颜色和字体）”选项。<br>从右侧选择 Java 下的“Java Editor Text Font（Java编辑器文本字体）”选项。<br>单击“Edit（编辑）”按钮，在弹出的“字体”对话框中设置字体的样式和大小。</p>
<p>设置编辑器字体大小<br>图 1  设置编辑器字体大小</p>
<p>设置完成后，依次单击“Apply and Close（确定）”按钮返回 Eclipse，此时即可看到修改效果。图 2 所示为 14 号字体的效果。</p>
<p>14号字体的效果<br>图 2  14号字体的效果</p>
<hr>
<h2 id="第-15-节-Java-Eclipse如何调试代码"><a href="#第-15-节-Java-Eclipse如何调试代码" class="headerlink" title="第 15 节 Java Eclipse如何调试代码"></a>第 15 节 Java Eclipse如何调试代码</h2><p>下面通过一个简单的例子来了解一下 Eclipse 调试程序的方法。<br>public class Test1 {<br>    public static void main(String[] args) {<br>        // for循环，如果for后面()内的条件一直成立，{}内的代码一直执行<br>        for (int i = 0; i &lt;= 5; i++) {<br>            System.out.println(“这时的 i 值为 “ + i);<br>        }<br>    }<br>}<br>上述代码完成的主要功能是如果 i 值满足小于或等于 5 的条件，就一直执行输出语句。可以看到 for 关键字后面的小括号中有三个表达式，第一个表达式int i=0的作用是定义一个 int 类型的变量并赋初值为 0，第二个表达式i&lt;=5说明 i 要满足的条件是小于或等于 5，第三个表达式i++的意思是程序每执行一次 i 加 1。</p>
<p>对初学者来说，可能对这几个表达式的理解不太透彻，这样就会对每次控制台中输出的 i 值有所怀疑。接下来介绍每次执行程序后 i 值的变化。</p>
<p>在调试程序时常用的方法就是设置断点，跟踪调试，查看变量值的变化。调试上述代码的方法如下。</p>
<p>(1) 设置断点。双击要插入断点的语句行前面的蓝色区域，这时该行最前面会出现一个蓝色的圆点，也就是断点。本例在第 6 行 for 语句处添加了断点，如图 1 所示。如果想要取消该断点，直接双击断点所在的行号即可。</p>
<p>添加断点<br>图 1  添加断点</p>
<p>(2) 选择“Window（窗口）”|“Show View（显示视图）”|“（Breakpoints）断点”命令，打开“Breakpoint（断点）”窗格，在这里可以看到 Test 的第 6 行有一个断点，如图 2 所示。</p>
<p>“断点”窗格<br>图 2 “断点”窗格</p>
<p>(3) 要以调试方式运行程序，需要在工具栏中单击“调试”按钮，这样执行到断点的位置时弹出如图 3 所示的对话框，可以发现将要执行的 for 语句已经变成了绿色。单击“Switch（是）” 按钮进入调试模式，如图 4 所示。</p>
<p>询问是否进入调试模式<br>图 3  询问是否进入调试模式</p>
<p>调试模式<br>图 4  调试模式</p>
<p>(4) 单击按钮或者直接按 F6 键，程序开始单步执行。这时可以看到“变量（图 4 中的）”窗格中 i 的值是 0，然后继续执行，“控制台”窗格输出“这时的 i 值为 0”。</p>
<p>(5) 继续执行会发现程序重新回到 for 循环开始的位置，准备开始下一次的执行。此时，i 值变化为 1 且“变量”窗格中显示 i 值的行变为了黄色，如图 5 所示。</p>
<p>“变量”窗格<br>图 5 “变量”窗格</p>
<p>(6) 继续一直单击按钮，直到程序执行完毕。在这个过程中，可以看到 i 值又从 1 依次变化到 5，然后程序执行结束。</p>
<p>在上述的调试过程中，查看程序中变量值的变化，可以更好地理解程序的执行流程，这种设置断点的调试方式是初学者必须掌握的。</p>
<p>下面给初学者介绍一些如何减少错误的建议。<br>使用 Java 的命名规范，减少命名出错的概率。<br>掌握一定的计算机专业英语，能够读懂一些错误信息，便于根据提示査找错误和修改错误。<br>理解代码的含义之后自己练习写代码，而不是抄写代码。<br>多看、多练、多思考。</p>
<hr>
<h2 id="第-16-节-Eclipse快捷键大全"><a href="#第-16-节-Eclipse快捷键大全" class="headerlink" title="第 16 节 Eclipse快捷键大全"></a>第 16 节 Eclipse快捷键大全</h2><p>熟悉以下这些 Ecplise 快捷键可以帮助开发事半功倍，节省更多的时间来用于做有意义的事情。</p>
<p>编辑类快捷键<br>Ctrl+1    快速修复（最经典的快捷键，可以解决很多问题，比如 import 类、try catch 包围等）<br>Ctrl+Shift+F    格式化当前代码<br>Ctrl+Shift+M    添加类的 import 导入<br>Ctrl+Shift+O     组织类的 import 导入（既有 Ctrl+Shift+M 的作用，又可以去除没用的导入，一般用这个导入包）<br>Ctrl+Y    重做（与撤销 Ctrl+Z 相反）<br>Alt+/     内容辅助（用户编辑的好帮手，省了很多次键盘敲打，太常用了）<br>Ctrl+D    删除当前行或者多行（不用为删除一行而按那么多次的删除键）<br>Alt+↓     当前行和下面一行交互位置（特别实用，可以省去先剪切，再粘贴了）<br>Alt+↑    当前行和上面一行交互位置（同上）<br>Ctrl+Alt+↓    复制当前行到下一行<br>Ctrl+Alt+↑    复制当前行到上一行<br>Shift+Enter    在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置，不一定是最后）<br>Ctrl+/    注释当前行，再按则取消注释<br>选择类快捷键<br>Alt+Shift+↑     选择封装元素<br>Alt+Shift+←    选择上一个元素<br>Alt+Shift+→    选择下一个元素<br>Shift+←    从光标处开始往左选择字符<br>Shift+→    从光标处开始往右选择字符<br>Ctrl+Shift+←    选中光标左边的单词<br>Ctrl+Shift+→    选中光标右边的单词<br>移动类快捷键<br>Ctrl+←    光标移到左边单词的开头，相当于 vim 的 b<br>Ctrl+→    光标移到右边单词的末尾，相当于 vim 的 e<br>搜索类快捷键<br>Ctrl+K    参照选中的 Word 快速定位到下一个（如果没有选中 word，则搜索上一次使用搜索的 word）<br>Ctrl+Shift+K    参照选中的 Word 快速定位到上一个<br>Ctrl+J    正向增量查找（按下 Ctrl+J 后，你所输入的每个字母编辑器都提供快速匹配定位到某个单词，如果没有，则在状态栏中显示没有找到了，查一个单词时，特别实用，要退出这个模式，按 escape 键）<br>Ctrl+Shift+J    反向增量查找（和上条相同，只不过是从后往前查）<br>Ctrl+Shift+U    列出所有包含字符串的行<br>Ctrl+H    打开搜索对话框<br>Ctrl+G    工作区中的声明<br>Ctrl+Shift+G    工作区中的引用<br>导航类快捷键<br>Ctrl+Shift+T    搜索类（包括工程和关联的第三 jar 包）<br>Ctrl+Shift+R    搜索工程中的文件<br>Ctrl+E    快速显示当前 Editer 的下拉列表（如果当前页面没有显示的用黑体表示）<br>F4    打开类型层次结构<br>F3    跳转到声明处<br>Alt+←    前一个编辑的页面<br>Alt+→    下一个编辑的页面（当然是针对上面那条来说了）<br>Ctrl+PageUp/PageDown    在编辑器中，切换已经打开的文件<br>调试类快捷键<br>F5    单步跳入<br>F6    单步跳过<br>F7    单步返回<br>F8    继续<br>Ctrl+Shift+D    显示变量的值<br>Ctrl+Shift+B    在当前行设置或者去掉断点<br>Ctrl+R    运行至行（超好用，可以节省好多的断点）<br>重构（一般重构的快捷键都是 Alt+Shift 开头的）类快捷键<br>Alt+Shift+R    重命名方法名、属性或者变量名 （尤其是变量和类的 Rename，比手工方法能节省很多劳动力）<br>Alt+Shift+M    把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了，尤其是对一大堆泥团代码有用）<br>Alt+Shift+C    修改函数结构（比较实用，有 N 个函数调用了这个方法，修改一次搞定）<br>Alt+Shift+L    抽取本地变量（可以直接把一些魔法数字和字符串抽取成一个变量，尤其是多处调用的时候）<br>Alt+Shift+F    把 Class 中的 local 变量变为 field 变量 （比较实用的功能）<br>Alt+Shift+I    合并变量<br>Alt+Shift+V    移动函数和变量（不常用）<br>Alt+Shift+Z    撤销（重构的后悔药）<br>其他快捷键<br>Alt+Enter    显示当前选择资源的属性，windows 下的查看文件的属性就是这个快捷键，通常用来查看文件在 windows 中的实际路径<br>Ctrl+↑    文本编辑器 上滚行<br>Ctrl+↓    文本编辑器 下滚行<br>Ctrl+M    最大化当前的 Edit 或 View （再按则反之）<br>Ctrl+O    显示类中方法和属性的大纲，能快速定位类的方法和属性（在查找 Bug 时非常有用）<br>Ctrl+T    快速显示当前类的继承结构<br>Ctrl+W    关闭当前 Editer（windows 下关闭打开的对话框也是这个，还有 qq、旺旺、浏览器等都是）<br>Ctrl+L    文本编辑器 转至行<br>F2    显示工具提示描述</p>
<hr>
<h2 id="第-17-节-Java初学者容易犯的错误"><a href="#第-17-节-Java初学者容易犯的错误" class="headerlink" title="第 17 节 Java初学者容易犯的错误"></a>第 17 节 Java初学者容易犯的错误</h2><p>万事开头难，Java 编程的初学者常常会遇到各种各样的问题。对于自学的读者来说，则是需要花费更多的时间、精力来解决这些问题，而且一旦遇到的问题几天都得不到解决，往往会带来很大的挫败感。</p>
<p>所以本节介绍一些初学者经常出现的错误，以便减少读者在学习中的障碍。<br>1）大小写问题<br>之前我们已经提到，Java 是区分大小写的语言。但由于大部分读者都是 Windows 操作系统的忠实拥护者，因此对大小问题往往都不够重视（Linux 平台是区分大小写的）。</p>
<p>例如，有的读者编写的 Java 程序的类是 HelloJava，但当他运行 Java 程序时，运行的则是 java hellojava 这种形式，这种错误的形式没有严格按 Java 程序中编写的来写，可能引起系统提示如图 1 所示的错误。</p>
<p>大小写问题错误<br>图 1  大小写错误</p>
<p>因此这里必须提醒大家，在 Java 程序里，HelloJava 和 hellojava 是完全不同的，必须严格注意 Java 程序里的大小写问题。</p>
<p>不仅如此，读者按照教程中示例编写 Java 程序时，必须严格注意 Java 程序中每个单词的大小写，不要随意编写。例如 class 和 Class 是不同的两个词，class 是正确的，但是如果写成 Class，则程序无法编译通过。</p>
<p>实际上，Java 程序中的关键字全部是小写的，无需大写任何字母。<br>2）路径里包含空格的问题<br>这是一个更容易引起错误的问题。由于 Windows 系统的很多路径都包含了空格，典型的例如 Program Files 文件夹，而且这个文件夹是 JDK 的默认安装路径。</p>
<p>如果 CLASSPATH 环境变量里包含的路径中存在空格，则可能引发错误。因此，推荐大家安装 JDK 以及 Java 相关程序、工具时，不要安装在包含空格的路径下，否则可能引发错误。<br>3）main 方法的问题<br>如果需要用 java 命令直接运行一个 Java 类，这个 Java 类必须包含 main 方法，这个 main 方法必须使用 public 和 static 來修饰，必须使用 void 声明该方法的返回值，而且该方法的参数类型只能是一个字符串数组，而不能是其他形式的参数。对于这个 main 方法而言，前面的 public 和 static 修饰符的位置可以互换，但其他部分则是固定的。</p>
<p>定义 main 方法时，不要写成 Main 方法，如果不小心把方法名的首字母写成了大写，编译时不会出现任何问题，但运行该程序时将给出如图 2 的错误提示：</p>
<p>错误提示<br>图 2  错误提示</p>
<p>这个错误提示找不到 main 方法，因为 Java 虚拟机只会选择从 main 方法开始执行。对于 Main 方法，Java 虚拟机会把该方法当成一个普通方法，而不是程序的入口。</p>
<p>main 方法里可以放置程序员需要执行的可执行性语句，例如 System.out.println(“Hello Java!”)，这行语句是 Java 里的输出语句，用于向控制台输岀“Hello Java!”这个字符串内容，綸出结束后还输出一个换行符。</p>
<p>在 Java 程序里执行输岀有两种简单的方式：System.out.print(需要输出的内容) 和 System.out.println (需要输出的内容)，其中前者在输出结束后不会换行，而后者在输出结束后会换行。后面会有关于这两个方法更详细的解释，此处读者只能把这两个方法先记下来。</p>
<hr>
<h2 id="第-18-节-学习Java前一定要掌握这几个方法，事半功倍！"><a href="#第-18-节-学习Java前一定要掌握这几个方法，事半功倍！" class="headerlink" title="第 18 节 学习Java前一定要掌握这几个方法，事半功倍！"></a>第 18 节 学习Java前一定要掌握这几个方法，事半功倍！</h2><p>有人说，Java 一堆知识点，最开始学的时候就会很迷茫，根本不知道方向在哪里，抱着一本书一页一页的翻。学完了，写个程序，做个项目，啥都不知道，和没学一样。</p>
<p>“学了四年的计算机课程，我们班大多数同学都不知道该干什么，能干什么，感觉好像什么都学了，但是又什么都干不来！”</p>
<p>“面试的时候，很多单位问做过什么项目，能干什么，我们都回答不上来，就连很多问题，我们都不知道。”</p>
<p>……</p>
<p>这些都是很多计算机专业毕业后学生们的感想，但是这几乎成为了一种大学 IT 行业的毛病，也是很多学编程语言以后的人的想法。</p>
<p>就拿 Java 这个来说，很多人拿着书在学习的时候，是不是都一页一页的顺着翻书看的？遇到问题都卡住了，要不然就去问老师，麻烦点就问其他人，但又感觉不好意思，再不然就失去信心，干脆放弃了。有些时候，看书觉得懂了，一上机操作啥都不知道了……</p>
<p>其实上面说的这些这些都是误区！学编程，一定要动手，遇到 bug 了，就自己去查，如果连这点都不想做，那我只能劝你别学了。</p>
<p>程序员，有些时候产生的 bug 搜遍全网都找不到解决方法，但是还是要自己去解决；如果就连一个随便在网上一搜索就出来的了 bug 都不愿意去查，那还何谈学习编程？</p>
<p>你要知道你是新手，在学习过程中肯定会遇到非常多的麻烦，但是，所有人都是从新手走过来的。你遇到的问题，你的前辈们多多少少都遇到过，所以，除了学会查找资料以外，大胆的提问，有些时候也会有一些意想不到的收获。</p>
<p>比如，你的程序出现了一个 bug，你在网上找到了解决方法，但是别人用到了一个你没学过的知识点解决了你的问题，你该怎么办？学编程，一页一页慢慢的学，没用！哪里想学，哪里不会，看目录，直接去读。</p>
<p>“没有学不好的语言，只有不努力的人！”我其实一直不太喜欢这句话。学习，尤其是编程语言，是有技巧的。如果什么都去学，而不是精学工作和面试中的知识点，那不仅会造成学习效率相当低下，而且还会迷失在知识的海洋中。结果是，大家投入了大量的时间，也学到了不少的知识点，但是无法把学到的知识点整理成升职加薪的 Java 知识体系，说白了，也就是白学了。</p>
<p>所以说，学编程，其实就是在提升自己的自学能力，动手能力，逻辑能力，还有解决问题的能力。无论你是学习哪种语言，这些方法都大同小异：<br>第一点：多动手，多动脑，多实践。<br>没有几万行的代码，没有经常敲键盘的努力，你就不要羡慕别人打代码有多快，多熟练。别老是想着我看书把这个完全看懂了，甚至都能背下来了，我就可以过了！其实不然，你会发现，你一上机操作，又是一堆错误。</p>
<p>有些时候，敲一两次代码，比看十次书还有用！要不然，你认为你刚开始学 Java 编程打代码的速度就能像那些程序员一样打的很顺很快，对于别人打了那么多年代码的程序员来说，也是有点太不公平了吧，对吧？而且，一定是打代码，不是照着敲代码！照着敲代码，你就不是程序员了，而是打字员了。在写下每一行代码之前，都要想一想为什么，怎么来的。我保证，随着时间的积累，（1+0.01）的 365 次方是 37.78，总有一天，量变总会形成质变。<br>第二点：不急躁，不拒绝错误。<br>不要急躁，遇到技术问题，必须冷静对待，不能让思维混乱，保持清醒的头脑才能分析和解决各种问题。</p>
<p>永远也不要拒绝自己的错误，很多新手一开始一敲代码，运行框里面就弹出来了十几行报错。用开玩笑的话说，在最开始学编程的那几个月里面，你都不敢按下你自己程序的启动运行按钮。</p>
<p>但是事实确实如此，作为一名新手，你确实会犯下很多错误，诸如文件创建失败，没有写出函数，或者没配置环境变量等等……但是不要怕，直接把报错的提示复制粘贴到百度，一搜索就出来了，你会发现，相对于正确的程序，你的收获明显会更多。错误即是财富，请记住。<br>第三点：学习一定要学会取大舍小。<br>什么叫取大舍小呢？舍本逐末知道吧？他的反义词。比如说我举一个例子：有很多时候我们会把一个组件的引用作为一个类的成员变量，而不是在其起作用的函数中去定义。</p>
<p>有些新手就开始疑惑了，既然都一样，那为什么不放在函数中呢？其实这些问题到后面你自然就知道了，是因为作用域的问题所在。开始学编程或者入门后，不要去纠结太多你目前无法理解的细枝末节，否则会让你的学习进度还是效率，甚至是信心，都会大打折扣。抓住需要掌握的，有些细节，到了后面你慢慢就会知道了。<br>第四点：看一本书尽量不要从头向后一页一页的看。<br>编程这种课程，确实有点不一样。因为当你在学习的时候，那是一个又一个的知识点，但是在我们开发时，做项目的时候，要的是一张知识网络。这也就是面试的时候，曾经的项目经验那么受重视的原因所在。</p>
<p>有些 Java 老手说，要把一个小白变成老油条咋办？简单，丢进项目组里面混一段时间就好了。当你出来后，你会发现你所学习的 Java 不再是很多零散的知识点了，而是一个体系。</p>
<p>到这个时候，你也就算有了 Java 高阶的学习基础了。那么对于我们一般的初学者来说，能够形成一张体系，也就至关重要，甚至说对以后搞开发，找工作来说必不可少。所以这种意识要从学习的初期就要开始培养。</p>
<p>初学编程时，遇到了后面不熟悉的知识点，没关系，只要想看，就去看！在网上查找自己遇到的 Bug 的时候，看见别人用了一种自己没学过的东西解决了，如果想了解，那就去看那部分知识！</p>
<p>甚至你在学习新知识的时候，可以尝试把新老知识结合一下，当你成功了以后，这种点点滴滴的成就感，也会督促你继续前进。所以，看一本书，不要顺着看，这不是编程的学习方法所在！<br>第五点：多阅读别人的优秀代码，永远不要抵触学习新知识。<br>编程所属的计算机科学和其他科学界都差不多，但有个特点就是计算机科学界的前沿科学发展的太快了。所以，多去读一读别人的代码，不要抵触新知识，是学习计算机科学，也亦是学习编程的一条相对来说的“捷径”。</p>
<hr>
<h2 id="第-19-节-Java程序员必须知道的学习路线"><a href="#第-19-节-Java程序员必须知道的学习路线" class="headerlink" title="第 19 节 Java程序员必须知道的学习路线"></a>第 19 节 Java程序员必须知道的学习路线</h2><p>你现在是不是想学 Java，但又很迷茫，不知从何下手，不知道该从哪里学起，不知道需要学些什么？那么看完这篇文章你会有一种豁然开朗的感觉。</p>
<p>学习 Java 的第一步，就是制定自己的 Java 学习路线。对 Java 主要的重点知识归纳如下：</p>
<p>对于学习 JavaSE 的读者，分为 JavaSE 初级中级和高级水平，下面分别介绍达到这些水平我们需要掌握什么。</p>
<p>JavaSE 初级水平要求掌握计算机入门：DOS 命令，什么是程序，如何配置 Java 开发环境，Java 编程的过程是怎样的，Java 有什么特点，程序是如何运行的。</p>
<p>编程基础：变量，基本数据类型，进制，转义字符，运算符，分支语句和循环语句等。方法与数组，还有彻底掌握面向对象的思想。如果能掌握这些，你已经入门 Java 语言了。</p>
<p>JavaSE 的中级水平是要求掌握 Eclipse 用法与异常处理技术，Debug 调试技术，Java 常用类库，文件与 IO，集合框架，多线程并发技术，网络编程，反射和泛型特点，正则表达式，枚举和注解，XML 和 JSON，GUI 事件处理，Web 前端开发基础和框架，Servlet 和 JSP 在 Web 后端的应用，MVC 和分层架构，以及项目开发流程以及 CASE 工具的使用。</p>
<p>JavaSE 高级水平便是要求掌握 Mybatis 框架，Spring 框架，使用 Hibernate 实现持久层 RESTful 架构和移动端接口，设计第三方接口和在线支付功能，MyBatis 的应用和 SSM 整合。</p>
<p>分布式基础知识点：Linux 常见命令，Jdktomcat 配置，maven 私服，阿里云配置 redis 和 mysql 等，JVM 高级特性，JVM 性能监控和调优等等。主要都是向着 Web 开发方面的技术加深。最好还是要有一点 HTML 网页设计基础和数据库理论知识，学习起来会更加轻松一些。</p>
<p>建议大家，如果没有任何编程基础的读者，先学习C语言的语法，Java 的语法和C语言的大同小异；若是有一定编程基础了，那么就可以开始学习 Java 或者直接进入面向对象思想的教程部分了。</p>
<hr>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java [基础] 教程目录</title>
    <url>/java-base-course-contents/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>这套教程适用于没有任何 Java 基础，或者基础薄弱的学员，它通俗易懂，并且非常全面，30 天从入门到精通不是神话。（这里是 Java [基础] 教程目录页）</p>
          </div>

<a id="more"></a>

<h2 id="Java-基础-教程目录"><a href="#Java-基础-教程目录" class="headerlink" title="Java [基础] 教程目录"></a>Java [基础] 教程目录</h2><div class="note success">
            <p>第 1 章 Java 入门基础及环境搭建  <a href="/java-base-course-1-Java-Introduction-foundation-and-environment-construction/">Go</a></p>
          </div>
<div class="note success">
            <p>第 2 章 Java 程序设计基础 <a href="/java-base-course-2-Java-Fundamentals-of-programming/">Go</a></p>
          </div>
<div class="note success">
            <p>第 3 章 Java 流程控制语句 <a href="/java-base-course-3-Java-process-control-statement/">Go</a></p>
          </div>
<div class="note success">
            <p>第 4 章 Java 字符串处理 <a href="/java-base-course-4-Java-string-processing/">Go</a></p>
          </div>
<div class="note success">
            <p>第 5 章 Java 数字和日期处理 <a href="/java-base-course-5-Java-number-date-processing/">Go</a></p>
          </div>
<div class="note success">
            <p>第 6 章 Java 内置包装类 <a href="/java-base-course-6-Java-built-in-wrapper-class/">Go</a></p>
          </div>
<div class="note success">
            <p>第 7 章 Java 数组处理 <a href="/java-base-course-7-Java-array-processing/">Go</a></p>
          </div>
<div class="note success">
            <p>第 8 章 Java 类和对象 <a href="/java-base-course-8-Java-classes-and-objects/">Go</a></p>
          </div>
<div class="note success">
            <p>第 9 章 Java 继承和多态 <a href="/java-base-course-9-Java-inheritance-and-polymorphism/">Go</a></p>
          </div>
<div class="note success">
            <p>第 10 章 Java 异常处理 <a href="/java-base-course-10-Java-exception-handling/">Go</a></p>
          </div>
<div class="note success">
            <p>第 11 章 Java 集合、泛型和枚举 <a href="/java-base-course-11-Java-collection-generics-and-enumerations/">Go</a></p>
          </div>
<div class="note success">
            <p>第 12 章 Java 反射机制 <a href="/java-base-course-12-Java-reflection-mechanism/">Go</a></p>
          </div>
<div class="note success">
            <p>第 13 章 Java 输入/输出流 <a href="/java-base-course-13-Java-input-output-flow/">Go</a></p>
          </div>
<div class="note success">
            <p>第 14 章 Java 多线程编程 <a href="/java-base-course-14-Java-multithreading/">Go</a></p>
          </div>
<div class="note success">
            <p>第 15 章 Java 网络编程 <a href="/java-base-course-15-Java-network-programming/">Go</a></p>
          </div>

<h2 id="关于-Java-语言"><a href="#关于-Java-语言" class="headerlink" title="关于 Java 语言"></a>关于 Java 语言</h2><p>由于 JVM 的支持，使得 Java 成为一种跨平台的编程语言，一次编写，到处运行；换句话说，一段 Java 代码可以不加修改地在 Windows、Linux、Mac OS、UNIX 等平台运行。JVM 是重点学习内容。</p>
<p>在世界编程语言排行榜中，近年来 Java 一直稳居第一名，比第二名的C语言高出几个百分点。</p>
<p>世界编程语言排行榜</p>
<p><img src="/java-base-course-contents/java-Programming-language-leaderboard.png" alt="图：2018 年 09 月份世界编程语言排行榜"></p>
<p>Java 最初是由 SUN 公司推出的，后来 SUN 公司被 Oracle 公司收购，Java 的版权也就归属了 Oracle。Java 的<a href="https://www.java.com/" target="_blank" rel="noopener">官方网址</a>，你可以在此下载最新版本，关注最新资讯。</p>
<p>Java 是一门半编译型的语言，Java 源码先被编译为字节码文件（中间文件），然后再由虚拟机（JVM）解释执行，这肯定比直接编译成二进制文件的运行速度要慢一些。</p>
<p>不过 Java 经过了多年的性能调优，再加上即时编译技术（JIT）的加持，性能已经相当出色了，甚至成了传统编译器的竞争对手，某些情况下甚至还超出了传统编译器（整体上还是不及 C/C++ 的）。</p>
<h2 id="Java-的应用"><a href="#Java-的应用" class="headerlink" title="Java 的应用"></a>Java 的应用</h2><p>Java 是一门用途广泛的语言，不但可以用来开发网站后台、PC 客户端和 Android APP，还在数据分析、网络爬虫、云计算领域大显身手。</p>
<p>不过，Java 还是与目前最火热的机器学习（人工智能）失之交臂，这个领域是 Python 的天下。</p>
<h2 id="Java-学习建议"><a href="#Java-学习建议" class="headerlink" title="Java 学习建议"></a>Java 学习建议</h2><p>从学术的角度讲，Java 是一门面向对象的编程语言，初学者需要花费不少时间来熟悉面向对象的概念、语法和编程思想，有不理解的地方请大家一定要坚持，多花时间编写代码自然会豁然开朗。只有一步一个脚印，踏踏实实学习，才能从零基础到入门，再到精通。</p>
<p>大家在学习的过程中也要多看几套 Java 教程，不要死啃一本书，这样才能博采众长，进步更快。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客系列：部署上线篇</title>
    <url>/hexo-deploy-to-VPS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>本文主要介绍了在将 Hexo 博客部署上线过程中将会遇到的一系列问题。</p>
          </div>

<a id="more"></a>

<p>第一章主要介绍了将 Hexo 部署到 VPS 的方案，使得在本地推送更新后自动同步线上内容，部署过程主要分为三步走，首先从本地推送更新到远程仓库，然后触发 Git Hooks 将静态资源部署到 Web 根目录，最后启动 Nginx 服务器。</p>
<p>第二章主要介绍了如何分析页面加载性能瓶颈，并提供了通过CDN和代码压缩合并等方法来优化页面加载速度的方案。</p>
<p>第三章主要介绍了如何将站点提交到各大搜索引擎收录，并讨论了SEO相关话题。</p>
<p>后续章节则零散的介绍了为站点添加404页面和RSS链接。</p>
<p>部署个人博客主要有两种方案，一种是托管到Github Pages上，一种是部署到自己的VPS上。</p>
<p>对于Github Pages，优势在于完全免费，部署方便快捷，适用于新手，但一个Github账号只能用来部署一个个人站点。另外，Github服务器在国外，理论上从国内加载站点资源会有延迟，并且由于GFW的存在有时候可能访问不到站点。当然，可以通过Coding Pages来实现国内外双线部署来解决这个问题，详情可以参考网上相关教程。</p>
<p>对于VPS，需要独立购买域名和服务器，还需要熟悉Linux系统的基本操作，但同时也提供了更广的自由度。本篇主要介绍使用VPS部署博客的方案。</p>
<h1 id="VPS自动部署"><a href="#VPS自动部署" class="headerlink" title="VPS自动部署"></a>VPS自动部署</h1><div class="note info">
            <p>本章节参考 <a href="https://blog.yizhilee.com/post/deploy-hexo-to-vps/" target="_blank" rel="noopener">荔枝 | 通过 Git Hooks 自动部署 Hexo 到 VPS</a></p>
          </div>

<p>使用VPS部署博客的主要思路分为三步：</p>
<ul>
<li><code>hexo deploy</code> 的时候通过git把 public 目录下的博客静态资源推送到远程仓库中</li>
<li>推送更新时触发 Git Hooks 将静态资源克隆到网站根目录下</li>
<li>使用 nginx 作为Web服务器提供对博客的 HTTP 访问</li>
</ul>
<p>本文基于腾讯云 Ubuntu 16.04实现自动部署。</p>
<h2 id="远程仓库推送"><a href="#远程仓库推送" class="headerlink" title="远程仓库推送"></a>远程仓库推送</h2><p>在推送静态资源之前需要做些准备工作，包括基于公钥的ssh通信以及VPS用户和权限管理。</p>
<div class="note info">
            <p>在进行下一步操作之前请先确认本地已经安装了 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 和 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>。</p>
          </div>

<p>为什么要实现基于公钥的ssh通信？</p>
<p>通常可以使用密码和公钥两种方式登陆VPS，如果在VPS上为某用户添加了授权公钥，则之后每次以该用户身份登陆或者获取授权就无须再重复输入密码了。<strong>Hexo的git自动部署插件不支持使用密码验证授权</strong>，所以要实现基于公钥的ssh通信。</p>
<p>如果尚未生成ssh公钥对，执行如下命令生成新的公钥对：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>无须设置公钥密码，否则每次通过公钥登陆的时候都要输入密码。</p>
          </div>

<p>如果是Windows操作系统，此时会在 C:\Users\Username\.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p>
<p>腾讯云的默认登陆用户名为ubuntu，在设置根用户密码之前无法切换为根用户，可以通过 <code>sudo passwd</code> 命令来设置根用户密码，然后通过 <code>su</code> 命令切换到根用户身份。</p>
<p>以管理员权限执行如下命令新建用户并设置密码：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo adduser git</span><br><span class="line"><span class="variable">$ </span>sudo passwd git</span><br></pre></td></tr></table></figure>

<p>这一步虽然不是必须的，但一般情况下都会单独新建git用户专用于git代码同步，并将远程仓库放在git用户目录下。</p>
<p>为方便后续以git用户身份获取管理员权限来新建目录，此处为其添加管理员操作权限：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo gpasswd -a git sudo</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>该命令指的是将 git 用户添加到 sudo用户组中，也就使得git用户有了sudo用户组的操作权限。</p>
          </div>

<p>在本地Git Bash中执行如下命令将ssh公钥上传到VPS：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> git@yearito.cn</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>该命令会自动把默认ssh公钥id_rsa.pub中的内容拷贝到git用户目录下的 .ssh/authorized_keys文件中。</p>
          </div>

<p>此时在本地cmd中用git用户登陆VPS将会直接成功登陆而无须输入密码：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh git<span class="variable">@yearito</span>.cn</span><br></pre></td></tr></table></figure>

<p>在git用户目录下执行如下命令创建远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir blog.yearito.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog.yearito.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init --bare</span></span><br></pre></td></tr></table></figure>

<p>在本地站点根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在本地站点配置文件中添加git远程仓库信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@yearito.cn:~/blog.yearito.git</span><br></pre></td></tr></table></figure>

<p>此时在站点根目录下执行 <code>hexo deploy</code> 命令，如果最后一行出现如下提示：</p>
<blockquote>
<p><span style="color: green">INFO</span>  Deploy done: git</p>
</blockquote>
<p>则说明已经实现本地和VPS远程仓库之间的资源同步了。</p>
<div class="note info">
            <p>需要注意的是，同步的仅是 public 目录下的静态资源文件，而非整个项目目录。</p>
          </div>

<p>如果在部署过程中出现如下提示：</p>
<blockquote>
<p>The file will have its original line endings in your working directory. <br><br>warning: LF will be replaced by CRLF in tags/Hexo/index.html.</p>
</blockquote>
<p>这是由 Windows 操作系统和 Linux 操作系统中行尾换行符不一致所引起的，可以通过执行 <code>git config core.autocrlf false</code> 来关闭告警。</p>
<h2 id="Git-Hooks-拷贝资源"><a href="#Git-Hooks-拷贝资源" class="headerlink" title="Git Hooks 拷贝资源"></a>Git Hooks 拷贝资源</h2><p>此时VPS上的远程仓库只是一个裸仓库，无法用于搭建站点服务器。所以我们需要在推送更新的同时触发Git Hooks钩子，来从远程仓库中克隆出完整的博客资源放到Web服务器根目录下。</p>
<p>首先创建Web根目录：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> /<span class="built_in">var</span>/www/blog.yearito -p</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>其中，-p 参数表示若所要建立目录的上层目录目前尚未建立，则一并建立上层目录。</p>
          </div>

<p>然后改变Web根目录的所有者和所有工作组，以使git用户拥有对该目录的操作权限：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">$ sudo chown g<span class="symbol">it:gi</span><span class="built_in">t</span> -R /<span class="built_in">var</span>/www/blog.yearito</span><br></pre></td></tr></table></figure>

<p>打开到远程仓库中的hooks目录下，默认该目录下是没有post-receive钩子文件的，直接通过 <code>vim post-receive</code> 新建该文件并添加以下代码：</p>
<figure class="highlight bash"><figcaption><span>~/blog.yearito.git/hooks/post-receive</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"post-receive hook is running..."</span></span><br><span class="line"></span><br><span class="line">GIT_REPO=/home/git/blog.yearito.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/blog.yearito</span><br><span class="line">PUBLIC_WWW=/var/www/blog.yearito</span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>为什么不直接将裸仓库克隆到Web根目录下呢？我之前也一直被这个问题困扰，感觉先克隆到 tmp 目录再拷贝到Web根目录是多此一举。后来我觉得可能是出于项目安全的考虑，在执行cp命令的时候，.git作为隐藏目录不会被拷贝到Web根目录下，也就避免了将整个仓库历史暴漏在Web服务中。</p>
          </div>

<p>输入 <code>:wq</code> 保存并退出，此时可以看到 post-receive 文件只有读写权限，没有执行权限：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/post-receive-before.png" alt="修改 post-receive 权限前" title="修改 post-receive 权限前"></p>
<p>执行以下代码：</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">chmod +x post-<span class="keyword">receive</span></span><br></pre></td></tr></table></figure>

<p>执行后可以看到 post-receive 已获得执行权限：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/post-receive-after.png" alt="修改 post-receive 权限后" title="修改 post-receive 权限后"></p>
<p>然后在本地站点目录下执行 <code>hexo deploy -g</code>，如果出现我们之前设定好的 <code>remote: post-receive hook is running...</code> 提示，且没有其他权限错误，则说明钩子正确执行了，从远程仓库拷贝资源成功，此时打开 /var/www/blog.yearito/ 目录可以看到完整的博客静态资源文件。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/auto-deploy-success.png" alt="Git Hooks 拷贝资源成功" title="Git Hooks 拷贝资源成功"></p>
<h2 id="配置Nginx服务器"><a href="#配置Nginx服务器" class="headerlink" title="配置Nginx服务器"></a>配置Nginx服务器</h2><p>将静态资源部署到Web服务器根目录后，接下来要做就是通过配置Nginx来启动Web服务。</p>
<p>切换到根用户并安装Nginx：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ apt-<span class="builtin-name">get</span> install nginx</span><br></pre></td></tr></table></figure>

<p>成功安装后可以通过 <code>nginx -v</code> 查看Nginx版本信息，以及可以通过 <code>service nginx status</code> 或者 <code>systemctl status nginx</code> 命令来查看Nginx运行状态。</p>
<p>修改nginx配置文件内容，启动80端口的HTTP服务到Web根目录，此处提供最简配置作为参考，读者可以在此基础上自定义：</p>
<figure class="highlight nginx"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>  mime.types;</span><br><span class="line">  <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">root</span> /var/www/blog.yearito;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时通过 <code>nginx -s reload</code> 重新加载配置文件，如果此前Nginx服务未启动，则直接执行 <code>nginx</code> 命令即可。</p>
<p>执行以下命令设置Nginx开机自动启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="builtin-name">enable</span> nginx</span><br></pre></td></tr></table></figure>

<p>此外提供一些其他的Nginx语法命令：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">nginx -s stop <span class="string">//</span>强制关闭</span><br><span class="line">nginx -s <span class="keyword">quit</span> <span class="string">//</span>完成当前服务后关闭</span><br><span class="line">nginx -s <span class="keyword">reload</span> <span class="string">//</span>重新加载配置文件</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入VPS域名，即可打开个人博客站点，至此实现了在本地推送更新后自动同步部署线上站点内容的功能。</p>
<h1 id="页面加载性能"><a href="#页面加载性能" class="headerlink" title="页面加载性能"></a>页面加载性能</h1><p>博客上线后，需要关注页面的加载速度。<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a> 可用于帮助分析网页加载速度瓶颈，该网站将会针对指定域名进行在线测试，并提供一份详细的页面加载分析报告，报告中还会根据页面资源加载情况给出合理的优化建议及预期优化效果，因此用户可以有的放矢的进行性能优化专项整改。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/pagespeed-insights.png" alt="Google PageSpeed Insights" title="Google Pagespeed Insights"></p>
<p>虽然可以从报告中了解到站点的加载性能瓶颈，但是，报告中仅是提供优化建议，具体的落实还须自己实施。本章节主要介绍CDN加速和代码合并压缩两种比较常见的优化方案。</p>
<h2 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h2><p>在控制台的Network Tab页中可以查看到页面加载瀑布流。在此需要勾选 Disable cache 以避免缓存干扰分析。另外，在所有静态资源中，对加载速度影响较大且存在大幅优化空间的主要还是JS脚本，所以我们先拿它开刀。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/before-optimize.png" alt="页面加载瀑布流" title="页面加载瀑布流"></p>
<p>首先理解一下底部信息栏中的这行文字：</p>
<blockquote>
<p><span style="font-family: Arial">21 / 50 requests | 518 KB / 818KB transferred | Finish: 8.44 s | <span style="color: blue">DOMContentLoaded: 4.36 s</span> | <span style="color: red">Load: 6.80 s</span></span></p>
</blockquote>
<p>主要包括以下几条信息：</p>
<ul>
<li>加载页面总共发起了50次请求，下载了818 KB资源，其中JS脚本资源共计518 KB，占据了21次请求。</li>
<li>在 4.36 s 时DOM树渲染完毕（蓝线），此时已经可以看到正常的页面，由于JS脚本会阻塞DOM解析，所以这段时间是包含了JS脚本的下载与执行过程的。</li>
<li>在 6.80 s 时所有资源加载完毕（红线），包括异步的脚本和其他非阻塞的页面资源，如图片、CSS文件等。</li>
<li>在 8.44 s 时所有HTTP请求响应完毕，包括XHR请求。</li>
</ul>
<div class="note info">
            <p>关于 Finish / DOMContentLoaded / Load 的讨论请参见 <a href="https://stackoverflow.com/questions/31729240/how-to-analyzing-page-speed-in-chrome-dev-tools" target="_blank" rel="noopener">How to analyzing Page Speed in Chrome Dev tools</a> 和 <a href="https://segmentfault.com/q/1010000011840948/a-1020000011947156" target="_blank" rel="noopener">chrome devtools 中 network 一栏中的 Finish 时间代表着什么</a>，两者说法不一致，我倾向于认同后者的观点。</p>
          </div>

<p>分析以上页面加载瀑布流可知，DOM树的解析渲染主要是被从VPS本地下载 jquery、velocity、fancybox 等脚本所滞后，所以对症下药，我们可以改为从开源公共CDN加载脚本。</p>
<p>对于在站点中用到的三方插件，在主题配置文件中为其添加CDN加载源：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">//cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.2/dist/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.2/dist/jquery.fancybox.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">velocity:</span> <span class="string">https://cdn.jsdelivr.net/npm/velocity-animate@1.2.1/velocity.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">velocity_ui:</span> <span class="string">//cdn.jsdelivr.net/npm/velocity-animate@1.2.1/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="string">//cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">algolia_instant_js:</span> <span class="string">https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js</span></span><br><span class="line">  <span class="attr">algolia_instant_css:</span> <span class="string">https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1.0.2/themes/blue/pace-theme-minimal.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pangu:</span> <span class="string">//cdn.jsdelivr.net/npm/pangu@3.3.0/dist/browser/pangu.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">https://cdn.jsdelivr.net/npm/valine@1.3.3/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>主题配置文件中给出的CDN链接示例的版本可能已经落后很久了，请查找并使用最新版的插件CDN链接。</p>
          </div>

<p>比较常用的开源项目CDN服务商主要有unpkg、bootcdn、 cdnjs、jsdelivr 和 cloudflare，用户可以自行在浏览器中检测资源下载速度后做取舍。本站中主要使用 jsdelivr 提供的CDN加速服务。</p>
<p>使用CDN加速后页面加载瀑布流如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/after-optimize.png" alt="CDN加载三方插件后的页面加载瀑布流" title="CDN加载三方插件后的页面加载瀑布流"></p>
<p>DOM树的渲染完成时间缩减到了654 ms，<strong>也就是说刷新页面后654 ms后就可以看到页面内容了，相比优化前的4.36 s 有了极大的提升</strong>。</p>
<p>如果开启了Live2D看板娘，一样可以通过将脚本来源改为CDN来完成性能优化：</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  # Live2D</span><br><span class="line">  ## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">  live2d:</span><br><span class="line">    enable: true</span><br><span class="line">    pluginRootPath: live2dw/ # Root path of plugin to be on the site (Relative)</span><br><span class="line">    pluginJsPath: lib/ # JavaScript path related to plugin's root (Relative)</span><br><span class="line">    pluginModelPath: assets/ # Relative model path related to plugin's root (Relative)</span><br><span class="line"><span class="deletion">-   scriptFrom: local # Default</span></span><br><span class="line"><span class="addition">+   scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">    tagMode: true # Whether only to replace live2d tag instead of inject to all pages</span><br><span class="line">    log: false # Whether to show logs in console</span><br><span class="line">    model:</span><br><span class="line">      use: live2d-widget-model-shizuku  # 萌系少女</span><br><span class="line">    display:</span><br><span class="line">      position: left</span><br><span class="line">      width: 100</span><br><span class="line">      height: 180</span><br><span class="line">    mobile:</span><br><span class="line">      show: false</span><br><span class="line">    react:</span><br><span class="line">      opacityDefault: 0.7 # 默认透明度</span><br></pre></td></tr></table></figure>

<p>另外，我们注意到，处理 hotjar 的脚本共计耗时 5 s，那么该脚本是否影响到了页面加载性能呢？事实上没有，在HTML结构树中可以找到 hotjar 的脚本引入代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://static.hotjar.com/c/hotjar-1061283.js?sv=6"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>async</code> 属性意味着脚本将以异步形式加载，不会阻塞DOM树的解析和渲染。也就是说该脚本只使得 Load 的完成时间滞后，但没有影响到 DOMContentLoaded 的时间节点。</p>
<p>关于 Hotjar 是否会使得站点加载变慢，Hotjar 官方给出否定的回应，理由如下：</p>
<ul>
<li>通过异步的方式加载脚本</li>
<li>脚本使用CDN加速</li>
<li>脚本合理利用了浏览器缓存</li>
</ul>
<div class="note info">
            <p>更多详情请参考 <a href="https://help.hotjar.com/hc/en-us/articles/115009335727-Will-Hotjar-Slow-Down-My-Site-" target="_blank" rel="noopener">Will Hotjar Slow Down My Site?</a></p>
          </div>

<p>除了可以使用CDN加速三方插件外，还可以使用CDN域名加速来加速站点静态资源，包括HTML文件、CSS样式、字体文件等，具体操作方案参考VPS服务商说明文档。</p>
<p>CDN域名加速也有几个坑点：</p>
<ul>
<li>CDN缓存会导致更新站点后访问到的仍是旧版内容，需要等待缓存刷新后才能看到更新。</li>
<li>加速后就不能通过该域名建立ssh连接了，此时 <code>hexo deploy</code> 将会出现端口连接超时，可以将远程仓库地址改为真实IP地址来确保推送成功。</li>
</ul>
<h2 id="代码合并压缩"><a href="#代码合并压缩" class="headerlink" title="代码合并压缩"></a>代码合并压缩</h2><p>另一种优化页面加载速度的方案是通过删除注释和空格、将长变量名改为短变量名等方式压缩代码体积，从而缩短资源下载时间。</p>
<p><a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a> 插件通过集成下列插件提供一站式的资源压缩服务：</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-html-minifier" target="_blank" rel="noopener">hexo-html-minifier</a>: 基于 <a href="https://github.com/kangax/html-minifier" target="_blank" rel="noopener">HTMLMinifier</a> 提供 HTML 压缩服务。</li>
<li><a href="https://github.com/hexojs/hexo-clean-css" target="_blank" rel="noopener">hexo-clean-css</a>: 基于 <a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="noopener">clean-css</a> 提供 CSS 压缩服务。</li>
<li><a href="https://github.com/hexojs/hexo-uglify" target="_blank" rel="noopener">hexo-uglify</a>: 基于 <a href="http://lisperator.net/uglifyjs/" target="_blank" rel="noopener">UglifyJS</a> 提供 JS 压缩服务。</li>
<li><a href="https://github.com/vseventer/hexo-imagemin" target="_blank" rel="noopener">hexo-imagemin</a>: 基于 <a href="https://github.com/imagemin/imagemin" target="_blank" rel="noopener">imagemin</a> 提供图片压缩服务。</li>
</ul>
<p>此外，该插件还可以把多个JS脚本拼接打包到一个文件中来减少HTTP请求次数，从而减少页面加载时间。</p>
<p>该方案从理论上来讲是有效且可行的，但是和一般的大型软件项目不同，博客项目中的主要资源是Markdown文件解析后的HTML文件，其核心是文本内容而非逻辑代码，压缩空间极其有限，在实际应用过程中效果并不明显，所以本站也就没有应用该插件功能。</p>
<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="提交网址"><a href="#提交网址" class="headerlink" title="提交网址"></a>提交网址</h2><div class="note info">
            <p>本节参考 <a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="noopener">hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一</a></p>
          </div>

<p>在搜索引擎中输入 site:yearito.cn，会发现暂时还搜不到自己的站点：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/google-search-result.png" alt="谷歌搜索结果" title="谷歌搜索结果"></p>
<p>想要搜到自己的站点，首先要将个人网站提交给搜索引擎收录。针对不同的搜索引擎需要分别提交网址，但提交的步骤是大同小异的：</p>
<p><strong>第一步：提交网站域名</strong></p>
<p>注意需要区分输入 http 与 https。</p>
<p><strong>第二步：验证网站所有权</strong></p>
<p>一般都包括以下三种验证方法，其本质都是通过一段字符串验证码来验证用户的网站所有权，三种方法任选其一：</p>
<ul>
<li>HTML文件验证：将给定的HTML文件上传到站点根目录下（验证码包含在HTML文件中）</li>
<li>HTML元标签验证：在站点首页中添加给定的 <code>meta</code> 标签（验证码包含在 <code>meta</code> 标签属性中）</li>
<li>CNAME验证：添加一个CNAME域名解析记录到指定站点（验证码包含在二级域名中）</li>
</ul>
<p>Next主题中已经内置集成了各大搜索引擎的HTML元标签验证方案，用户只需获取验证码填写到主题配置文件中并重新打包部署即可完成身份验证。</p>
<p><strong>第三步：推送或者提交 sitemap</strong></p>
<p>sitemap，又称站点地图，通常是一个xml格式的文件，最早由谷歌提出，现已被多数引擎所支持。里面包含了站点内的页面列表，帮助搜索引擎理解网站内容的组织架构。</p>
<p>在Hexo中可以通过 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a> 和 <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="noopener">hexo-generator-baidu-sitemap</a> 两个插件帮助生成通用站点地图和百度专用站点地图文件。</p>
<p>在站点根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>

<p>之后在执行 <code>hexo generate</code> 打包后即可在 public 目录下找到 sitemap.xml 和 baidusitemap.xml 两个文件，将该文件提交到搜索引擎站长后台即可帮助搜索引擎分析收录站点内容，各个搜索引擎收录效率不同，可能需要耐心等上几天。</p>
<h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><p>在 <a href="https://search.google.com/search-console" target="_blank" rel="noopener">Google Search Console</a> 中提交站点域名，此时会提供几种验证网站所有权的方法，展开 <strong>其他验证方法</strong> 中的 <strong>HTML 标记</strong>，然后将 <code>meta</code> 标签的 <code>content</code> 属性值复制到主题配置文件中：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/google-verify-site.png" alt="Google 选择验证方式" title="Google 选择验证方式"></p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">cEGDN99xe2gtAy97He-NH4ihW3Y4GrGQl_xTxp7p3sg</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>hexo generate deploy</code> 重新部署站点，此时网站中就已经自动包含了用于验证身份的 <code>meta</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"u9qDJxSM-SphoS5GXBhunqp1UXBY5H4FT6J1V2LxXqI"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>回到 Search Console 页面点击验证按钮，验证成功后将进入控制台，点击左侧 <strong>站点地图</strong> 菜单，在域名后输入 sitemap.xml 并提交，即可添加新的站点地图。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/google-add-sitemap.png" alt="添加站点地图" title="添加站点地图"></p>
<p>在新版的 Search Console 中只能添加站点地图，却没有删除站点地图的接口，后来在 <a href="https://www.dear.today/731.html" target="_blank" rel="noopener">Google Search Console 删除站点地图方法</a> 一文中发现了解决办法：需要在 <a href="www.google.com/webmasters/tools/sitemap-list">旧版 Search Console</a> 中才能删除。</p>
<h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><p>在 <a href="https://ziyuan.baidu.com/site" target="_blank" rel="noopener">百度搜索资源平台</a> 中提交站点域名，勾选站点属性，最后一步中同样会要求验证网站的所有权身份，选择 <strong>HTML标签验证</strong>，然后将 <code>meta</code> 标签的 <code>content</code> 属性值复制到主题配置文件中：：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/baidu-verify-site.png" alt="Baidu 选择验证方式" title="Baidu 选择验证方式"></p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site/</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span> <span class="string">UHED80Nn65</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>hexo generate deploy</code> 重新部署站点，此时网站中就已经自动包含了用于验证身份的 <code>meta</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=<span class="string">"UHED80Nn65"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>回到百度站长管理平台点击完成验证按钮，验证成功后将进入控制台，在左侧 <strong>数据引入</strong> 菜单下点击 <strong>链接提交</strong>，在此可以看到除了sitemap之外还提供了多种推送站点内容的方案：</p>
<ul>
<li>主动推送：通过API接口推送站点内容，实时性较高</li>
<li>自动推送：在网页内添加JS脚本，每当页面被访问的时候会将页面url推送给百度，比较被动</li>
<li>sitemap：填写站点地图文件地址，百度会周期性的抓取其中的内容进行分析收录，收录效率比较低</li>
<li>手动提交：手动填写链接地址进行收录</li>
</ul>
<p>本站采用主动推送和自动推送相结合的形式推送站点内容。</p>
<h4 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h4><p>Hexo中可以借助 <a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">hexo-baidu-url-submit</a> 插件快捷实现主动推送，在根目录下安装相关依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-baidu-<span class="keyword">url</span>-submit <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加以下代码：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span>  <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">yearito.cn</span>  <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxx</span>  <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span>  <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>

<p>然后在站点配置文件中修改部署策略：</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  # Deployment</span><br><span class="line">  ## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"><span class="deletion">- deploy:</span></span><br><span class="line"><span class="deletion">-   type: git</span></span><br><span class="line"><span class="deletion">-   repo: git@yearito.cn:~/blog.yearito.git</span></span><br><span class="line"><span class="addition">+ deploy:</span></span><br><span class="line"><span class="addition">+ - type: git</span></span><br><span class="line"><span class="addition">+   repo: git@yearito.cn:~/blog.yearito.git</span></span><br><span class="line"><span class="addition">+ - type: baidu_url_submitter # 百度</span></span><br></pre></td></tr></table></figure>

<p>每次部署的时候将会自动推送网站内容到百度。</p>
<h4 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h4><p>Next主题中内置了一键开启百度自动推送的选项：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>开启后将会自动在页面中添加如下脚本用于百度推送：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">    bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">    bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line">  s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每次访问站点页面都会通过以上脚本推送本页url到百度。</p>
<h3 id="必应"><a href="#必应" class="headerlink" title="必应"></a>必应</h3><p>在 <a href="https://www.bing.com/toolbox/webmaster" target="_blank" rel="noopener">必应网站管理员</a> 中提交站点域名，此时可以同时输入 sitemap 文件链接，然后同样会进入网站所有权验证页面，在选择二中复制 <code>meta</code> 标签的 <code>content</code> 属性值到主题配置文件中：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/bing-verify-site.png" alt="Bing 选择验证方式" title="Bing 选择验证方式"></p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bing Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster/</span></span><br><span class="line"><span class="attr">bing_site_verification:</span> <span class="string">538CCB61234CB4A0B1A71C4581705DCD</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>hexo generate deploy</code> 重新部署站点，此时网站中就已经自动包含了用于验证身份的 <code>meta</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msvalidate.01"</span> <span class="attr">content</span>=<span class="string">"538CCB61234CB4A0B1A71C4581705DCD"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>回到网站管理员页面点击验证按钮，验证成功后将进入控制台，可以在左侧导航菜单中点击 <strong>仪表板</strong> -&gt; <strong>配置我的网站</strong> -&gt; ** Sitemaps** 查看已提交的站点地图文件的解析抓取情况。</p>
<h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><div class="note info">
            <p>本节参考 <a href="https://blog.paddings.cn/2016/08/16/blog/Hexo-NexT-SEO/" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a> 及<br><a href="https://sofree.cc/meta-keywords/" target="_blank" rel="noopener">SEO優化：不要使用Meta Keywords關鍵字</a></p>
          </div>

<p>SEO（Search Engine Optimization）意指搜索引擎优化，可以帮助提高目标网站在搜索引擎中的排名，使得在别人搜索相关内容的时候更容易脱颖而出被人所发现，以提高个人站点的存在价值。</p>
<p>在Hexo中可以从以下几个方面进行简单的优化：</p>
<ul>
<li><p><strong>开启Next主题内置seo优化</strong></p>
<p>在主题配置文件中设置 <code>seo: true</code>，将会自动部署Next内置的seo优化方案，比如在 themes\next\layout\_partials\footer.swig 为链接添加 <code>rel=&quot;external nofollow&quot;</code> 属性。</p>
</li>
<li><p><strong>修改文章url地址格式</strong></p>
<p>默认的文章url地址为 <code>http://yoursite.com/:year/:month/:day/:title/</code>，这种url格式层级太多，并且如果文章标题是中文的话可能会发生转义而出现一堆乱码，不利于搜索引擎的爬取分析，因此建议在站点配置中修改 <code>permalink</code> 的格式来简化页面url，并尽量采用英文命名Markdown文件。</p>
</li>
</ul>
<p>在一些SEO优化的教程中会提到通过为页面添加 keywords 来影响搜索结果排名，事实上，在早期搜索引擎技术发展尚未成熟的时候，这样的做法确实有效，但当人们发现了这个规律后，就开始添加甚至无关的keywords来影响搜索结果排名，这一标签的滥用极大的降低了搜索引擎的准确度。随后，各大搜索引擎纷纷宣布不再将keywords作为搜索排名权重因子。</p>
<p>如Google就在2009年发布声明：<a href="https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html" target="_blank" rel="noopener">Google does not use the keywords meta tag in web ranking</a>。声明中表示Google不会将keywords标签作为网页排名的依据，未来也不会改变这一政策。部分原文摘录如下：</p>
<blockquote>
<p>Our web search (the well-known search at Google.com that hundreds of millions of people use each day) disregards keyword metatags completely. They simply don’t have any effect in our search ranking at present.</p>
</blockquote>
<blockquote>
<p>Google has ignored the keywords meta tag for years and currently we see no need to change that policy.</p>
</blockquote>
<p>而Bing则表示过多的keywords会被作为垃圾讯号，可能导致你的网站被归类为垃圾网站，详见<a href="https://searchengineland.com/the-meta-keywords-tag-lives-at-bing-why-only-spammers-should-use-it-96874" target="_blank" rel="noopener">The Meta Keywords Tag Lives At Bing &amp; Why Only Spammers Should Use It</a>。</p>
<p>说起keywords，不得不提到另外一个与之相关的meta标签description。那么description是否有助于提升搜索排名呢？Google仍然给出了否定的答案：</p>
<blockquote>
<p>Even though we sometimes use the description meta tag for the snippets we show, we still don’t use the description meta tag in our ranking.</p>
</blockquote>
<p>虽然description不影响搜索排名，但搜索引擎通常会将description作为快照显示在搜索结果页面作为内容补充，因此合适的description还是有助于吸引读者的目光增加网站的点击率的。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/search-snapshot.png" alt="搜索结果快照" title="搜索结果快照"></p>
<p>如果页面上没有description元标签的话，搜索引擎可能会从页面中自动抓取部分内容作为页面描述，至于说抓取质量可就没法保证了。</p>
<p>默认情况下，Next会使用 tags 作为页面 keywords，使用文章前两百个字符作为description。如果文章页面内含有 <code>&lt;!-- more --&gt;</code> 内容分隔符，则会使用分隔符之前的正文 description。用户也可以在Front-Matter中添加 keywords 和 description属性来手动指定页面meta标签内容。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/keywords-description.png" alt="keywords &amp; description" title="keywords &amp; description"></p>
<p>越是容易被人为操控的SEO影响因子，影响力就会越来越低，所以：</p>
<blockquote class="blockquote-center"><p>最好的SEO优化是做好内容，最好的加薪办法是做好工作。</p>
</blockquote>

<h1 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h1><p>Nginx默认的404页面有些简陋，这里有两种自定义404页面的方案。</p>
<p><strong>第一种是仍沿用Hexo主题的页面框架，基于 page 布局搭建404页面。</strong></p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/404pages.png" alt="基于主题布局的404页面" title="基于主题布局的404页面"></p>
<p>在 source 目录下新建 404.md 文件，添加如下内容：</p>
<figure class="highlight html"><figcaption><span>source\404.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center; font-size: 36px"</span>&gt;</span></span><br><span class="line">  404 页面未找到</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"window.history.back()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-double-left fa-fw fa-lg"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    返回</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  &#123;% btn /, 首页, home fa-fw fa-lg %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用户可以在此基础上自定义修改显示内容。</p>
<p><strong>第二种是完全抛弃掉Hexo的框架，搭建一个纯粹的自定义 404 HTML 页面。</strong></p>
<p>在 source 目录下新建 404.html 文件，自行编写页面结构与样式。你也可以直接在网上搜索404页面模板并下载使用，一般都不会太复杂，一个HTML文件就能搞定。例如 <a href="https://freefrontend.com/html-css-404-page-templates/" target="_blank" rel="noopener">28 HTML 404 Page Templates</a> 中就提供了很多精美的动态404页面。</p>
<p>此时打包的时候Hexo仍会渲染该文件，添加上复杂的主题框架与功能，用户可以修改站点配置文件以跳过渲染该文件：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="number">404.</span><span class="string">html</span></span><br></pre></td></tr></table></figure>

<p>这样以来Hexo在打包的时候就只是将该文件复制到 public 目录下，而不做任何处理了。</p>
<p>以上仅仅是搭建起了404页面，至于如何在服务器返回404响应时重定向到该页面，还要依赖于Nginx的配置规则。修改VPS上的Nginx配置文件，添加一行404页面重定向规则：</p>
<figure class="highlight diff"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">  http &#123;</span><br><span class="line">    include  mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">      listen  80;</span><br><span class="line">      root /var/www/blog.yearito;</span><br><span class="line"><span class="addition">+     error_page 404 /404.html;      </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>修改后执行 <code>nginx -s reload</code> 重新加载配置文件即可生效。</p>
<h1 id="RSS链接"><a href="#RSS链接" class="headerlink" title="RSS链接"></a>RSS链接</h1><p>什么是RSS，RSS有什么用？第一次在别人的博客搭建教程中了解到这个概念的时候，同样的问题也困扰着我。通过订阅网站RSS可以第一时间发现站点内容的更新，而不用自己跑到站点去刷新，这是一个轮询到通知的转变。</p>
<div class="note ">
            <p>虽然大致知道它的用途，但还是理解不够深刻，读者可以参考 <a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS | 阮一峰</a> 来帮助理解这一概念。</p>
          </div>

<p>在站点根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>然后站点概览中就会自动出现feed链接：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/rss-feed.png" alt="站点 feed 链接" title="站点 feed 链接"></p>
<p>在主题配置文件中不需要设置rss的值，置空即可，如果设置为 <code>true</code> 反而会导致如下报错：</p>
<blockquote>
<p><a href="https://github.com/iissnan/theme-next-docs/issues/99" target="_blank" rel="noopener">Unhandled rejection TypeError: path.substring is not a function</a></p>
</blockquote>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文介绍了在站点部署上线过程中将会遇到的各种技术问题，包括部署到VPS中的三步实现方案，优化页面加载性能的方法等。至此，Hexo搭建个人博客系列的最后一篇文章也已经完成，本站历经2个月的修修改改后也终于上线与大家见面了。如果你喜欢本站，可以在我的 <a href="http://github.com/Coodool/hexo-blog-yearito" target="_blank" rel="noopener">Github仓库</a> 上Fork或者Star。关于本系列文章如果有什么疑问与指正，也欢迎私信或者评论。</p>
<div class="reference-linking">参考链接</div>

<ul>
<li><a href="https://blog.yizhilee.com/post/deploy-hexo-to-vps/" target="_blank" rel="noopener">荔枝 | 通过 Git Hooks 自动部署 Hexo 到 VPS</a></li>
<li><a href="https://stackoverflow.com/questions/31729240/how-to-analyzing-page-speed-in-chrome-dev-tools" target="_blank" rel="noopener">How to analyzing Page Speed in Chrome Dev tools</a></li>
<li><a href="https://segmentfault.com/q/1010000011840948/a-1020000011947156" target="_blank" rel="noopener">chrome devtools 中 network 一栏中的 Finish 时间代表着什么</a></li>
<li><a href="https://help.hotjar.com/hc/en-us/articles/115009335727-Will-Hotjar-Slow-Down-My-Site-" target="_blank" rel="noopener">Will Hotjar Slow Down My Site?</a></li>
<li><a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="noopener">hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一</a></li>
<li><a href="https://blog.paddings.cn/2016/08/16/blog/Hexo-NexT-SEO/" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a></li>
<li><a href="https://sofree.cc/meta-keywords/" target="_blank" rel="noopener">SEO優化：不要使用Meta Keywords關鍵字</a></li>
<li><a href="https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html" target="_blank" rel="noopener">Google does not use the keywords meta tag in web ranking</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS | 阮一峰</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客系列：进阶设置篇</title>
    <url>/hexo-advanced-settings/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>本篇文章介绍了如何为 Hexo 博客集成更多强大的功能。</p>
          </div>

<a id="more"></a>

<p>第一章介绍了在站点中集成基于三方插件的数据统计服务，包括站点PV和PU统计、站点运行时间统计、文章PV统计、站点和文章字数统计等。</p>
<p>第二章介绍了针对于站点的个性化设置方案，包括添加搞怪的网页标题，添加站内搜索功能，添加热门文章排行榜页面，添加豆瓣阅读/电影/游戏等资料页面，添加在线聊天和即时反馈等功能。</p>
<p>第三章介绍了针对于文章页面的个性化设置方案，包括在文章末尾添加评论组件、评分组件、打赏入口、版权声明、推荐文章等，为文章中的图片添加点击灯箱效果，以及为文章设置访问密码。</p>
<h1 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h1><h2 id="站点访问量统计"><a href="#站点访问量统计" class="headerlink" title="站点访问量统计"></a>站点访问量统计</h2><p>该功能由 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a> 提供，效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/busuanzi-site-footer.png" alt="站点访问统计" title="站点访问统计"></p>
<p>左侧数据表示独立访客数UV，右侧数据表示网站浏览量PV，访客数和浏览量的区别在于一个用户连续点击n篇文章，会记录n次浏览量，但只记录一次访客数。</p>
<div class="note ">
            <p>由于不蒜子是基于域名来进行统计计算的，所以通过 localhost:4000 端口访问的时候统计数据PV和UV都会异常的大，属于正常现象。</p>
          </div>

<p>在页脚布局模板文件首行添加如下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_partial\footer.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中做出如下修改：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>   <span class="comment"># 访客数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>   <span class="comment"># 访问量</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>

<p>刷新浏览器即可生效。</p>
<p>高阶用法：通过修改代码来自定义统计文案，如果你想使用本站统计文案，需要对不蒜子的代码做出如下修改：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_third-party\analytics\busuanzi-counter.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  &#123;% if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line"><span class="deletion">-   &lt;span class="site-uv" title="&#123;&#123; __('footer.total_visitors') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;span class="site-uv"&gt;</span></span><br><span class="line"><span class="addition">+     &#123;&#123; __('footer.total_visitors', '&lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line"><span class="deletion">-     &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_views %&#125;</span><br><span class="line"><span class="deletion">-   &lt;span class="site-pv" title="&#123;&#123; __('footer.total_views') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;span class="site-pv"&gt;</span></span><br><span class="line"><span class="addition">+     &#123;&#123; __('footer.total_views', '&lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line"><span class="deletion">-     &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;</span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在自定义样式文件中添加如下样式：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//修改不蒜子数据颜色</span><br><span class="line"><span class="selector-class">.busuanzi-value</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改统计表述文案：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="string">"历经 %s 次回眸才与你相遇"</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="string">"我的第 %s 位朋友，"</span></span><br></pre></td></tr></table></figure>

<h2 id="站点运行时间统计"><a href="#站点运行时间统计" class="headerlink" title="站点运行时间统计"></a>站点运行时间统计</h2><div class="note info">
            <p>本章节受 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 #5.7</a> 启发，自行重构了代码逻辑。</p>
          </div>

<p>在站点底部显示站点已运行时间，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/site-running-time.png" alt="站点运行时间" title="站点运行时间"></p>
<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>thems\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# 页脚站点运行时间统计 #&#125;</span><br><span class="line">&#123;% if theme.footer.ages.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> ages = moment.preciseDiff(moment(),moment(&#123;&#123; theme.footer.ages.birthday &#125;&#125;,<span class="string">"YYYYMMDD"</span>));</span></span><br><span class="line"><span class="javascript">      ages = ages.replace(<span class="regexp">/years?/</span>, <span class="string">"年"</span>);</span></span><br><span class="line"><span class="javascript">      ages = ages.replace(<span class="regexp">/months?/</span>, <span class="string">"月"</span>);</span></span><br><span class="line"><span class="javascript">      ages = ages.replace(<span class="regexp">/days?/</span>, <span class="string">"天"</span>);</span></span><br><span class="line"><span class="javascript">      ages = ages.replace(<span class="regexp">/hours?/</span>, <span class="string">"小时"</span>);</span></span><br><span class="line"><span class="javascript">      ages = ages.replace(<span class="regexp">/minutes?/</span>, <span class="string">"分"</span>);</span></span><br><span class="line"><span class="javascript">      ages = ages.replace(<span class="regexp">/seconds?/</span>, <span class="string">"秒"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">      ages = ages.replace(/\d+/g, '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:</span></span></span><span class="template-variable">&#123;&#123; theme.footer.ages.color &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span></span><br><span class="line"><span class="javascript">      div.innerHTML = <span class="string">`&#123;&#123; __('footer.age')&#125;&#125; <span class="subst">$&#123;ages&#125;</span>`</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//插入到copyright之后</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> copyright = <span class="built_in">document</span>.querySelector(<span class="string">".copyright"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">".footer-inner"</span>).insertBefore(div, copyright.nextSibling);</span></span><br><span class="line">    timer();</span><br><span class="line"><span class="actionscript">    setInterval(<span class="string">"timer()"</span>,<span class="number">1000</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>修改主题配置文件：</p>
<figure class="highlight diff"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  footer:</span><br><span class="line">    ...</span><br><span class="line"><span class="addition">+   ages:</span></span><br><span class="line"><span class="addition">+     # site running time</span></span><br><span class="line"><span class="addition">+     enable: true</span></span><br><span class="line"><span class="addition">+     # birthday of your site</span></span><br><span class="line"><span class="addition">+     birthday: 20181001</span></span><br><span class="line"><span class="addition">+     # color of number</span></span><br><span class="line"><span class="addition">+     color: "#1890ff"</span></span><br></pre></td></tr></table></figure>

<p>然后补全对应文案：</p>
<figure class="highlight diff"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  footer:</span><br><span class="line">    powered: "由 %s 强力驱动"</span><br><span class="line">    theme: 主题</span><br><span class="line"><span class="addition">+   age: 我已在此等候你</span></span><br><span class="line">    total_views: "历经 %s 次回眸才与你相遇"</span><br><span class="line">    total_visitors: "我的第 %s 位朋友，"</span><br></pre></td></tr></table></figure>

<p>刷新浏览器即可生效。</p>
<div class="note info">
            <p>日期统计计算功能由 <a href="https://momentjs.com/" target="_blank" rel="noopener">moment</a> 和 <a href="https://github.com/codebox/moment-precise-range" target="_blank" rel="noopener">moment-precise-range</a> 提供，也可用原生JS Date对象来实现。</p>
          </div>

<h2 id="文章访问量统计"><a href="#文章访问量统计" class="headerlink" title="文章访问量统计"></a>文章访问量统计</h2><div class="note info">
            <p>本章节参考 <a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">夏末 | 为NexT主题添加文章阅读量统计功能</a></p>
          </div>

<p>该功能基于 <a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a> 提供后端数据服务，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-pageviews.png" alt="文章访问量" title="文章访问量"></p>
<p>在LeanCloud上注册账号并创建应用，新建一个名为 Counter 的Class，ACL权限设置为 <strong>无限制</strong>：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/LeanCloud-Counter-class.png" alt="新建Counter类" title="新建Counter类"></p>
<div class="note info">
            <p>在LeanCloud中的Class可以理解为数据库中的数据表。Counter用于存储记录文章访问量，记录是以url作为唯一依据的，所以根据默认的permalink组成结构，如果你更改了文章的发布日期和标题中的任意一个，都会造成文章阅读数值的清零重计。</p>
          </div>

<p>在控制台的 <strong>设置</strong> -&gt; <strong>应用Key</strong> 中获取App ID和App Key填入到主题配置文件中：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">***&lt;app_id***</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">***&lt;app_key&gt;***</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>站点上线后可以在 <strong>设置</strong> -&gt; <strong>安全中心</strong> 中添加博客域名到 Web 安全域名中，设置后仅可在该域名下通过 JavaScript SDK 调用服务器资源，借以保护LeanCloud应用的数据安全。</p>
<p>如果想要自定义PV表述文案，可以修改文章布局模板中的相关代码：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  &#123;# LeanCould PageView #&#125;</span><br><span class="line">    ...</span><br><span class="line">    &#123;% if theme.post_meta.item_text %&#125;</span><br><span class="line"><span class="deletion">-     &lt;span class="post-meta-item-text"&gt;&#123;&#123;__('post.views') + __('symbol.colon') &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+     &lt;span class="post-meta-item-text"&gt;&#123;&#123;__('post.views')&#125;&#125; &lt;/span&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &lt;span class="leancloud-visitors-count"&gt;&lt;/span&gt;</span><br><span class="line"><span class="addition">+   &lt;span&gt;℃&lt;/span&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>修改统计表述文案：</p>
<figure class="highlight yaml"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">views:</span> <span class="string">热度</span></span><br></pre></td></tr></table></figure>

<p>刷新浏览器即可生效。</p>
<p>如果遇到如下报错，可能是你配置了 <code>security: true</code> 但又没有做好安全策略配置。</p>
<blockquote>
<p>阅读次数： Counter not initialized! See more at console err msg.</p>
</blockquote>
<p>有以下两种解决方案：</p>
<ul>
<li>下载安装 <a href="https://github.com/theme-next/hexo-leancloud-counter-security" target="_blank" rel="noopener">hexo-leancloud-counter-security</a> 插件</li>
<li>在主题配置中设置 <code>security: false</code></li>
</ul>
<p>个人推荐第二种，简单粗暴。</p>
<p>除了LeanCloud，不蒜子也能提供文章阅读次数统计，但是不蒜子的统计结果只会在文章页显示，而不会显示在首页列表中，相关讨论可以参见 <a href="https://github.com/iissnan/hexo-theme-next/issues/801" target="_blank" rel="noopener">阅读计数。对比LeanCloud和不蒜子</a></p>
<h2 id="站点及文章字数统计"><a href="#站点及文章字数统计" class="headerlink" title="站点及文章字数统计"></a>站点及文章字数统计</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a> 提供，效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/site-word-count.png" alt="站点字数统计" title="站点字数统计"></p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-word-count.png" alt="文章字数统计" title="文章字数统计"></p>
<p>在根目录下执行如下命令安装相关依赖</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>启用该功能需要同时修改站点配置文件和主题配置文件。</p>
<p>将如下配置项添加到<strong>站点配置文件</strong>中，这些配置项主要用于控制每项统计信息是否显示。</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>   <span class="comment"># 统计单篇文章字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">false</span>   <span class="comment"># 取消估算单篇文章阅读时间</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>  <span class="comment"># 统计站点总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span>  <span class="comment"># 取消估算站点总阅读时间</span></span><br></pre></td></tr></table></figure>

<p>在<strong>主题配置文件</strong>中做如下修改，这些配置项主要用于控制统计信息的显示样式。</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span>  <span class="comment"># 统计信息不换行显示</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 文章统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span>   <span class="comment"># 站点统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>  <span class="comment"># Average Word Length：平均字符长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>  <span class="comment"># Words Per Minute：阅读速度</span></span><br></pre></td></tr></table></figure>

<p>汉字的平均字符长度为1.5，如果在文章中使用纯中文进行写作（没有混杂英文），那么推荐设置 <code>awl: 2</code> 及 <code>wpm: 300</code>，但是如果文章中存在英文，建议设置 <code>awl: 4</code> 及 <code>wpm: 275</code>。</p>
<p>因为修改了站点配置文件，所以需要重新启动服务器才能生效。</p>
<h1 id="站点个性化设置"><a href="#站点个性化设置" class="headerlink" title="站点个性化设置"></a>站点个性化设置</h1><h2 id="搞怪网页标题"><a href="#搞怪网页标题" class="headerlink" title="搞怪网页标题"></a>搞怪网页标题</h2><div class="note info">
            <p>本章节参考 <a href="https://diygod.me/2153/" target="_blank" rel="noopener">DIYgod | 我藏好了哦</a></p>
          </div>

<p>离开和进入页面时动态修改Tab标签中的标题。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/title-trick.png" alt="搞怪网页标题" title="搞怪网页标题"></p>
<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# 搞怪网页标题 #&#125;</span><br><span class="line">&#123;% if theme.title_trick.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> titleTime;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.title = <span class="string">'&#123;&#123; theme.title_trick.leave &#125;&#125;'</span> + OriginTitile;</span></span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.title = <span class="string">'&#123;&#123; theme.title_trick.enter &#125;&#125;'</span> + OriginTitile;</span></span><br><span class="line"><span class="actionscript">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.title = OriginTitile;</span></span><br><span class="line">        &#125;, 2000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># a trick on website title</span></span><br><span class="line"><span class="attr">title_trick:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">leave:</span> <span class="string">"(つェ⊂)我藏好了哦~"</span></span><br><span class="line">  <span class="attr">enter:</span> <span class="string">"(*´∇｀*) 被你发现啦~"</span></span><br></pre></td></tr></table></figure>

<h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a> 提供，效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/local-search.png" alt="站内搜索" title="站内搜索"></p>
<p>在根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在<strong>主题配置</strong>文件中修改相关字段：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span>  <span class="comment"># 每次输入改变都执行搜索</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">3</span>  <span class="comment"># 每篇文章显示的搜索结果数量</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在<strong>站点配置</strong>文件中添加以下字段：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span>  <span class="comment"># 指定搜索范围，可选 post | page | all</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span>  <span class="comment"># 指定页面内容形式，可选 html | raw (Markdown) | excerpt | more</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>在自定义样式文件中添加如下样式规则来增加搜索弹窗的页边距：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//增加搜索弹窗的页边距</span><br><span class="line"><span class="selector-class">.local-search-popup</span> <span class="selector-id">#local-search-result</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">40px</span></span><br><span class="line">  height: <span class="built_in">calc</span>(100% - 95px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你同时在站点内启用了 wobblewindow 边缘摆动效果，则有可能会出现背景蒙版叠加在弹窗之前的问题，这种层级叠加异常的问题主要是因为 wobblewindow 中修改了弹窗父元素的 <code>position</code> 定位和 <code>z-index</code> 优先级，目前只能通过修改 localsearch 源码来修复该Bug：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_third-party\search\localsearch.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: path,</span><br><span class="line">    dataType: isXml ? "xml" : "json",</span><br><span class="line">    async: true,</span><br><span class="line">    success: function(res) &#123;</span><br><span class="line">      // get the contents from search data</span><br><span class="line">      isfetched = true;</span><br><span class="line"><span class="deletion">-     $('.popup').detach().appendTo('.header-inner');</span></span><br><span class="line"><span class="addition">+     $('.popup').detach().appendTo('body');</span></span><br><span class="line">      var datas = isXml ? $("entry", res).map(function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          title: $("title", this).text(),</span><br><span class="line">          content: $("content",this).text(),</span><br><span class="line">          url: $("url" , this).text()</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;).get() : res;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>

<h2 id="热门文章排行榜"><a href="#热门文章排行榜" class="headerlink" title="热门文章排行榜"></a>热门文章排行榜</h2><div class="note info">
            <p>本章节部分思路参考 <a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">nMask | Hexo搭建博客教程 #7.16</a>，自行进行了代码重构。</p>
          </div>

<p>添加文章阅读次数排行统计页面，效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/top10.png" alt="热门文章排行榜" title="热门文章排行榜"></p>
<p>该功能同样是基于LeanCloud提供的后端服务支持。具体实现方案如下：</p>
<p>在站点目录下执行以下命令新建页面</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>top</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中新增一项菜单入口：</p>
<figure class="highlight diff"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: / || home</span><br><span class="line"><span class="addition">+   top: /top/ || signal</span></span><br><span class="line">    tags: /tags/ || tags</span><br><span class="line">    categories: /categories/ || th</span><br><span class="line">    archives: /archives/ || archive</span><br><span class="line">    about: /about/ || user</span><br></pre></td></tr></table></figure>

<p>在语言包中新增菜单中文：</p>
<figure class="highlight diff"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: 首页</span><br><span class="line">    archives: 归档</span><br><span class="line">    categories: 分类</span><br><span class="line">    tags: 标签</span><br><span class="line">    about: 关于</span><br><span class="line"><span class="addition">+   top: 排行榜</span></span><br></pre></td></tr></table></figure>

<p>然后在新增的排行榜页面内添加以下内容：</p>
<figure class="highlight html"><figcaption><span>source\top\index.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 热门文章Top 10</span><br><span class="line">comments: false</span><br><span class="line">date: 2018-10-30 00:54:50</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"post-rank"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.jsdelivr.net/npm/leancloud-storage@3.10.0/dist/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> APP_ID = ******;  <span class="comment">//输入个人LeanCloud账号AppID</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> APP_KEY = ******;  <span class="comment">//输入个人LeanCloud账号AppKey</span></span></span><br><span class="line">  AV.init(&#123;</span><br><span class="line">    appId: APP_ID,</span><br><span class="line">    appKey: APP_KEY</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);<span class="comment">//表名</span></span></span><br><span class="line"><span class="actionscript">  query.descending(<span class="string">'time'</span>); <span class="comment">//结果按阅读次数降序排序</span></span></span><br><span class="line"><span class="actionscript">  query.limit(<span class="number">10</span>);  <span class="comment">//最终只返回10条结果</span></span></span><br><span class="line"><span class="javascript">  query.find().then( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> content = response.reduce( <span class="function">(<span class="params">accum, &#123;attributes&#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      accum += `<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prefix"</span>&gt;</span>热度 $&#123;attributes.time&#125; ℃<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;attributes.url&#125;"</span>&gt;</span>$&#123;attributes.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> accum;</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="string">""</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">"#post-rank"</span>).innerHTML = content;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  .catch( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#post-rank</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#post-rank</span> <span class="selector-class">.prefix</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ff4d4f</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本是根据 <a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">nMask | Hexo搭建博客教程 #7.16</a> 引入v0.6.1的脚本来实现该功能，结果发现出现如下Bug：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/LeanCloud-bug.png" alt="LeanCloud v0.6.1 Bug" title="LeanCloud v0.6.1 Bug"></p>
<p>后来根据 <a href="https://leancloud.cn/docs/leanstorage_guide-js.html" target="_blank" rel="noopener">LeanCloud | JavaScript SDK 安装指南</a> 引入v3.10.0的最新脚本，使用过程中虽然功能正常，但是控制台有报错信息:</p>
<blockquote>
<p> Uncaught TypeError: Cannot redefine property: applicationId</p>
</blockquote>
<h2 id="豆瓣阅读-电影-游戏"><a href="#豆瓣阅读-电影-游戏" class="headerlink" title="豆瓣阅读/电影/游戏"></a>豆瓣阅读/电影/游戏</h2><div class="note info">
            <p>本章节参考 <a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">mythsman/hexo-douban README.md</a></p>
          </div>

<p>为站点添加豆瓣阅读/电影/游戏页面，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/douban-movies.png" alt="豆瓣电影" title="豆瓣电影"></p>
<p>在根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-douban <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加以下内容：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span>  <span class="comment"># 个人豆瓣ID</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my book title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my book quote'</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my movie title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my movie quote'</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my game title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my game quote'</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>user: 填写豆瓣ID。登陆豆瓣后点击<strong>个人主页</strong>，此时url中最后一段即是用户ID，一般情况下会是一段数字，如果设置了个人域名的话，则个人域名即为ID。</li>
<li>builtin: 是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中。</li>
<li>timeout: 爬取数据的超时时间。</li>
</ul>
<p>如果只想生成某一个页面（比如只生成读书页面），把其他的配置项注释掉即可。</p>
<p>在主题配置文件中新增菜单入口：</p>
<figure class="highlight diff"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: / || home</span><br><span class="line">    tags: /tags/ || tags</span><br><span class="line">    categories: /categories/ || th</span><br><span class="line">    archives: /archives/ || tasks</span><br><span class="line"><span class="addition">+   books: /books/ || book  </span></span><br><span class="line"><span class="addition">+   movies: /movies/ || video-camera  </span></span><br><span class="line"><span class="addition">+   games: /games/ || gamepad</span></span><br></pre></td></tr></table></figure>

<p>在语言包中新增菜单中文：</p>
<figure class="highlight diff"><figcaption><span>themes\next\language\zh_CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: 首页</span><br><span class="line">    archives: 归档</span><br><span class="line">    categories: 分类</span><br><span class="line">    tags: 标签</span><br><span class="line"><span class="addition">+   movies: 电影</span></span><br><span class="line"><span class="addition">+   books: 读书</span></span><br><span class="line"><span class="addition">+   games: 游戏</span></span><br></pre></td></tr></table></figure>

<p>然后在根目录下执行以下命令生成豆瓣阅读/电影/游戏页面：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo douban</span><br></pre></td></tr></table></figure>

<p>可选参数:</p>
<ul>
<li>-b | --books: 只生成豆瓣读书页面</li>
<li>-m | --movies:  只生成豆瓣电影页面</li>
<li>-g | --games: 只生成豆瓣游戏页面</li>
</ul>
<p>执行命令后，插件会根据用户提供的ID爬取豆瓣中的数据信息并在 <code>public</code> 目录下生成对应的页面，当服务器启动或部署后会将页面显示在对应的菜单路由下。</p>
<p>如果在站点配置中设置了 <code>douban.builtin: false</code>，则每次豆瓣数据变动后需要手动执行一次 <code>hexo douban</code> 来刷新页面数据。如果设置了 <code>douban.builtin: true</code>，则每次执行 <code>hexo s</code> 和 <code>hexo g</code> 的时候将会自动同时执行 <code>hexo douban</code> 命令，但这样可能会增加打包编译的时间。建议如果豆瓣数据变动不频繁的情况下该项设为 <code>false</code> 即可。</p>
<p>通常大家都喜欢用 <code>hexo d</code> 来作为 <code>hexo deploy</code> 命令的简化，但是当安装了 <code>hexo douban</code> 之后， <code>hexo d</code> 就会有歧义而无法执行，因为 <code>hexo douban</code> 跟 <code>hexo deploy</code> 的Alias都是 <code>hexo d</code>。</p>
<h2 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h2><p>在线聊天算是一个比较成熟的SaaS商业应用了，业内产品如 <a href="https://www.tidiochat.com/" target="_blank" rel="noopener">Tidio</a>、 <a href="https://talkjs.com/" target="_blank" rel="noopener">TalkJS</a>、<a href="https://www.intercom.com/" target="_blank" rel="noopener">Intercom</a>、<a href="https://www.tawk.to/" target="_blank" rel="noopener">tawk.to</a> 等，使用体验都很好，交互界面也很干净别致。经过比较，本站最终选择了 Tidio：</p>
<ul>
<li>在个人博客这种业务场景中，几乎用不到它的收费功能，可以算是终身免费了。</li>
<li>Tidio提供了多种消息回复渠道，包括网页、桌面应用、iOS/Android APP（需要Google play服务支持）。</li>
<li>除了在线聊天，Tidio还可以在线发送邮件，以及关联接收Fackbook消息。</li>
<li>在几款产品的界面风格中，还是 Tidio 看起来更加优雅一些，深得我爱。</li>
</ul>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/Tidio.png" alt="Tidio 界面" title="Tidio 界面"></p>
<p>首先需要<a href="https://www.tidiochat.com/panel/login" target="_blank" rel="noopener">注册Tidio账号</a>，根据引导填写应用信息。进入控制台后，在 <strong>SETTINGS</strong> -&gt; <strong>Developer</strong> -&gt; <strong>Project data</strong> 中获取到Public Key：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/tidio-public-key.png" alt="Tidio Public Key" title="Tidio Public Key"></p>
<p>在主题配置文件下添加以下代码并补全Public Key：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tidio online chat</span></span><br><span class="line"><span class="comment"># see: https://www.tidiochat.com</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">key:</span>  <span class="comment"># Public_Key</span></span><br></pre></td></tr></table></figure>

<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# Tidio 在线联系功能 #&#125;</span><br><span class="line">&#123;% if theme.tidio.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//code.tidio.co/&#123;&#123; theme.tidio.key &#125;&#125;.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为避免代码加载阻塞页面渲染，需要为脚本添加 <code>async</code> 属性使其异步加载。</p>
<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>刷新页面即可在右下角看到Tidio的会话标志了。接下来可以在Tidio控制台的 <strong>Channel</strong> -&gt; <strong>Live chat</strong> -&gt;  <strong>Appearance</strong> 中根据提示定制聊天对话框的主题外观和语言包：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/Tidio-appearance.png" alt="定制Tidio样式与功能" title="定制Tidio样式与功能"></p>
<h2 id="行为监测与反馈"><a href="#行为监测与反馈" class="headerlink" title="行为监测与反馈"></a>行为监测与反馈</h2><p><a href="https://www.hotjar.com/" target="_blank" rel="noopener">Hotjar</a> 是一款轻量级的监测分析工具，能够提供用户行为监测和用户反馈分析，相比Google Analysis而言，它没有复杂的监测指标与分析报表，更加的简单实用，并且为免费用户提供2000pv/day的数据采集服务，适用于小型网站或个人博客的监测分析。</p>
<p>Hotjar主要提供<strong>ANALYTICS</strong>和<strong>FEEDBACK</strong>两大类服务。</p>
<p>ANALYTICS主要用于用户交互行为的监测分析，属于客观分析，包括以下四项具体功能：</p>
<ul>
<li>Heatmaps: 通过热力图可视化用户的鼠标交互行为，帮助理解用户动机和需求。</li>
<li>Recording: 记录用户在站点的行为轨迹，了解应用的可用性以及用户遭遇的问题。</li>
<li>Funnels: 记录每个页面或者步骤的用户流失率。</li>
<li>Forms: 记录表单中每一项输入的完成率，完成时间以及用户流失率。</li>
</ul>
<p>FEEDBACK主要为用户提供反馈渠道，收集用户观点与数据，属于主观分析，包括以下四项具体功能：</p>
<ul>
<li>Incoming: 即时反馈，了解用户对页面的评价。</li>
<li>Polls: 投票反馈，获取某个问题的用户答案。</li>
<li>Surveys: 问卷调查，以问卷形式获取用户反馈。</li>
<li>Recruiters: 获取用户信息，招募用户用于用户调查或测试反馈。</li>
</ul>
<p>Hotjar通过以上八项具体而实用的功能为用户提供主客观相结合的监测分析服务，可以说它是所有轻量级分析工具中唯一做到了主客观相结合的，同时也是所有主客观分析工具中，做的最轻量的。</p>
<div class="note info">
            <p>更多功能介绍请参考 <a href="https://www.hotjar.com/tour" target="_blank" rel="noopener">Hotjar Features</a></p>
          </div>

<p>本站点中应用了Incoming即时反馈功能，读者可以通过该渠道评价页面或者提交勘误，点击悬挂在屏幕右侧的Feedback按钮弹出对话框，点击人物头像评价后将会跳转到如下界面：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-feedback.png" alt="Hotjar Incoming Feedback" title="Hotjar Incoming Feedback"></p>
<p>你可以在此页面输入反馈内容，并通过点击左下角的按钮在当前页面上标识目标元素，之后 hotjar 会将反馈内容连同带有高亮标识的页面截图一起提交到后台：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-feedback-screenshot.png" alt="Incoming Feedback with screenshot " title="Incoming Feedback with screenshot"></p>
<div class="note info">
            <p>更多关于 Incoming Feedback 的介绍请参考 <a href="https://www.hotjar.com/incoming-feedback" target="_blank" rel="noopener">Incoming Feedback by Hotjar</a></p>
          </div>

<p>在站点中集成Hotjar的各项功能，需要先 <a href="https://insights.hotjar.com/register" target="_blank" rel="noopener">注册 Hotjar 账号</a>，根据指引一步步填写站点信息，然后在控制面板首页中获取site ID：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-site-id.png" alt="Hotjar site ID" title="Hotjar site ID"></p>
<p>在主题配置文件下添加以下代码并补全site ID：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hotjar</span></span><br><span class="line"><span class="comment"># see: https://www.hotjar.com/</span></span><br><span class="line"><span class="attr">hotjar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">siteID:</span>  <span class="comment"># site ID</span></span><br></pre></td></tr></table></figure>

<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# hotjar 页面反馈 #&#125;</span><br><span class="line">&#123;% if theme.hotjar.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">(h,o,t,j,a,r)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      h.hj=h.hj||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(h.hj.q=h.hj.q||[]).push(<span class="built_in">arguments</span>)&#125;;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      h._hjSettings=&#123;hjid:</span><span class="template-variable">&#123;&#123; theme.hotjar.siteID &#125;&#125;</span><span class="xml">,hjsv:6&#125;;</span></span></span><br><span class="line"><span class="actionscript">      a=o.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">      r=o.createElement(<span class="string">'script'</span>);r.async=<span class="number">1</span>;</span></span><br><span class="line">      r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;</span><br><span class="line">      a.appendChild(r);</span><br><span class="line"><span class="javascript">    &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'https://static.hotjar.com/c/hotjar-'</span>,<span class="string">'.js?sv='</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>如此即可将 Hotjar 嵌入到站内，接下来在 Hotjar 控制台菜单中点击 Incoming，然后根据引导一步步配置即时反馈服务即可：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-setup-incoming.png" alt="配置 Incoming Feedback" title="配置 Incoming Feedback"></p>
<div class="note info">
            <p>如果你在本站内发现了错别字、病句、失效链接、代码缩进不一致，可以通过页面右侧的Feedback反馈。</p>
          </div>

<h1 id="文章页面个性化设置"><a href="#文章页面个性化设置" class="headerlink" title="文章页面个性化设置"></a>文章页面个性化设置</h1><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>Next支持多款评论系统：</p>
<ul>
<li><a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>：欧美UI风格，支持Tweet、Facebook等国外社交软件的三方登陆和一键分享。 <a href="https://blog.disqus.com/disqus-welcomes-the-spruce" target="_blank" rel="noopener">Demo</a></li>
<li><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a>：必须用github账号登陆才能评论，支持Markdown语法，与github issues页面风格一致 <a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Demo</a></li>
<li><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>：支持匿名评论，支持Markdown语法，界面简洁美观</li>
<li><a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a>：国产评论系统，可区分热评和最新评论，论坛贴吧风</li>
<li><a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>：支持插入图片和GIF，支持国内外多种社交媒体的三方登陆 <a href="https://www.livere.com/city-demo" target="_blank" rel="noopener">Demo</a></li>
</ul>
<p>博客的评论系统不需要太过复杂的功能，我的要求是一定要轻量级，足够简洁美观，并且支持Markdown语法，因此我首选Valine和gitment，这两个评论系统都是由国内个人开发的，在此向开发者致敬。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/valine-comments.png" alt="Valine 评论系统" title="Valine 评论系统"></p>
<p>Next已经内置了Valine组件，在主题配置文件中开启评论功能即可，同时，由于Valine是基于Leancloud提供后端服务的，所以需要填写LeanCloud的App ID和App Key。</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="string">***&lt;app_id***</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">***&lt;app_key&gt;***</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span>  <span class="comment"># 收到新评论是否邮件通知</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span>  <span class="comment"># 是否开启验证码</span></span><br><span class="line">  <span class="attr">placeholder:</span>  <span class="comment"># 默认填充文字</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span>  <span class="comment"># 设置默认评论列表</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span>  <span class="comment"># 评论区头部表单</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span>  <span class="comment"># 每页评论数</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span>  <span class="comment"># 同时开启文章阅读次数统计</span></span><br></pre></td></tr></table></figure>

<p>Valine也附带了阅读统计功能，可以在Valine配置项中设置 <code>visitor: true</code> 开启该功能。为避免后端服务冲突，建议不要同时启用Valine的阅读统计功能和 <code>leancloud_visitors</code>。</p>
<div class="note info">
            <p>关于如何在收到评论时发送邮件提醒请参照 <a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">赵俊 | Hexo 优化 — Valine 扩展之邮件通知</a></p>
          </div>

<p>Next暂时不支持通过配置的方式隐藏文章标题下的评论数量，如要隐藏，可在自定义样式文件中添加如下代码：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//屏蔽标题下的评论数量</span><br><span class="line"><span class="selector-class">.post-comments-count</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你是轻度洁癖患者，想要隐藏评论区的浏览器和操作系统版本号以拥有更加干净的评论界面，可在自定义样式文件中添加如下代码：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//屏蔽评论组件的多余信息</span><br><span class="line"><span class="selector-id">#comments</span> <span class="selector-class">.vsys</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文末版权声明"><a href="#文末版权声明" class="headerlink" title="文末版权声明"></a>文末版权声明</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-copyright.png" alt="文章版权声明" title="文章版权声明"></p>
<p>在主题配置文件中开启文章底部的版权声明，版权声明默认使用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议，用户可以根据自身需要修改 <code>licence</code> 字段变更协议。</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">href="https://creativecommons.org/licenses/by-nc-sa/4.0/"</span> <span class="string">rel="external</span> <span class="string">nofollow"</span> <span class="string">target="_blank"&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认版权声明中只有 <strong>本文作者</strong>、<strong>本文链接</strong>、<strong>版权声明</strong> 三项，如果你想添加更多内容，如 <strong>创建时间</strong>、<strong>修改时间</strong>、<strong>引用链接</strong> 等，需要修改版权声明的相关代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_macro\post-copyright.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JS库 clipboard 拷贝内容到粘贴板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/clipboard.js/2.0.1/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JS库 sweetalert 显示提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 本文标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.title &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 本文作者 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.author | default(author) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 创建时间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.created') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.date.format("YYYY年MM月DD日 - HH时MM分") &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 修改时间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.modified') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.updated.format("YYYY年MM月DD日 - HH时MM分") &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引用链接 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.link') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; post.url | default(post.permalink) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span>&#123;&#123; post.url | default(post.permalink) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制引用链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"cursor: pointer"</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"[&#123;&#123; post.author | default(author) &#125;&#125;'s Blog | &#123;&#123; post.title &#125;&#125;](&#123;&#123; post.permalink &#125;&#125;)"</span>  <span class="attr">aria-label</span>=<span class="string">"&#123;&#123; __('post.copy_success') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 版权声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-license"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.license_title') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; __('post.copyright.license_content', theme.post_copyright.license) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(<span class="string">'.fa-clipboard'</span>);</span></span><br><span class="line"><span class="actionscript">  clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span><span class="params">(target)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> message = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">    message.innerHTML = '<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-circle message-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"message-content"</span>&gt;</span>' + target.trigger.getAttribute('aria-label') + '<span class="tag">&lt;/<span class="name">span</span>&gt;</span>';</span></span></span><br><span class="line">    swal(&#123;</span><br><span class="line">      content: message,</span><br><span class="line"><span class="actionscript">      className: <span class="string">"copy-success-message"</span>,</span></span><br><span class="line">      timer: 1000,</span><br><span class="line"><span class="actionscript">      button: <span class="literal">false</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在版权样式文件中添加如下样式：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_common\components\post\post-copyright.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(0,0,0,0.15);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;  </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16</span>x <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.swal-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;  </span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-icon</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#52c41a</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-content</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后补全版权信息文案字段：</p>
<figure class="highlight yaml"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">created:</span> <span class="string">创建时间</span></span><br><span class="line">  <span class="attr">modified:</span> <span class="string">修改时间</span></span><br><span class="line">  <span class="attr">copy_success:</span> <span class="string">复制成功</span>  </span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">本文标题</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">本文作者</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">引用链接</span></span><br><span class="line">    <span class="attr">license_title:</span> <span class="string">版权声明</span></span><br><span class="line">    <span class="attr">license_content:</span> <span class="string">"本博客所有文章除特别声明外，均采用 %s 许可协议。转载请注明出处！"</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>点击引用链接后的图标 <i class="fa fa-clipboard"></i> 即可快捷复制Markdown引用链接，并将弹出复制成功的提示语。该功能主要借助 <a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard</a> 和 <a href="https://sweetalert.js.org/" target="_blank" rel="noopener">sweetalert</a> 两个js库来实现，并参考 <a href="https://ant.design/components/message/" target="_blank" rel="noopener">antDesign | message组件</a> 重写了弹框样式。</p>
          </div>


<p>在实际使用过程中，并非每篇文章都需要版权声明，如果转载了别人的文章，文末再出现个人版权声明就不太合适。此时可在Front-Matter中设定变量 <code>copyright</code> 用于控制是否显示版权信息。修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>post_copyright.enable</code> 字段和 <code>page.copyright</code> 字段同时为 <code>true</code> 时才会插入版权声明：</p>
<figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.post_copyright.enable and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.post_copyright.enable and page.copyright and not is_index %&#125;</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;% include 'post-copyright.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样以来每篇草稿发布为正文后都会默认显示底部版权信息：</p>
<figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ copyright: true</span></span><br></pre></td></tr></table></figure>

<h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-reward.png" alt="文章打赏功能" title="文章打赏功能"></p>
<p>启用主题配置文件中的打赏相关字段，并将个人收款码图片置于 themes\next\source\images\ 目录下，注意保持图片命名与配置文件中一致：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_comment:</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br></pre></td></tr></table></figure>

<p>如果要关闭悬停收款码上的文字抖动效果，可以在自定义样式文件中添加以下代码：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//关闭打赏收款码的文字抖动效果</span><br><span class="line"><span class="selector-id">#QR</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并非每个页面都需要开启打赏功能，可以在 Front-Matter 中添加 <code>reward</code> 字段来控制是否在本文章中添加打赏信息，然后修改文章布局模板中相关的判定条件：</p>
<figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if ( post.reward and (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125;</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;% include 'reward.swig' %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>reward</code> 字段默认值：</p>
<figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ reward: true</span></span><br></pre></td></tr></table></figure>

<h2 id="添加图片灯箱"><a href="#添加图片灯箱" class="headerlink" title="添加图片灯箱"></a>添加图片灯箱</h2><p>添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由 <a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">fancyBox</a> 提供，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/fancybox.png" alt="fancyBox 灯箱" title="fancyBox 灯箱"></p>
<p>在根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-fancybox3 themes/<span class="keyword">next</span>/source/<span class="class"><span class="keyword">lib</span>/<span class="title">fancybox</span></span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中设置 <code>fancybox: true</code>：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>刷新浏览器即可生效。</p>
<h2 id="相关文章推荐"><a href="#相关文章推荐" class="headerlink" title="相关文章推荐"></a>相关文章推荐</h2><p>该功能由 <a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">hexo-related-popular-posts</a> 插件提供，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/related-post.png" alt="相关文章推荐" title="相关文章推荐"></p>
<p>在站点根目录中执行以下命令安装依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-related-popular-posts <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中开启相关文章推荐功能：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span>  <span class="comment"># custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>此时会在每篇文章结尾根据标签相关性和内容相关性来推荐相关文章。</p>
<p>事实上并非每篇文章都需要开启该功能，可在文章 Front-Matter 中设置 <code>related_posts</code> 字段来控制是否在文末显示相关文章，然后修改文章布局模板中相关的判定条件：</p>
<figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) and post.related_posts %&#125;</span></span><br><span class="line">    &#123;% include 'post-related.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>related_posts</code> 字段默认值：</p>
<figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ related_posts: true</span></span><br></pre></td></tr></table></figure>

<h2 id="文章评分"><a href="#文章评分" class="headerlink" title="文章评分"></a>文章评分</h2><p><a href="https://widgetpack.com" target="_blank" rel="noopener">widgetpack</a> 是一款轻量级的插件，提供四项具体的功能：</p>
<ul>
<li>Comments: 评论系统，类似于留言板</li>
<li>Reviews: 评价系统，类似于商品评价</li>
<li>Rating: 星级评分系统</li>
<li>Google Reviews: 关联展示Google Rating</li>
</ul>
<p>Next主题中已经集成了 widgetpack 的星级评分系统，用户无须再安装或引入插件脚本，只需在 widgetpack 中注册账号并修改主题配置即可，应用效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/rating.png" alt="文章评分组件" title="文章评分组件"></p>
<p>在 <a href="https://widgetpack.com" target="_blank" rel="noopener">widgetpack</a> 中注册账号，根据引导填写应用名称和域名创建应用，创建后可在页面左上角看到应用id。</p>
<p>在主题配置文件中开启评分功能，填写应用id，并设置评分颜色：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Star rating support to each article.</span></span><br><span class="line"><span class="comment"># To get your ID visit https://widgetpack.com</span></span><br><span class="line"><span class="attr">rating:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span>     <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line">  <span class="attr">color:</span>  <span class="string">fadb14</span></span><br></pre></td></tr></table></figure>

<p>此时刷新浏览器即可在文章末尾看到空的评分栏了。点击评分发现需要以社交账号登陆，而这些社交账号基本都是facebook、twitter等墙外的社交软件，限制了评分系统可用性，我们可以在 widgetpack 控制台中修改评分认证机制。</p>
<p>在控制台中点击左上角展开菜单，在 <strong>Rating</strong> -&gt; <strong>Setting</strong> 中将 Vote via 选项改为 Device(cookie) 以开启匿名评分，该选项将基于设备认证访问者身份：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/rate-vote-via.png" alt="开启匿名评分" title="开启匿名评分"></p>
<p>用户还可以在该页面设定 star 数量和大小。修改后记得勾选右下角的SAVE SETTING才会生效。</p>
<p>在实际使用过程中，并非每篇文章都需要开启评分。此时可在 Front-Matter 中设定变量 rating 用于控制是否开启评分。修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>rating.enable</code> 字段和 <code>page.rating</code> 字段同时为 <code>true</code> 才会插入评分组件：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line"><span class="deletion">-  &#123;% if theme.rating.enable or (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) or (theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable) or (theme.baidushare and theme.baidushare.type === "button" )%&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% if (theme.rating.enable and post.rating) or (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) or (theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable) or (theme.baidushare and theme.baidushare.type === "button" )%&#125;</span></span><br><span class="line">    &lt;div class="post-widgets"&gt;</span><br><span class="line">    &#123;% if theme.rating.enable %&#125;</span><br><span class="line">      &lt;div class="wp_rating"&gt;</span><br><span class="line">        &lt;div id="wpac-rating"&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样以来每篇草稿发布后都会默认开启评分：</p>
<figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ rating: true</span></span><br></pre></td></tr></table></figure>

<p>站点上线后，可以在控制台菜单的 <strong>Site</strong> -&gt; <strong>Setting</strong> 中勾选 Private，使得组件只对应用内指定的域名上生效，这样以来即时别人错填了你的id也不会将评分数据误提交到你的应用中了。</p>
<div class="note info">
            <p>widgetpack 与前文提到的 hotjar 在评价反馈功能上的侧重点不一样，widgetpack 更侧重于对文章的评分，而hotjar侧重于对整个页面的评分，并提供了文字和截图反馈的渠道。</p>
          </div>

<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>该功能由 <a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a> 插件提供，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-encrypt.png" alt="文章加密" title="文章加密"></p>
<p>在站点根目录中执行以下命令安装依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-blog-<span class="keyword">encrypt</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加如下字段：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">default_abstract:</span> <span class="string">此文章已被加密，需要输入密码访问。</span>  <span class="string">//首页文章列表中加密文章的默认描述文案</span></span><br><span class="line">  <span class="attr">default_message:</span> <span class="string">请输入密码以阅读这篇私密文章。</span>  <span class="string">//文章详情页的密码输入框上的默认描述文案</span></span><br></pre></td></tr></table></figure>

<p>重启服务器，这个时候可能需要经历较长一段时间的加密过程，请耐心等待，加密完成后刷新页面将会显示密码输入框，输入密码后才能继续访问文章内容。</p>
<div class="note info">
            <p>该功能只会加密文章正文，其他内容如打赏、版权信息、标签等则不会被加密隐藏，这样看起来有点奇怪，所以建议加密文章隐藏掉打赏和版权信息内容。</p>
          </div>

<p>密码输入错误时将会显示浏览器默认告警弹窗，可以使用 <a href="https://sweetalert.js.org/" target="_blank" rel="noopener">sweetalert</a> 来美化错误提示：</p>
<p>在主题自定义布局文件中添加如下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在 node_modules 依赖库中修改 hexo-blog-encrypt 源码：</p>
<figure class="highlight diff"><figcaption><span>node_modules\hexo-blog-encrypt\lib\blog.encrypt.js</span></figcaption><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line"><span class="deletion">-   alert(decryptionError);</span></span><br><span class="line"><span class="addition">+   swal(&#123;   </span></span><br><span class="line"><span class="addition">+     text: "密码错误!",</span></span><br><span class="line"><span class="addition">+     icon: "error",</span></span><br><span class="line"><span class="addition">+     className: "password-error",</span></span><br><span class="line"><span class="addition">+     timer: 1000,  </span></span><br><span class="line"><span class="addition">+     button: false</span></span><br><span class="line"><span class="addition">+   &#125;);</span></span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>在自定义样式文件中添加如下代码：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//密码错误sweetalert弹框样式修改</span><br><span class="line"><span class="selector-class">.swal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.password-error</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(0,0,0,0.15);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>由于是在node_module中修改的依赖文件，一旦更新或者重装依赖都会覆盖修改，需要重新修改一遍。</p>
          </div>

<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>在集成第三方插件或者自定义新功能的过程中我一直试图秉持这些原则：</p>
<ul>
<li>可以在站点配置/主题配置文件中方便快捷的开启/关闭插件服务</li>
<li>可以在语言包 zh-CN.yml 中快速修改页面中的自定义文案，而不是在代码中将文字表述写死</li>
<li>尽量在自定义样式文件 custom.styl 和自定义布局文件 custom.swig 中添加代码，而非修改主题源码</li>
<li>新增文件统一放在 _custom 目录下</li>
</ul>
<p>所有以上这些原则，尽管实现起来可能更复杂，需要更多的代码，但都是为了让站点更好维护，更灵活方便。</p>
<p>本文介绍了如何通过修改自定义设置和集成三方插件服务搭建一个功能更加完善的个性化Hexo博客，尽管我们的博客可能已经做的令自己很满意了，但至今仍是只能在本地访问，别人看不到。我们建立博客往往都是希望能将自己的文章分享给他人来创造更多价值，如果想要了解如何将站点部署到公网，请参考本系列中最后一篇文章：。</p>
<div class="reference-linking">参考链接</div>

<ul>
<li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li>
<li><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">夏末 | 为NexT主题添加文章阅读量统计功能</a></li>
<li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">nMask | Hexo搭建博客教程</a></li>
<li><a href="https://leancloud.cn/docs/leanstorage_guide-js.html" target="_blank" rel="noopener">LeanCloud | JavaScript SDK 安装指南</a></li>
<li><a href="https://diygod.me/2153/" target="_blank" rel="noopener">DIYgod | 我藏好了哦</a></li>
<li><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">mythsman/hexo-douban README.md</a></li>
<li><a href="https://asdfv1929.github.io/2018/01/21/daovoice/" target="_blank" rel="noopener">asdfv1929 | Hexo NexT主题内接入网页在线联系功能</a></li>
<li><a href="https://www.hotjar.com/tour" target="_blank" rel="noopener">Hotjar Features</a></li>
<li><a href="https://www.hotjar.com/incoming-feedback" target="_blank" rel="noopener">Incoming Feedback by Hotjar</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客系列：主题美化篇</title>
    <url>/hexo-theme-beautiful/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>本文介绍了在 Next 主题的基础上进一步对博客进行美化的方案，主要包括:</p>
          </div>

<a id="more"></a>

<ul>
<li>在文章末尾添加结束标记</li>
<li>修改侧边栏的位置到左边</li>
<li>添加不同类型的动态背景效果</li>
<li>添加 live2d 看板娘</li>
<li>为布局元素添加边缘弹性摆动效果</li>
<li>个性化回到顶部按钮</li>
<li>添加不同类型的鼠标点击特效</li>
<li>评论区输入打字礼花特效</li>
</ul>
<p>读者可以根据需要选择其中喜欢的方案应用到站点博客中。</p>
<h1 id="修改博客字体"><a href="#修改博客字体" class="headerlink" title="修改博客字体"></a>修改博客字体</h1><p>在 <a href="https://www.google.com/fonts" target="_blank" rel="noopener">Google Fonts</a> 上找到心仪的字体，然后在主题配置文件中为不同的应用场景配置字体：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 全局字体，应用在 body 元素上</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Monda</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 标题字体 (h1, h2, h3, h4, h5, h6)</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Roboto</span> <span class="string">Slab</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文章字体</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Logo 字体</span></span><br><span class="line">  <span class="attr">logo:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代码字体，应用于 code 以及代码块</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br></pre></td></tr></table></figure>

<h1 id="文章页末美化"><a href="#文章页末美化" class="headerlink" title="文章页末美化"></a>文章页末美化</h1><h2 id="为标签添加图标"><a href="#为标签添加图标" class="headerlink" title="为标签添加图标"></a>为标签添加图标</h2><p>默认情况下标签前缀是 <code>#</code> 字符，用户可以通过修改主题源码将标签的字符前缀改为图标前缀，更改后效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181113045027074.png" alt="标签图标前缀" title="标签图标前缀"></p>
<p>在文章布局模板中找到文末标签相关代码段，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;</code> 即可：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;footer class="post-footer"&gt;</span><br><span class="line">    &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">      &lt;div class="post-tags"&gt;</span><br><span class="line">        &#123;% for tag in post.tags %&#125;</span><br><span class="line"><span class="deletion">-          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tags"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<p>Next中使用 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 作为图标库，用户可以在 FontAwesome 上找到心仪的图标来替换标签的字符前缀。</p>
<h2 id="添加结束标记"><a href="#添加结束标记" class="headerlink" title="添加结束标记"></a>添加结束标记</h2><div class="note info">
            <p>本章节参考 <a href="https://asdfv1929.github.io/2018/01/28/add-the-end/" target="_blank" rel="noopener">asdfv1929 | Hexo NexT主题内给每篇文章后添加结束标语</a></p>
          </div>

<p>在文末添加结束标记，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181113045252399.png" alt="文末结束标记" title="文末结束标记"></p>
<p>新建布局模板文件 post-end-tag.swig，添加如下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_macro\post-end-tag.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color:#bfbfbf;font-size:16px;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>-------- 本文结束 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; config.post_end_tag.icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span> 感谢阅读 --------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在文章布局模板中添加如下代码：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ &#123;% if config.post_end_tag.enabled and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;div&gt;</span></span><br><span class="line"><span class="addition">+     &#123;% include 'post-end-tag.swig' %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include 'wechat-subscriber.swig' %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在站点配置文件末尾添加如下代码：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">post_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 是否开启文末的本文结束标记</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">paw</span> <span class="comment"># 结束标记之间的图标</span></span><br></pre></td></tr></table></figure>

<p>重启服务器后即可在文末看到结束标记。</p>
<h1 id="页面加载进度条"><a href="#页面加载进度条" class="headerlink" title="页面加载进度条"></a>页面加载进度条</h1><p>当网络不好的时候可能会在打开站点或跳转文章时出现短暂的白屏，此时如果能有加载进度提示将会提高用户操作体验。</p>
<p>在根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-pace themes/<span class="keyword">next</span>/source/<span class="class"><span class="keyword">lib</span>/<span class="title">fancybox</span></span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中设置 <code>pace: true</code>。</p>
<p>默认提供了多种主题的进度条加载样式，有顶部提示的，有中间提示的，还有全页面遮挡提示的，个人认为默认的进度条效果就恰如其当，既能够在页面空白的时候起到加载作用，也不会因为太过花里胡哨而喧宾夺主，尤其是当你如果使用了不蒜子的站点访问统计的功能的时候，常常会遇到所有资源都加载完毕而不蒜子还在等待响应，如果这个时候在页面较显眼的位置出现一个停滞不前的进度条，很让人抓狂。</p>
<h1 id="侧边栏放左边"><a href="#侧边栏放左边" class="headerlink" title="侧边栏放左边"></a>侧边栏放左边</h1><p>受 <a href="https://www.ofind.cn/" target="_blank" rel="noopener">猪猪侠的博客</a> 所启发，萌生了想把主题侧边栏放在左侧的想法。</p>
<p>Next主题各系列中只有Pisces和Gemini支持通过主题配置文件来将侧边栏置于左侧或右侧，而Muse和Mist则需要深度修改源码才能实现改变侧边栏位置。</p>
<p>在自定义样式文件中添加如下规则：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改动效脚本代码：</p>
<figure class="highlight diff"><figcaption><span>themes\next\source\js\src\motion.js</span></figcaption><table><tr><td class="code"><pre><span class="line">$(document)</span><br><span class="line">  .on('sidebar.isShowing', function() &#123;</span><br><span class="line">    NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(</span><br><span class="line"><span class="deletion">-     &#123;paddingRight: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line"><span class="addition">+     &#123;paddingLeft: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line">      SIDEBAR_DISPLAY_DURATION</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .on('sidebar.isHiding', function() &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">  hideSidebar: function() &#123;</span><br><span class="line"><span class="deletion">-   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingRight: 0&#125;);</span></span><br><span class="line"><span class="addition">+   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;);</span></span><br><span class="line">    this.sidebarEl.find('.motion-element').velocity('stop').css('display', 'none');</span><br><span class="line">    this.sidebarEl.velocity('stop').velocity(&#123;width: 0&#125;, &#123;display: 'none'&#125;);</span><br><span class="line"></span><br><span class="line">    sidebarToggleLines.init();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此以来就可以将侧边栏放置在左边了，但当窗口宽度缩小到991px之后会出现样式错误：侧边栏收缩消失但是页面左侧仍留有空白间距，此时修改如下代码即可：</p>
<figure class="highlight diff"><figcaption><span>themes\next\source\css\_common\scaffolding\base.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative; // Required by scrollspy</span><br><span class="line">  font-family: $font-family-base;</span><br><span class="line">  font-size: $font-size-base;</span><br><span class="line">  line-height: $line-height-base;</span><br><span class="line">  color: $text-color;</span><br><span class="line">  background: $body-bg-color;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- +mobile() &#123; padding-left: 0 !important; &#125;</span></span><br><span class="line"><span class="deletion">- +tablet() &#123; padding-left: 0 !important; &#125;  </span></span><br><span class="line"><span class="addition">+ +mobile() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line"><span class="addition">+ +tablet() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line">  +desktop-large() &#123; font-size: $font-size-large; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h1><p>Next主题可以通过安装插件快速为站点添加不同效果的动态背景。</p>
<h2 id="粒子漂浮聚合"><a href="#粒子漂浮聚合" class="headerlink" title="粒子漂浮聚合"></a>粒子漂浮聚合</h2><p>应用效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115092103046.png" alt="canvas-nest 动态背景" title="canvas-nest 动态背景"></p>
<p>该功能由 <a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">theme-next-canvas-nest</a> 插件提供，在根目录下执行如下命令：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-canvas-nest themes/<span class="keyword">next</span>/source/<span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">nest</span></span></span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件中设置 <code>canvas_nest: true</code> 即可。</p>
<p>Next v6.5.0 及以上版本支持更多的自定义选项：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># 是否在移动端显示</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">'0,0,255'</span> <span class="comment"># 动态背景中线条的 RGB 颜色</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># 动态背景中线条透明度</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># 动态背景的 z-index 属性值</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># 动态背景中线条数量</span></span><br></pre></td></tr></table></figure>

<h2 id="Three-三维动效"><a href="#Three-三维动效" class="headerlink" title="Three 三维动效"></a>Three 三维动效</h2><p><a href="https://github.com/theme-next/theme-next-three" target="_blank" rel="noopener">theme-next-three</a> 插件提供了三个类型的背景动效，应用效果如下：</p>
<div class="tabs" id="three-三维动效"><ul class="nav-tabs"><li class="tab active"><a href="#three-三维动效-1">three-waves</a></li><li class="tab"><a href="#three-三维动效-2">canvas-lines</a></li><li class="tab"><a href="#three-三维动效-3">canvas-sphere</a></li></ul><div class="tab-content"><div class="tab-pane active" id="three-三维动效-1"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115091950761.png" alt></p></div><div class="tab-pane" id="three-三维动效-2"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115091914602.png" alt></p></div><div class="tab-pane" id="three-三维动效-3"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115091826700.png" alt></p></div></div></div>

<p>在根目录下执行如下命令安装相关依赖：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-three themes/<span class="keyword">next</span>/source/<span class="class"><span class="keyword">lib</span>/<span class="title">three</span></span></span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件中设置开启对应的动效选项即可。</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>个人认为在站点中添加动态背景并没有实际的意义，只会凭空增加页面内存占用及CPU消耗，所以本站没有添加任何动态背景。</p>
          </div>

<h2 id="随机三角丝带"><a href="#随机三角丝带" class="headerlink" title="随机三角丝带"></a>随机三角丝带</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/evan-you.png" alt="随机三角丝带" title="随机三角丝带"></p>
<div class="note info">
            <p>该功能由 Vue 作者 <a href="http://evanyou.me/" target="_blank" rel="noopener">尤雨溪</a> 首创。本章节中核心代码来源于 <a href="https://diygod.me/" target="_blank" rel="noopener">DIYgod</a> 编写的 <a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener">sagiri</a> 主题。</p>
          </div>

<p>点击下方按钮下载相应的脚本，并置于 themes\next\source\js\ 目录下：</p>
<p>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/evan-you.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>随机三角丝带</a>
</p>

<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# 随机三角丝带背景 #&#125;</span><br><span class="line">&#123;% if theme.evanyou %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"evanyou"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#evanyou</span> &#123;</span></span><br><span class="line">      position: fixed;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: 0;</span><br><span class="line">      z-index: -1;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/evan-you.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># colorful trilateral riband background</span></span><br><span class="line"><span class="attr">evanyou:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p>
<h1 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h1><div class="note info">
            <p>本章节部分内容参考 <a href="https://fjkang.github.io/2017/12/08/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E7%89%A9/" target="_blank" rel="noopener">FJKang | 添加一个萌物</a></p>
          </div>

<p>该功能由 <a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a> 插件支持，效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/live2d.gif" alt="live2d 看板娘" title="live2d 看板娘"></p>
<p>在站点根目录下执行以下命令安装依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加以下下配置项</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment"># https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="string">Relative)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 脚本加载源</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认从本地加载脚本</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # 从 jsdelivr CDN 加载脚本</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # 从 unpkg CDN 加载脚本</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 从自定义地址加载脚本</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 只在有 &#123;&#123; live2d() &#125;&#125; 标签的页面上加载 / 在所有页面上加载</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span> <span class="comment"># 是否在控制台打印日志</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 选择看板娘模型</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span>  <span class="comment"># npm package的名字</span></span><br><span class="line">    <span class="comment"># use: wanko # /live2d_models/ 目录下的模型文件夹名称</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 站点根目录下的模型文件夹名称</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 自定义网络数据源</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># 显示在左边还是右边</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span> <span class="comment"># 宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">180</span> <span class="comment"># 高度</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span> <span class="comment"># 默认透明度</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>更多配置参数请查看 <a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="noopener">L2Dwidget | live2d-widget.js</a></p>
          </div>

<p>此时重启服务器暂时还看不到看板娘，需要手动下载或安装模型资源。可以从 <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">hexo live2d 模型预览</a> 里找到你喜欢的角色，然后根据 <a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">live2d-widget-models</a> 中提供的方法来下载模型数据.</p>
<p>例如通过以下命令下载模型 shizuku：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> npm install live2d-widget-<span class="keyword">model</span>-shizuku</span><br></pre></td></tr></table></figure>

<p>因为修改了站点配置文件，所以需要重启服务器才能预览模型效果。</p>
<p>如果设置了 <code>live2d.tagMode: true</code>，则可以在指定页面中插入以下标签：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;</span> <span class="string">live2d()</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>只有拥有该标签的页面才会渲染live2d模型，这样以来就可以精确控制在哪些页面上显示看板娘了。</p>
<p>如果只想在一级菜单页面上显示看板娘，可以在Header模板中添加以下代码：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_partials\header\index.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ &#123;% if is_index %&#125;</span></span><br><span class="line"><span class="addition">+   &#123;&#123; live2d() &#125;&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>个人认为在文章内出现看板娘将会影响读者注意力的集中，毕竟一篇博客里最重要的是内容，而不是这些花里胡哨转移注意力的东西。所以本站只在一级菜单页面添加了看板娘，文章页面则保持极致精简的阅读体验。</p>
          </div>

<p>经过测试发现 <code>live2d.mobile.show: false</code> 并没有生效，暂时没有找到好的解决方法，参考 <a href="https://github.com/EYHN/hexo-helper-live2d/issues/12" target="_blank" rel="noopener">EYHN/hexo-helper-live2d Issues #12</a> 后发现可以在自定义样式文件中添加以下代码来解决：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#live2dcanvas</span> &#123;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">tablet</span>() &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>不要乱点不该点的地方，会生气的。</p>
          </div>

<h1 id="边缘摆动效果"><a href="#边缘摆动效果" class="headerlink" title="边缘摆动效果"></a>边缘摆动效果</h1><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/wobblewindow.gif" alt="wobblewindow 边缘摆动" title="wobblewindow 边缘摆动"></p>
<p>在 <a href="https://www.ofind.cn/" target="_blank" rel="noopener">猪猪侠的博客</a> 里发现的这种特效，觉得挺有意思的，就从他Github上给扒过来了</p>
<p>点击下方按钮下载脚本，并置于 themes\next\source\js\ 目录下：</p>
<p>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/wobblewindow.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>wobblewindow.js</a>
</p>

<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_script\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# wobble窗口摆动特效 #&#125;</span><br><span class="line">&#123;% if theme.wobble %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/wobblewindow"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//只在桌面版网页启用特效</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>( <span class="built_in">window</span>.innerWidth &gt; <span class="number">768</span>  )&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        &#123;% if theme.wobble.header %&#125;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#header'</span>).wobbleWindow(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            radius: </span><span class="template-variable">&#123;&#123; theme.wobble.radius &#125;&#125;</span><span class="xml">,</span></span></span><br><span class="line"><span class="actionscript">            movementTop: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            movementLeft: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            movementRight: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            debug: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if theme.wobble.sidebar %&#125;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#sidebar'</span>).wobbleWindow(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            radius: </span><span class="template-variable">&#123;&#123; theme.wobble.radius &#125;&#125;</span><span class="xml">,</span></span></span><br><span class="line"><span class="actionscript">            movementLeft: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            movementTop: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            movementBottom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            position: <span class="string">'fixed'</span>,</span></span><br><span class="line"><span class="actionscript">            debug: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if theme.wobble.footer %&#125;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#footer'</span>).wobbleWindow(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            radius: </span><span class="template-variable">&#123;&#123; theme.wobble.radius &#125;&#125;</span><span class="xml">,</span></span></span><br><span class="line"><span class="actionscript">            movementBottom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            movementLeft: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            movementRight: <span class="literal">false</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            offsetX: </span><span class="template-variable">&#123;&#123; theme.wobble.offset &#125;&#125;</span><span class="xml">,</span></span></span><br><span class="line"><span class="actionscript">            position: <span class="string">'absolute'</span>,</span></span><br><span class="line"><span class="actionscript">            debug: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在自定义样式文件中添加以下样式：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//窗口波动效果相关样式</span><br><span class="line">if hexo-config('wobble')  &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.wobbleTransparentBK</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,0) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.wobbleTransparentLine</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(0,0,0,0) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Next.Muse中为Header和Footer添加背景色</span><br><span class="line">  <span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(245, 245, 245);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //防止sidebar和footer同时开启动效时堆叠异常</span><br><span class="line">  <span class="selector-id">#sidebar</span>, <span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //防止挡住页末文章的阅读全文按钮</span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>Next.Muse主题方案中Header和Footer是没有背景色的，所以需要添加背景色后才能看出边缘摆动效果。另外，实现边缘摆动效果所需的 <code>z-index</code> 属性可能会导致元素堆叠异常，需要添加以上样式来矫正。</p>
          </div>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># window woblle</span></span><br><span class="line"><span class="attr">wobble:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启边缘波动效果</span></span><br><span class="line">  <span class="attr">radius:</span> <span class="number">50</span>  <span class="comment"># 波动半径</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span>  <span class="comment"># 开启侧边栏边缘摆动</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span>  <span class="comment"># 开启头部边缘摆动</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">true</span>  <span class="comment"># 开启脚部边缘摆动</span></span><br></pre></td></tr></table></figure>

<p>用户可以根据需要在配置文件中为选择开启边缘摆动效果的布局元素。刷新浏览器，然后将鼠标移动到布局边缘上尽情的挑逗它吧。</p>
<p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p>
<h1 id="个性化回到顶部"><a href="#个性化回到顶部" class="headerlink" title="个性化回到顶部"></a>个性化回到顶部</h1><p>从 <a href="https://diygod.me/" target="_blank" rel="noopener">DIYgod的博客</a> 里扒来的，效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/back-to-top.gif" alt="回到顶部" title="回到顶部"></p>
<p>原理很简单，将 back-to-top 按钮添加图片背景，并添加CSS3动效即可。</p>
<p>首先，找到自己喜欢的图片素材放到 source\images\ 目录下。</p>
<p>你可以点击下方按钮下载本站所使用的小猫上吊素材（<br>小猫咪这么可爱，当然要多放点孜然啦…）</p>
<a class="btn" href="/images/scroll.png" download>
  <i class="fa fa-download fa-fw"></i>
  下载图片
</a>

<p>然后在自定义样式文件中添加如下代码：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//自定义回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  width: 70px;  //图片素材宽度</span><br><span class="line">  height: 900px;  //图片素材高度</span><br><span class="line">  <span class="selector-tag">top</span>: <span class="selector-tag">-900px</span>;</span><br><span class="line">  <span class="selector-tag">bottom</span>: <span class="selector-tag">unset</span>;</span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span><br><span class="line">  background: url("/images/scroll.png");</span><br><span class="line"></span><br><span class="line">  //隐藏箭头图标</span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? <span class="built_in">calc</span>( 100vh - 900px - 200px ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刷新浏览器即可预览效果。</p>
<h1 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h1><p>从各个站点里搜罗了以下四个比较常用的鼠标点击特效：</p>
<div class="tabs" id="鼠标点击特效"><ul class="nav-tabs"><li class="tab active"><a href="#鼠标点击特效-1">礼花特效</a></li><li class="tab"><a href="#鼠标点击特效-2">爆炸特效</a></li><li class="tab"><a href="#鼠标点击特效-3">浮出爱心</a></li><li class="tab"><a href="#鼠标点击特效-4">浮出文字</a></li></ul><div class="tab-content"><div class="tab-pane active" id="鼠标点击特效-1"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-fireworks.gif" alt></p></div><div class="tab-pane" id="鼠标点击特效-2"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-explosion.gif" alt></p></div><div class="tab-pane" id="鼠标点击特效-3"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-love.gif" alt></p></div><div class="tab-pane" id="鼠标点击特效-4"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-text.gif" alt></p></div></div></div>

<p>点击下方按钮下载相应的脚本，并置于 themes\next\source\js\cursor\ 目录下：</p>
<p>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/fireworks.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>礼花特效</a>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/explosion.min.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>爆炸特效</a>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/love.min.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>浮出爱心</a>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/text.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>浮出文字</a>
</p>

<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect == "fireworks" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"js/cursor/fireworks.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "explosion" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"js/cursor/explosion.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "love" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"js/cursor/love.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "text" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"js/cursor/text.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>

<p>这样即可在配置文件中一键快速切换鼠标点击特效。</p>
<p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p>
<h1 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h1><div class="note info">
            <p>本章节参考 <a href="https://qianling.pw/hexo-optimization/" target="_blank" rel="noopener">千灵夙赋 | Hexo 优化汇总 #31</a>，原文出自 <a href="https://www.ilxtx.com/comment-input-effects.html" target="_blank" rel="noopener">龙笑天下 | 给 WordPress 博客网站添加评论输入打字礼花及震动特效</a></p>
          </div>

<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/typing-effect.gif" alt="打字特效" title="打字特效"></p>
<p>点击下方按钮下载相应的脚本，并置于 themes\next\source\js\ 目录下：</p>
<p>
<a class="btn" href="https://script-1256884783.file.myqcloud.com/activate-power-mode.min.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>打字特效</a>
</p>

<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;% if theme.typing_effect %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/activate-power-mode.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    POWERMODE.colorful = </span><span class="template-variable">&#123;&#123; theme.typing_effect.colorful &#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    POWERMODE.shake = </span><span class="template-variable">&#123;&#123; theme.typing_effect.shake &#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'input'</span>, POWERMODE);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># typing effect</span></span><br><span class="line"><span class="attr">typing_effect:</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span>  <span class="comment"># 礼花特效</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">false</span>  <span class="comment"># 震动特效</span></span><br></pre></td></tr></table></figure>

<p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文记录了本站在Next的基础上的进阶美化方案，除了一些简单的样式修改外，还添加了一些由插件支持的高级动效，包括动态背景、看板娘、边缘摆动、鼠标点击和打字特效等。笔者认为，动效可以使得站点变有趣，但同时也会增加网页的资源消耗，以及影响用户的关注点，有时候会喧宾夺主适得其反，建议珍爱PC资源，合理使用动效。</p>
<p>本文内容仅涉及到主题美化，也就是说仅使得网页看起来更好看或者更炫酷，但并没有使其功能上变得更强大。如果你希望为站点集成更高级的功能，可以关注本系列的后续文章：</p>
<ul>
<li>想要深度定制个性化站点，请参考本系列中的 。</li>
<li>想要了解如何将站点部署到公网，请参考本系列中的 </li>
</ul>
<div class="reference-linking">参考链接</div>

<ul>
<li><a href="https://asdfv1929.github.io/2018/01/28/add-the-end/" target="_blank" rel="noopener">asdfv1929 | Hexo NexT主题内给每篇文章后添加结束标语</a></li>
<li><a href="https://fjkang.github.io/2017/12/08/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E7%89%A9/" target="_blank" rel="noopener">FJKang | 添加一个萌物</a></li>
<li><a href="http://evanyou.me/" target="_blank" rel="noopener">尤雨溪的个人主页</a></li>
<li><a href="https://diygod.me/" target="_blank" rel="noopener">DIYgod的博客</a></li>
<li><a href="https://www.ofind.cn/" target="_blank" rel="noopener">猪猪侠的博客</a></li>
<li><a href="https://qianling.pw/hexo-optimization/" target="_blank" rel="noopener">千灵夙赋 | Hexo 优化汇总</a></li>
<li><a href="https://www.ilxtx.com/comment-input-effects.html" target="_blank" rel="noopener">龙笑天下 | 给 WordPress 博客网站添加评论输入打字礼花及震动特效</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客系列：写作技巧篇</title>
    <url>/hexo-whirting-skills/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>本文介绍 Hexo 博客的写作技巧。</p>
          </div>

<a id="more"></a>

<p>第一章中介绍了 Hexo 中写作相关的基本概念，包括三种基本布局，标签与分类，Markdown 写作语法。</p>
<p>第二章中介绍了 Hexo 中常用的内置标签，包括 note 标签、 label 标签、 button 标签、 tab 标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。</p>
<p>第三章中介绍了在文档中插入图片、音乐、视频等多媒体元素的方案。</p>
<p>第四章中根据个人使用经验为大家推荐了几款优雅实用的 Markdown 写作工具。</p>
<h1 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h1><p>在博客目录下执行如下命令新建一篇文章</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure>

<p>如果未指定文章的布局（layout），则默认使用 <code>post</code> 布局，生成的文档存放于 <code>source\_posts\</code> 目录下，打开后使用Markdown语法进行写作，保存后刷新浏览器即可看到文章。</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局是什么概念呢，你可以理解为新建文档时的一个模板，基于布局生成的文档将会继承布局的样式。</p>
<p>Hexo默认有三种布局：<code>post</code>、 <code>page</code> 和 <code>draft</code>，用户可以在 <code>scaffolds</code> 目录下新建文档来自定义布局格式，还可以修改站点配置文件中的 <code>default_layout</code>参数来指定生成文档时的默认布局。</p>
<h3 id="文章（post）"><a href="#文章（post）" class="headerlink" title="文章（post）"></a>文章（post）</h3><p>基于 <code>post</code> 布局生成的文档存在于 <code>source\_posts\</code> 目录下，该目录下的文档会作为博客正文显示在网站中。</p>
<h3 id="页面（page）"><a href="#页面（page）" class="headerlink" title="页面（page）"></a>页面（page）</h3><p><code>page</code> 布局用于生成类似 <strong>首页</strong> 和 <strong>归档</strong> 这样的页面。默认的Next主题样式中只包含首页和归档这两个链接，可以通过修改主题配置文件中的 <code>menu</code> 字段来新增更多页面菜单。</p>
<figure class="highlight diff"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line"><span class="addition">+ tags: /tags/ || tags</span></span><br><span class="line"><span class="addition">+ categories: /categories/ || th</span></span><br><span class="line"><span class="addition">+ archives: /archives/ || archive</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>||</code> 之前的值表示菜单链接，之后的值表示所用的 <code>FontAwesome</code> 图标名称。</p>
<p>刷新页面后即可看到页面内多了几项菜单。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181103115805642.png" alt="新增菜单入口" title="新增菜单入口"></p>
<p>此时点击 <strong>关于</strong>、<strong>标签</strong> 和 <strong>分类</strong> 都会跳转到404页面，原因是我们只开放了页面入口，却没有创造对应于链接的页面视图，此时就需要通过 <code>hexo new page &lt;title&gt;</code> 命令来新建页面。</p>
<p>基于 <code>page</code> 布局的新建命令将会在 <code>source</code> 目录下新建一个 <code>&lt;title&gt;</code> 文件夹，并在该文件夹下创建一个 <code>index.md</code> 文件，编辑该文件即可修改页面内容。</p>
<p>例如，通过 <code>hexo new page tags</code> 命令将会生成如下目录。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└──  <span class="keyword">source</span>             </span><br><span class="line">  ├── _posts          </span><br><span class="line">  └── <span class="keyword">tags</span></span><br><span class="line">    └── <span class="built_in">index</span>.md</span><br></pre></td></tr></table></figure>

<p>编辑 <code>index.md</code> 文件，在Front-Matter中添加 <code>type: tags</code> ，Next主题将自动在该页面内显示标签云。</p>
<figure class="highlight diff"><figcaption><span>source\tags\index.md</span></figcaption><table><tr><td class="code"><pre><span class="line">  title: 标签</span><br><span class="line">  date: 2018-10-19 22:57:00</span><br><span class="line"><span class="addition">+ type: tags</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>Front-Matter是文件最上方以 <code>---</code> 分隔的区域，用于指定本文件的各种参数值</p>
          </div>

<p>在菜单中点击 <strong>标签</strong> 跳转到刚创建的标签页面。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104120213426.png" alt="Hexo 标签页面" title="Hexo 标签页面"></p>
<p>同理可通过 <code>page</code> 布局生成 <strong>关于</strong> 和 <strong>分类</strong> 两个页面。</p>
<h3 id="草稿（draft）"><a href="#草稿（draft）" class="headerlink" title="草稿（draft）"></a>草稿（draft）</h3><p><code>draft</code> 布局用于创建草稿，生成的文档存在于 source\_drafts\ 目录中，默认配置下将不会把该目录下的文档渲染到网站中。</p>
<p>通过以下命令将草稿发布为正式文章：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ hexo publish <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该命令会将 source\_drafts\ 目录下以 <title> 开头的草稿发布到 sources\_posts\ 目录下。另外，<code>hexo publish *</code> 会将最新创建的一篇草稿发布为正式文章，并以Front-Matter中的title作为文件名称。</title></p>
<p>考虑到一些文章可能需要数天才能完成，建议将新建文档时的默认布局设置为 <code>draft</code>：</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- default_layout: post</span></span><br><span class="line"><span class="addition">+ default_layout: draft</span></span><br></pre></td></tr></table></figure>

<h2 id="标签与分类"><a href="#标签与分类" class="headerlink" title="标签与分类"></a>标签与分类</h2><p>我们刚提到了标签，也提到了分类，那么标签和分类是什么，其区别是什么。</p>
<p>标签和分类都是用于对文章进行归档的一种方式，标签是一种列表结构，而分类是一种树结构。我们以人作为例子，从标签的角度考虑，我可以拥有程序员、高颜值、幽默等标签，这些标签之间没有层级关系；从分类的角度考虑，我是亚洲人、中国人、河南人，这些分类之间是有明确的包含关系的。</p>
<p>可以在Front-Matter中添加 <code>catergories</code> 和 <code>tags</code> 字段为文章添加标签和分类，如我为本文添加了 <strong>Hexo</strong> 和 <strong>Markdown</strong> 两个标签，并将其归类到了 <strong>技术/博客</strong> 类别，对应的Front-Matter结构如下：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: Hexo搭建个人博客系列：写作技巧篇</span><br><span class="line"><span class="keyword">tags:</span> Hexo Markdown</span><br><span class="line">categories:</span><br><span class="line">- 技术</span><br><span class="line">- 博客</span><br></pre></td></tr></table></figure>

<h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><p>Markdown是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档，广受程序员喜爱，目前许多网站都已经支持通过Markdown语法来写文章或者发表评论。</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>Markdown语法</th>
<th>效果预览</th>
</tr>
</thead>
<tbody><tr>
<td>标题</td>
<td><code># 标题1</code><br><code>## h2</code><br><code>### h3</code></td>
<td><div style="font-weight: bold"><div style="font-size: 24px">标题一</div><div style="font-size: 22px">标题二</div><div style="font-size: 20px">标题三</div></div></td>
</tr>
<tr>
<td>加粗</td>
<td><code>**文字加粗**</code></td>
<td><strong>文字加粗</strong></td>
</tr>
<tr>
<td>引用</td>
<td><code>&gt; 引用文字</code></td>
<td><blockquote>引用文字</blockquote></td>
</tr>
<tr>
<td>有序列表</td>
<td><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code></td>
<td><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></td>
</tr>
<tr>
<td>无序列表</td>
<td><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code></td>
<td><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></td>
</tr>
<tr>
<td>链接</td>
<td><code>[链接](url)</code></td>
<td><a href="url">链接</a></td>
</tr>
<tr>
<td>图片</td>
<td><code>![图片](image.jpg)</code></td>
<td><i class="fa fa-image"></i></td>
</tr>
<tr>
<td>水平线</td>
<td><code>---</code></td>
<td><hr></td>
</tr>
<tr>
<td>代码</td>
<td><code>`code`</code></td>
<td><code>code</code></td>
</tr>
<tr>
<td>代码块</td>
<td><code>```code snippet```</code></td>
<td><figure class="highlight"><table><tbody><tr><td class="code"><pre>code snippet</pre></td></tr></tbody></table></figure></td>
</tr>
</tbody></table>
<div class="note info">
            <p>更多语法请参考 <a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">基础语法 | Markdown Guide</a> 和 <a href="https://www.markdownguide.org/extended-syntax" target="_blank" rel="noopener">扩展语法 | Markdown Guide</a></p>
          </div>

<h1 id="Hexo内置标签"><a href="#Hexo内置标签" class="headerlink" title="Hexo内置标签"></a>Hexo内置标签</h1><div class="note info">
            <p>本章节参考 <a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Ivan.nginx | Hexo Theme Next主题样式测试</a> 及 <a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">内置标签 - NexT 使用文档</a></p>
          </div>

<h2 id="文本居中标签"><a href="#文本居中标签" class="headerlink" title="文本居中标签"></a>文本居中标签</h2><p>居中标签效果如下：</p>
<blockquote class="blockquote-center"><p>我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。</p>
</blockquote>

<p>一般在引用单行文本时使用，如作为文章开篇题词。</p>
<p>可以通过以下几种方式使用该标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>blah blah blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签方式 --&gt;</span></span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h2><p>可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p>
<figure class="highlight js"><figcaption><span>Hellow World</span><a href="http://yearito.cn" target="_blank" rel="noopener">链接地址</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure>

<p>代码块进阶语法规则：</p>
<div style="background-color: #f7f7f7; margin: 20px 0; padding: 10px;border-radius: 5px; font-family: consolas;">
  &#x60;&#x60;&#x60; [language] [title] [url] [link text]<br>
  code snippet <br>
  &#x60;&#x60;&#x60;
</div>

<p>其中，各参数意义如下：</p>
<ul>
<li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li>
<li>title：代码块标题，将会显示在左上角</li>
<li>url：链接地址，如果没有指定link text则会在右上角显示link</li>
<li>link text：链接名称，指定url后有效，将会显示在右上角</li>
</ul>
<p>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以url为分界，左侧除了第一个单词会被解析为language，其他所有单词都会被解析为title，而右侧的所有单词都会被解析为link text。</p>
<p>如果不想填写title，可以在language和url之间添加至少三个空格。</p>
<div class="note info">
            <p>代码块支持多种语言高亮预设，详细的语言列表可查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.nginx | Hexo代码块中的颜色方案</a>。</p>
          </div>

<p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"> highlight:</span><br><span class="line">   enable: true</span><br><span class="line">   line_number: false</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br><span class="line">   tab_replace:</span><br></pre></td></tr></table></figure>

<p>如果设置语言为diff，可以在代码前添加 <code>+</code> 和 <code>-</code> 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p>
<div class="note info">
            <p>更多代码块高亮的个性化设置请参见 <a href="https://www.ofind.cn/blog/HEXO/HEXO%E4%B8%8B%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%8B%93%E5%B1%95%E4%BF%AE%E6%94%B9.html#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E6%A0%87%E8%AE%B0" target="_blank" rel="noopener">猪猪侠 | Hexo下的语法高亮拓展修改</a></p>
          </div>

<h2 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h2><p>通过note标签可以为段落添加背景色，语法如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>[class] %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>支持的class种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定class。</p>
<p>各种class种类的效果如下：</p>
<div class="note primary">
            <p><strong>primary</strong> note tag</p>
          </div>

<div class="note success">
            <p><strong>success</strong> note tag</p>
          </div>

<div class="note info">
            <p><strong>info</strong> note tag</p>
          </div>

<div class="note warning">
            <p><strong>warning</strong> note tag</p>
          </div>

<div class="note danger">
            <p><strong>danger</strong> note tag</p>
          </div>

<div class="note ">
            <p>undefined class note tag</p>
          </div>

<p>更多配置可在主题配置文件中设置</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note 标签样式预设</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">modern</span>  <span class="comment"># simple | modern | flat | disabled</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span>  <span class="comment"># 是否显示图标</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span>  <span class="comment"># 圆角半径</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span>  <span class="comment"># 默认背景减淡效果，以百分比计算</span></span><br></pre></td></tr></table></figure>

<h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>通过label标签可以为文字添加背景色，语法如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&#123;% label [<span class="class"><span class="keyword">class</span>]<span class="meta">@text</span>  %&#125;</span></span><br></pre></td></tr></table></figure>

<p>支持的class种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p>
<p>使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center"><p>I heard the echo, <span class="label default">from the valleys and the heart</span><br><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br><br>Repeat outrightly, but also repeat the well-being of<br><br>Eventually <span class="label warning">swaying in the desert oasis</span><br><br><span class="label success">I believe</span> I am <br><br><span class="label primary">Born as the bright summer flowers</span><br><br>Do not withered undefeated fiery demon rule<br><br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br><br>Bored</p>
</blockquote>

<p>可在主题配置文件中设置 <code>label: false</code> 来取消label标签默认CSS样式。</p>
<h2 id="button按钮"><a href="#button按钮" class="headerlink" title="button按钮"></a>button按钮</h2><p>通过button标签可以快速添加带有主题样式的按钮，语法如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;% button /<span class="type">path</span>/<span class="keyword">to</span>/url/, <span class="type">text</span>, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure>

<p>也可简写为：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;% btn /<span class="type">path</span>/<span class="keyword">to</span>/url/, <span class="type">text</span>, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure>

<p>其中， 图标ID来源于 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 。</p>
<p>使用示例如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 标题,, 标题 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 图标, home %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span></span><br></pre></td></tr></table></figure>

<p><a class="btn" href="#">文本</a></p>
<p><a class="btn" href="#" title="标题">文本 & 标题</a></p>
<p><a class="btn" href="#"><i class="fa fa-home"></i>文本 & 图标</a></p>
<p><a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)</a></p>

<h2 id="tab标签"><a href="#tab标签" class="headerlink" title="tab标签"></a>tab标签</h2><p>tab标签用于快速创建tab选项卡，语法如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class="line">  标签页内容（支持行内标签）</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀</li>
<li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页</li>
<li>Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题</li>
<li>icon: 在标签页标题中添加Font awesome图标</li>
</ul>
<p>使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  &lt;!-- tab 标签页1 --&gt;</span><br><span class="line">    标签页1文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页2 --&gt;</span><br><span class="line">    标签页2文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页3 --&gt;</span><br><span class="line">    标签页3文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div>

<h2 id="引用站内链接"><a href="#引用站内链接" class="headerlink" title="引用站内链接"></a>引用站内链接</h2><p>可以通过如下语法引入站内文章的地址或链接：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_path</span> slug %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">post_link</span> slug [title] %&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的Markdown文件名。</p>
<p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p>
<p>如以下标签将会生成 <code></code></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_path</span> hexo-writing-skills %&#125;</span></span><br></pre></td></tr></table></figure>

<p>而以下标签则会生成 </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_link</span> hexo-writing-skills 链接标题 %&#125;</span></span><br></pre></td></tr></table></figure>

<p>这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。</p>
<h2 id="插入Swig代码"><a href="#插入Swig代码" class="headerlink" title="插入Swig代码"></a>插入Swig代码</h2><p>如果需要在页面内插入Swig代码，包括原生HTML代码，JavaScript脚本等，可以通过 raw 标签来禁止Markdown引擎渲染标签内的内容。语法如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> raw </span>%&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>该标签通常用于在页面内引入三方脚本实现特殊功能，尤其是当该三方脚本尚无相关hexo插件支持的时候，可以通过写原生Web页面的形式引入脚本并编写实现逻辑。</p>
<h2 id="插入Gist"><a href="#插入Gist" class="headerlink" title="插入Gist"></a>插入Gist</h2><p>如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>gist_id: Gist仓库页面url中最后一段随机字符串</li>
<li>filename: Gist中的文件名</li>
</ul>
<p>如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。</p>
<p>如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。</p>
<div class="note warning">
            <p>在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p>
          </div>

<h1 id="插入多媒体"><a href="#插入多媒体" class="headerlink" title="插入多媒体"></a>插入多媒体</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>Markdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。</p>
<p>所以在Markdown中插入一张图片要分为以下几步来进行：</p>
<ol>
<li>将图片资源上传到图床中</li>
<li>获取图片外链</li>
<li>插入到Markdown文档中</li>
</ol>
<p>对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：</p>
<ul>
<li><p>图床是否提供了便捷的图形化管理工具用于图片的上传下载？</p>
<p>如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181023103058966.png" alt="腾讯云COS客户端界面截图" title="腾讯云COS客户端界面截图"></p>
</li>
<li><p>是否能够方便的插入到Markdown文档中？</p>
<p>这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。</p>
<p>其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。</p>
</li>
</ul>
<div class="note info">
            <p>本站使用腾讯云COS提供对象存储服务。</p>
          </div>

<h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><p>在网页版云音乐中找到歌曲，点击生成外链播放器：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png" alt="获取歌曲外链" title="获取歌曲外链"></p>
<p>根据个人喜好选择播放器尺寸和播放模式：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png" alt="获取插件代码" title="获取插件代码"></p>
<p>将获取到的 <code>iframe</code> 代码添加到页面中，默认样式如下：</p>
<div class="fluid-vids" style="position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="329" height="86" src="//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66" style="width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;">
</iframe></div>

<p>播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 <code>iframe</code> 在渲染的时候被处理过，外层包了一个类名为 <code>fluid-vids</code> 的 <code>div</code> 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 <code>music.163.com</code> 域名包含在了处理逻辑内，只需要将该行删除即可。</p>
<figure class="highlight js"><figcaption><span>themes\next\source\js\src\utils.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> SUPPORTED_PLAYERS = [</span><br><span class="line">  <span class="string">'www.youtube.com'</span>,</span><br><span class="line">  <span class="string">'player.vimeo.com'</span>,</span><br><span class="line">  <span class="string">'player.youku.com'</span>,</span><br><span class="line">  <span class="comment">//'music.163.com',</span></span><br><span class="line">  <span class="string">'www.tudou.com'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 <code>iframe</code> 包在 <code>&lt;center&gt;</code> 标签内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">329</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<center>
  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="329" height="86" src="//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66">
  </iframe>
</center>

<div class="note warning">
            <p>其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 <code>&lt;center&gt;</code> <code>&lt;strong&gt;</code> 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。</p>
          </div>

<p>如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 <code>iframe</code> 元素前后是否多了 <code>&lt;br&gt;</code> 元素：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png" alt="播放器前后空行代码" title="播放器前后空行代码"></p>
<p>造成这样的原因是Markdown渲染引擎把 <code>&lt;center&gt;</code> 标签和 <code>&lt;iframe&gt;</code> 标签之间的回车当作 <code>&lt;br&gt;</code> 来处理了。参考链接: <a href="https://github.com/hexojs/hexo/issues/1388" target="_blank" rel="noopener">Hexo issues #1388</a></p>
<p>简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。</p>
<p>另外一种方案是在站点配置文件中添加如下代码：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>重启服务器之后更改才会生效。</p>
<div class="note warning">
            <p>网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。</p>
          </div>

<h2 id="Aplayer音频播放器"><a href="#Aplayer音频播放器" class="headerlink" title="Aplayer音频播放器"></a>Aplayer音频播放器</h2><p><a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">APlayer</a>是由 <a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYgod</a> 编写的HTML5音频播放器，提供了另一种音频播放方案。</p>
<div class="note ">
            <p>了解诞生背景： <a href="https://diygod.me/2167/" target="_blank" rel="noopener">APlayer - 送给小狐狸和小兔子的 HTML5 播放器</a></p>
          </div>

<p>借助 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a> 插件，可以通过标签的形式方便快捷的插入音频组件。</p>
<p>在站点根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>

<p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>title: 曲目标题</li>
<li>author: 曲目作者</li>
<li>url: 音乐文件 URL 地址</li>
<li>picture_url: (可选) 音乐对应的图片地址</li>
<li>narrow: （可选）播放器袖珍风格</li>
<li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li>
<li>width:xxx: (可选) 播放器宽度 (默认: 100%)</li>
<li>lrc:xxx: （可选）歌词文件 URL 地址</li>
</ul>
<p>示例效果如下：</p>

        <div id="aplayer-LVVQeaNk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-LVVQeaNk"),
            narrow: false,
            autoplay: false,
            showlrc: 3,
            music: {
              title: "前前世世 -《君の名は。》",
              author: "RADWIMPS",
              url: "https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3",
              pic: "http://pic.5577.com/up/2016-12/201612891712576.png",
              lrc: "https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc"
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>

<p>当开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="noopener">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> aplayer <span class="string">"Caffeine"</span> <span class="string">"Jeff Williams"</span> <span class="string">"caffeine.mp3"</span> <span class="string">"picture.jpg"</span> <span class="string">"lrc:caffeine.txt"</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//Aplayer 播放器居中</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.aplayer</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>插入播放列表功能请参考： <a href="https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist" target="_blank" rel="noopener">hexo-tag-aplayer | With playlist</a></p>
          </div>

<h2 id="Dpalyer视频播放器"><a href="#Dpalyer视频播放器" class="headerlink" title="Dpalyer视频播放器"></a>Dpalyer视频播放器</h2><p><a href="http://dplayer.js.org/#/" target="_blank" rel="noopener">DPlayer</a> 是一款简洁美观的HTML5视频播放器，同样出自 <a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYgod</a> 之手，支持弹幕互动。</p>
<div class="note ">
            <p>了解诞生背景： <a href="https://diygod.me/2648/" target="_blank" rel="noopener">DPlayer – 最好看的弹幕播放器送给最好看的宫园薰</a></p>
          </div>

<p>借助 <a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a> 插件，可以通过标签的形式方便快捷的插入视频组件。</p>
<p>在站点根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-tag-dplayer --save</span><br></pre></td></tr></table></figure>

<p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% dplayer <span class="string">"url=video-url"</span> <span class="string">"pic=image-url"</span> ... [<span class="string">"key=value"</span>] %&#125;</span><br></pre></td></tr></table></figure>

<p>此处列举部分重要 <code>key</code> 的参数意义:</p>
<div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">播放器</a></li><li class="tab"><a href="#tab标签列表-2">视频</a></li><li class="tab"><a href="#tab标签列表-3">字幕</a></li><li class="tab"><a href="#tab标签列表-4">弹幕</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><ul>
<li>autoplay：是否开启视频自动播放，默认为 <code>fasle</code></li>
<li>loop：是否开启视频循环播放，默认为 <code>false</code></li>
<li>screenshot：是否开启截图，默认为 <code>false</code></li>
<li>mutex：是否禁止多个播放器同时播放，默认为 <code>true</code></li>
<li>dmunlimited：是否开启海量弹幕模式，默认为 <code>false</code></li>
<li>preload：预加载模式，可选 <code>note</code> <code>metadata</code> <code>auto</code></li>
<li>theme：主题色</li>
<li>lang：语言，可选 <code>en</code> <code>zh-cn</code> <code>zh-tw</code></li>
<li>logo：左上角的Logo</li>
<li>volume：默认音量，默认为0.7</li>
<li>width：播放器宽度</li>
<li>height：播放器长度</li>
</ul></div><div class="tab-pane" id="tab标签列表-2"><ul>
<li>url：视频链接</li>
<li>pic：视频封面</li>
<li>thumbnails：视频缩略图，可以使用 <a href="https://github.com/MoePlayer/DPlayer-thumbnails" target="_blank" rel="noopener">DPlayer-thumbnails</a> 生成</li>
<li>vidtype：视频类型，可选 <code>auto</code> <code>hls</code> <code>flv</code> <code>dash</code> 或其他自定义类型</li>
</ul></div><div class="tab-pane" id="tab标签列表-3"><ul>
<li>suburl：字幕链接</li>
<li>subtype：字幕类型，可选 <code>webvtt</code> <code>ass</code>，目前只支持 <code>webvtt</code></li>
<li>subbottom：字幕距离播放器底部的距离，如 <code>10px</code> <code>10%</code></li>
<li>subcolor：字幕颜色</li>
</ul></div><div class="tab-pane" id="tab标签列表-4"><ul>
<li>id：弹幕id</li>
<li>api：弹幕api</li>
<li>token：弹幕后端验证 token</li>
<li>addition：额外外挂弹幕</li>
<li>dmuser：弹幕用户名</li>
<li>maximum：弹幕最大数量</li>
</ul></div></div></div>

<p>示例效果如下：</p>
<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"screenshot":true,"video":{"url":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4","pic":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>也可以通过raw标签引入原生Dplayer以使用更多配置项，示例代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dplayer"</span> <span class="attr">className</span>=<span class="string">"dplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">class</span>=<span class="string">"dplayer-css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> dp = <span class="keyword">new</span> DPlayer(&#123;</span></span><br><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.querySelector(<span class="string">'#dplayer'</span>),</span></span><br><span class="line"><span class="actionscript">    autoplay: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">    theme: <span class="string">'#FADFA3'</span>,</span></span><br><span class="line"><span class="actionscript">    loop: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    screenshot: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    hotkey: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    logo: <span class="string">'logo.png'</span>,</span></span><br><span class="line">    volume: 0.7,</span><br><span class="line"><span class="actionscript">    mutex: <span class="literal">true</span>,</span></span><br><span class="line">    video: &#123;</span><br><span class="line"><span class="actionscript">      url: <span class="string">'demo.mp4'</span>,</span></span><br><span class="line"><span class="actionscript">      pic: <span class="string">'demo.png'</span>,</span></span><br><span class="line"><span class="actionscript">      thumbnails: <span class="string">'thumbnails.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">      type: <span class="string">'auto'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    subtitle: &#123;</span><br><span class="line"><span class="actionscript">      url: <span class="string">'webvtt.vtt'</span>,</span></span><br><span class="line"><span class="actionscript">      type: <span class="string">'webvtt'</span>,</span></span><br><span class="line"><span class="actionscript">      fontSize: <span class="string">'25px'</span>,</span></span><br><span class="line"><span class="actionscript">      bottom: <span class="string">'10%'</span>,</span></span><br><span class="line"><span class="actionscript">      color: <span class="string">'#b7daff'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    danmaku: &#123;</span><br><span class="line"><span class="actionscript">      id: <span class="string">'demo'</span>,</span></span><br><span class="line"><span class="actionscript">      api: <span class="string">'https://api.prprpr.me/dplayer/'</span>,</span></span><br><span class="line"><span class="actionscript">      token: <span class="string">'demo'</span>,</span></span><br><span class="line">      maximum: 3000,</span><br><span class="line"><span class="actionscript">      user: <span class="string">'DIYgod'</span>,</span></span><br><span class="line">      margin: &#123;</span><br><span class="line"><span class="actionscript">        bottom: <span class="string">'15%'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      unlimited: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    contextmenu: [</span><br><span class="line">      &#123;</span><br><span class="line"><span class="actionscript">        text: <span class="string">'custom contextmenu'</span>,</span></span><br><span class="line"><span class="actionscript">        link: <span class="string">'https://github.com/MoePlayer/DPlayer'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>更多配置参数请参考 <a href="http://dplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">Dplayer 官方中文文档</a></p>
          </div>

<h1 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h1><p>Hexo写作必备一款好用的Markdown文档编辑器，下面推荐几款我比较喜欢的。</p>
<h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181106041459974.png" alt="Sublime Text 3 用户界面" title="Sublime Text 3 用户界面"></p>
<p>Sublime Text 3 是一款轻量级的文档编辑器，响应速度极快，社区活跃，主题插件也很丰富，在Windows下可以取代记事本成为默认的文档编辑器，也可以通过集成不同的编程依赖包成为功能强大的IDE，还可以搭配上Markdown插件成为网络作家的写作工具。</p>
<p>推荐两个比较实用的Markdown写作插件：Markdown Editing和OmniMarkupPreviewer。</p>
<h3 id="Markdown-Editing"><a href="#Markdown-Editing" class="headerlink" title="Markdown Editing"></a><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a></h3><p>支持Markdown语法高亮，提供Markdown编辑的快捷键，提供多种主题样式。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + V</td>
<td>在选中文本上创建行内链接或将剪贴板内容粘贴为所选文本的行内链接</td>
</tr>
<tr>
<td>Ctrl + Alt + R</td>
<td>在选中文本上创建参考式链接或将剪贴板内容粘贴为所选文本的参考式链接</td>
</tr>
<tr>
<td>Shift + Win + K</td>
<td>在选中文本上创建行内图片或将剪贴板内容粘贴为所选文本的行内图片</td>
</tr>
<tr>
<td>Alt + B</td>
<td>加粗强调，当未选中文本时默认加粗光标所在单词，再次按键取消加粗</td>
</tr>
<tr>
<td>Alt + I</td>
<td>斜体强调，当未选中文本时默认倾斜光标所在单词，再次按键取消斜体</td>
</tr>
<tr>
<td>Ctrl + 1~6</td>
<td>在空行上添加对应数字级别的标题，选中已有标题时按键可修改标题级别</td>
</tr>
<tr>
<td>Alt + Shift + 6</td>
<td>添加脚注</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>折叠/展开当前章节</td>
</tr>
<tr>
<td>Ctrl + Shift + Tab</td>
<td>折叠指定级别下的所有章节</td>
</tr>
<tr>
<td>Ctrl + Alt + Shift + PageUp/PageDown</td>
<td>跳转到上/下一个同级或更高级的其他标题</td>
</tr>
<tr>
<td>Ctrl + Shift + PageUp/PageDown</td>
<td>跳转到上/下一个标题</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>显示Markdown文件标题</td>
</tr>
</tbody></table>
<h3 id="OmniMarkupPreviewer"><a href="#OmniMarkupPreviewer" class="headerlink" title="OmniMarkupPreviewer"></a><a href="https://github.com/timonwong/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer</a></h3><p>用于在浏览器中实时预览Markdown文档，用户可以边在Sublime中写作边在浏览器中查看文档的实时变化，而不需要手动刷新浏览器。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + O</td>
<td>在浏览器中预览</td>
</tr>
<tr>
<td>Ctrl + Alt + X</td>
<td>导出为HMTL</td>
</tr>
<tr>
<td>Ctrl + Alt + C</td>
<td>以HTML格式拷贝到剪贴板</td>
</tr>
</tbody></table>
<div class="note warning">
            <p>PlainTasks插件（一款Todo List工具）会与OmniMarkupPreviewer产生冲突，导致OmniMarkupPreviewer功能异常，如编辑后无法实时预览，<a href="https://github.com/timonwong/OmniMarkupPreviewer/issues/111" target="_blank" rel="noopener">资源样式加载错误</a> 等。如果不想卸载PlainTasks，可以在使用OmniMarkupPreviewer时暂时禁用PlainTasks，具体做法为在Sublime Text的User Settings中添加如下代码：</p>
          </div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"ignored_packages":[</span><br><span class="line">  <span class="string">"PlainTasks"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-Editor"><a href="#Hexo-Editor" class="headerlink" title="Hexo Editor"></a><a href="https://github.com/zhuzhuyule/HexoEditor" target="_blank" rel="noopener">Hexo Editor</a></h2><p>Hexo Editor是专为Hexo博客写作打造的文件编辑器，界面极简美观，支持实时预览，支持图片上传。</p>
<p><img src="https://raw.githubusercontent.com/zhuzhuyule/HexoEditor/master/screenshots/main.png" alt="Hexo Editor 用户界面" title="Hexo Editor 用户界面"></p>
<div class="note warning">
            <p>本人在实际使用过程中发现该软件功能不太稳定，插入图片有时候会卡顿，甚至出现程序崩溃的现象。</p>
          </div>

<h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Tab</td>
<td>增加缩进</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>减少缩进</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>加粗</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>斜体</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl + `</td>
<td>将当前单词标记为代码</td>
</tr>
<tr>
<td>Ctrl + L</td>
<td>插入无序列表</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>插入有序列表</td>
</tr>
<tr>
<td>Ctrl + ]</td>
<td>降低标题级别</td>
</tr>
<tr>
<td>Ctrl + [</td>
<td>提升标题级别</td>
</tr>
<tr>
<td>Ctrl + =</td>
<td>插入引用</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>插入链接</td>
</tr>
<tr>
<td>Ctrl + Alt + U</td>
<td>插入图片</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>插入表格</td>
</tr>
<tr>
<td>Ctrl + V</td>
<td>粘贴为纯文本（去除格式）</td>
</tr>
<tr>
<td>Shift + Ctrl + V</td>
<td>粘贴（保留源格式）</td>
</tr>
<tr>
<td>Alt + F</td>
<td>格式化表格</td>
</tr>
</tbody></table>
<h3 id="操作快捷键"><a href="#操作快捷键" class="headerlink" title="操作快捷键"></a>操作快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + N</td>
<td>新建Hexo文档</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>new hexo document</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>open md document</td>
</tr>
<tr>
<td>Ctrl + S</td>
<td>save md document</td>
</tr>
<tr>
<td>Shift + Ctrl + S</td>
<td>save as</td>
</tr>
<tr>
<td>Alt + Ctrl + S</td>
<td>open settings</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>toggle write mode</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>toggle preview mode</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>toggle read mode</td>
</tr>
</tbody></table>
<h2 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181023095629471.png" alt="Mweb 用户界面" title="Mweb 用户界面"></p>
<p>MWeb是Mac平台上一款专业的Markdown写作、记笔记、静态博客生成软件，支持图片上传。他的与众不同在于，除了具备一般Markdown编辑器所具有的一切基本功能之外，还支持以下特性：</p>
<ul>
<li>支持LaTeX公式、TOC</li>
<li>支持丰富的画图库，如mermaid、Graphviz、echarts、plantuml、流程图、时序图等</li>
<li>支持插入图片后自动上传到图床</li>
<li>拥有及其强大的发布功能，支持一键发布到各大博客平台和笔记软件中</li>
</ul>
<p>尽管拥有如此丰富的特性，但界面仍保持清爽简洁，开发者说到：</p>
<blockquote>
<p>原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。</p>
</blockquote>
<p>目前由oulvhai一人独自开发维护。</p>
<h2 id="Dillinger"><a href="#Dillinger" class="headerlink" title="Dillinger"></a><a href="https://dillinger.io/" target="_blank" rel="noopener">Dillinger</a></h2><p>一款优雅的在线Markdown编辑器，界面美观简洁。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181020114433264.png" alt="Dillinger 用户界面" title="Dillinger 用户界面"></p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文介绍了Hexo博客的几项关键写作技巧，包括Markdown的基本语法，Hexo主题的内置标签等，本文还介绍了如何在文章中利用图床外链插入图片，如何利用Aplayer / Dplayer等音视频播放器插件在页面内插入多媒体元素等，并列举了几款写作工具以供选择，希望你能从中找到用起来最顺手的一款。如果你有更高级的个性化需求，你可以关注本系列的后续几篇文章：</p>
<ul>
<li>想要进一步美化主题，添加动效以及交互，请参考本系列中的 。</li>
<li>想要深度定制个性化站点，请参考本系列中的 。</li>
<li>想要了解如何将站点部署到公网，请参考本系列中的 </li>
</ul>
<div class="reference-linking">参考链接</div>

<ul>
<li><a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown指南</a></li>
<li><a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">NexT使用文档 | 内置标签</a></li>
<li><a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Ivan.Nginx | Hexo Theme Next主题样式测试</a></li>
<li><a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.Nginx | Hexo代码块中的颜色方案</a></li>
<li><a href="https://www.ofind.cn/blog/HEXO/HEXO下的语法高亮拓展修改.html" target="_blank" rel="noopener">猪猪侠 | Hexo下的语法高亮拓展修改</a></li>
<li><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer | 中文文档</a></li>
<li><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer | README</a></li>
<li><a href="http://dplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">Dplayer 官方中文文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客系列：基础建站篇</title>
    <url>/hexo-get-started/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>Hexo 是一个高效简洁的静态博客框架，支持 Markdown 写作语法，插件丰富，主题优雅，部署方便。目前已成为多数人博客建站的选择。</p>
          </div>

<a id="more"></a>

<p>本文为 Hexo 搭建个人博客系列中的第一篇。第一章中介绍了如何在本地搭建 Hexo 博客，第二章中介绍了如何安装使用 Next 主题，第三章和第四章分别介绍了针对于站点和文章详情页的一些基础优化方案。</p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>在命令行中通过 npm 来安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><code>-g</code> 表示全局安装，会将 Hexo 命令加入环境变量中，以使其在 cmd 下有效。</p>
<div class="note info">
            <p>Hexo 依赖于 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a> ，所以在安装 Hexo 之前先确保已安装了这两项应用。</p>
          </div>

<p>新建博客目录，然后在该路径下执行初始化命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>官方教程中提到要在项目目录下执行 <code>npm install</code> 命令，事实上不必如此，在执行 <code>hexo init</code> 的过程中就已经自动安装好了项目依赖。</p>
          </div>

<p>执行完毕后，将会生成以下文件结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure>

<p>在根目录下执行如下命令启动 hexo 的内置 Web 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>该命令将会调用 Markdown 引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的 Web 资源目录的。该命令还会启动一个简易的 Web 服务器用于提供对内存中网页资源的访问（工作机制类似于 webpack-dev-server），Web 服务器默认监听4000端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png" alt="Hexo 默认主题首页" title="Hexo 默认主题首页"></p>
<p>此外，可以通过添加命令行参数来支持高级用法：</p>
<ul>
<li>当4000端口已被其他应用占用时，可以添加 <code>-p</code> / <code>--port</code> 参数来设置 Web 服务监听的端口号，如<code>hexo s -p 8000</code> ,这时访问地址为 <code>localhost:8000</code> 。</li>
<li>默认情况下，hexo 监听项目目录的文件变化，用户对于项目文件的任何改动都会触发实时解析编译并更新内存中的网页资源，也就是说，用户在本地修改后刷新浏览器就可以看到改动效果。如果不希望 hexo 监听项目目录的文件变化，可以添加 <code>-s</code> / <code>--static</code> 参数，这样本地改动就不会触发 hexo 实时解析更新。</li>
</ul>
<h1 id="更换Next主题"><a href="#更换Next主题" class="headerlink" title="更换Next主题"></a>更换Next主题</h1><p>Next 作为一款符合广大程序员审美的主题，还是有着较高的出场率的。Hexo 中切换主题的方式非常简单，只需要将主题文件拷贝至根目录下的 <code>themes</code> 文件夹中， 然后修改 <code>_config.yml</code> 文件中的 <code>theme</code> 字段即可。</p>
<p>在根目录下执行以下命令下载主题文件：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span>.git themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>注意！ Next 仓库已经从 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">iissnan/hexo-theme-next</a> 转移到了 <a href="https://github.com/theme-next/hexo-theme-next/releases" target="_blank" rel="noopener">theme-next/hexo-theme-next</a> ，并在新仓库中发布了 v7.5.0 版本，后续维护也将在新仓库中开展。如果你仍在使用旧仓库中的 Next 版本，可能会遇到各种 Bug 。</p>
          </div>

<p>打开站点配置文件，将 <code>theme</code> 字段的值修改为 <code>next</code>。</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>这个时候刷新浏览器页面并不会发生变化，需要重启服务器并刷新才能使主题生效。</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102095611506.png" alt="Next 主题首页" title="Next 主题首页"></p>
<div class="note info">
            <p>如果重启服务器仍无效，尝试使用 <code>hexo clean</code> 清除缓存</p>
          </div>

<p>Next 默认主题风格为 Muse，用户可以在主题配置文件中修改 <code>scheme</code> 字段以选择自己喜欢的主题风格：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h1 id="站点优化"><a href="#站点优化" class="headerlink" title="站点优化"></a>站点优化</h1><p>根目录下的 _config.yml 文件负责站点的相关配置，用户可以通过修改该文件来自定义站点内容或功能，修改后需要重启服务器才能看到效果。</p>
<p>本节通过修改站点配置文件完善了网站标题、网站描述、社交链接、站点版权信息、友情链接等，效果如下图：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/Snipaste_2018-11-17_17-01-51.png" alt="站点概览" title="站点概览"></p>
<h2 id="完善站点基础信息"><a href="#完善站点基础信息" class="headerlink" title="完善站点基础信息"></a>完善站点基础信息</h2><p>在站点配置文件中完善网站基本信息：</p>
<blockquote>
<p>文件位置：~/blog/_config.yml</p>
</blockquote>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Time</span> <span class="bullet">-</span> <span class="string">Container</span>  <span class="comment"># 站点名称</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Stay</span> <span class="string">hungry,</span> <span class="string">stay</span> <span class="string">foolish.</span>  <span class="comment"># 站点描述</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 设置网站语言为简体中文</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">staySimple</span>  <span class="comment"># 作者名称</span></span><br></pre></td></tr></table></figure>

<p>每个字段的冒号与值之间需要 <strong>间隔一个空格</strong>。</p>
<h2 id="首页显示文章摘要"><a href="#首页显示文章摘要" class="headerlink" title="首页显示文章摘要"></a>首页显示文章摘要</h2><p>根据默认的主题配置，首页将会显示每一篇文章的全文，如果想要只显示文章摘要，可以在主题配置文件中做出如下更改：</p>
<blockquote>
<p>文件位置：~/blog/themes/next/_config.yml</p>
</blockquote>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 开启自动摘要提取</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span>   <span class="comment"># 摘要长度</span></span><br></pre></td></tr></table></figure>

<p>此时将会从文章中提取150个字符作为摘要。</p>
<p>用户可以在文章中通过 <code>&lt;!-- more --&gt;</code> 标记来精确划分摘要信息，标记之前的段落将作为摘要显示在首页。</p>
<p>如果在文章的 Front-Matter 中有非空的 <code>description</code> 字段，则该字段的内容会被作为摘要显示在首页。</p>
<h2 id="修改站点页脚"><a href="#修改站点页脚" class="headerlink" title="修改站点页脚"></a>修改站点页脚</h2><p>在主题配置文件中修改网站页脚信息：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span>  <span class="comment"># 底部信息区</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2018</span>  <span class="comment"># 建站时间</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">heart</span>   <span class="comment"># 图标名称</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span>   <span class="comment"># 开启动画</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#ff0000"</span>   <span class="comment"># 图标颜色</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 显示由 Hexo 强力驱动</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span>  <span class="comment"># 隐藏 Hexo 版本号</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 显示所用的主题名称</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span>  <span class="comment"># 隐藏主题版本号</span></span><br></pre></td></tr></table></figure>

<p>更改后效果如下：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102094925440.png" alt="站点页脚" title="站点页脚"></p>
<h2 id="修改网站-Favicon"><a href="#修改网站-Favicon" class="headerlink" title="修改网站 Favicon"></a>修改网站 Favicon</h2><p>Favicon 即浏览器标签左侧的图标。下载自己喜欢的图标置于 <code>themes\next\source\images\</code> 目录下，命名方式参考主题配置文件中的 <code>favicon</code> 字段。</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span>  <span class="comment"># 小图标</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span>  <span class="comment"># 大图标</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span>  <span class="comment"># 苹果图标</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span>  <span class="comment"># safari浏览器标签页图标</span></span><br></pre></td></tr></table></figure>

<h2 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h2><p>在主题配置文件中修改相应字段：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">yearito:</span> <span class="string">http://yearito.cn/</span></span><br></pre></td></tr></table></figure>

<h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><p>用户可以在主题配置文件中根据样例提示添加个人社交软件链接：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yourname@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/yourname</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line">  <span class="attr">Google:</span> <span class="string">https://plus.google.com/yourname</span> <span class="string">||</span> <span class="string">google</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/yourname</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line">  <span class="attr">FB Page:</span> <span class="string">https://www.facebook.com/yourname</span> <span class="string">||</span> <span class="string">facebook</span></span><br><span class="line">  <span class="attr">VK Group:</span> <span class="string">https://vk.com/yourname</span> <span class="string">||</span> <span class="string">vk</span></span><br><span class="line">  <span class="attr">StackOverflow:</span> <span class="string">https://stackoverflow.com/yourname</span> <span class="string">||</span> <span class="string">stack-overflow</span></span><br><span class="line">  <span class="attr">YouTube:</span> <span class="string">https://youtube.com/yourname</span> <span class="string">||</span> <span class="string">youtube</span></span><br><span class="line">  <span class="attr">Instagram:</span> <span class="string">https://instagram.com/yourname</span> <span class="string">||</span> <span class="string">instagram</span></span><br><span class="line">  <span class="attr">Skype:</span> <span class="string">skype:yourname?call|chat</span> <span class="string">||</span> <span class="string">skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span>   </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 显示社交软件图标</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span>  <span class="comment"># 显示图标的同时显示文字</span></span><br></pre></td></tr></table></figure>

<p>如果要取消社交图标前的小圆点，可以在自定义样式文件中添加如下样式规则：</p>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//隐藏社交图标前的圆点</span><br><span class="line"><span class="selector-class">.links-of-author</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.links-of-author</span> <span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加版权协议"><a href="#添加版权协议" class="headerlink" title="添加版权协议"></a>添加版权协议</h2><p>在主题配置文件中开启相关字段并选择知识共享协议：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h2 id="点击头像回到首页"><a href="#点击头像回到首页" class="headerlink" title="点击头像回到首页"></a>点击头像回到首页</h2><div class="note info">
            <p>本章节参考 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化#5.13</a></p>
          </div>

<p>修改侧边栏模板代码:</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\sidebar.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  &#123;% if theme.avatar.url %&#125;</span><br><span class="line"><span class="addition">+   &lt;a href="/"&gt;</span></span><br><span class="line">      &lt;img class="site-author-image" itemprop="image"</span><br><span class="line">        src="&#123;&#123; url_for( theme.avatar.url | default(theme.images + '/avatar.gif') ) &#125;&#125;"</span><br><span class="line">        alt="&#123;&#123; author &#125;&#125;" /&gt;</span><br><span class="line"><span class="addition">+   &lt;/a&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文章页优化"><a href="#文章页优化" class="headerlink" title="文章页优化"></a>文章页优化</h1><p>主题目录下的 themes\next\_config.yml 文件负责与主题相关的配置，用户可以通过修改该文件来自定义与主题相关的内容或功能，修改后刷新浏览器即可即时生效。</p>
<h2 id="修改文章目录导航"><a href="#修改文章目录导航" class="headerlink" title="修改文章目录导航"></a>修改文章目录导航</h2><h3 id="取消数字编号"><a href="#取消数字编号" class="headerlink" title="取消数字编号"></a>取消数字编号</h3><p>在主题配置文件中关闭目录中的数字编号：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>  <span class="comment"># 关闭目录中的数字编号</span></span><br></pre></td></tr></table></figure>

<p>这里建议不关闭目录中的数字编号</p>
<h3 id="展开全部目录层级"><a href="#展开全部目录层级" class="headerlink" title="展开全部目录层级"></a>展开全部目录层级</h3><p>默认情况下文章的多级目录是折叠的，点击才会触发下级菜单的展开，并且同时只能展开一个目录分支，这会造成在点击不同目录标题的时候目录跳来跳去。如果你想实现默认展开全部目录的功能，可以在自定义样式文件中添加以下代码：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//TOC目录默认全部展开</span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="默认展开两级目录"><a href="#默认展开两级目录" class="headerlink" title="默认展开两级目录"></a>默认展开两级目录</h3><p>通常文章内会出现多级标题，对应的目录里就会有多级导航出现，这时候一些原本你不希望出现的次要标题也会在目录中出现并且无法折叠。可以通过以下样式实现默认只展开两级目录，这样一来就通过一个折中的方案完美解决了目录折叠的问题。</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//TOC目录默认展开两级</span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-level-1</span>&gt;<span class="selector-class">.nav-child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="只显示两级目录"><a href="#只显示两级目录" class="headerlink" title="只显示两级目录"></a>只显示两级目录</h3><p>如果你根本不想让三级及以上的标题出现TOC导航目录中，可以考虑在自定义样式文件中添加以下代码：</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//TOC目录默认只显示两级目录</span><br><span class="line"><span class="selector-class">.nav-level-2</span> &gt; <span class="selector-class">.nav-child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主动隐藏文章目录"><a href="#主动隐藏文章目录" class="headerlink" title="主动隐藏文章目录"></a>主动隐藏文章目录</h3><p>如果你写了一篇并不算长的文章，没有层层嵌套的多级目录结构，此时侧边的文章目录空荡荡的就有点鸡肋了。修改侧边栏布局模板中的相关逻辑代码：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\sidebar.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &#123;% set display_toc = is_post and theme.toc.enable %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% set display_toc = is_post and theme.toc.enable and not page.hide_toc %&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后就可在 Front-Matter 中设定变量 hide_toc 用于控制是否隐藏侧边目录。</p>
<h2 id="修改文章-meta-信息"><a href="#修改文章-meta-信息" class="headerlink" title="修改文章 meta 信息"></a>修改文章 meta 信息</h2><p>默认主题配置中，标题下方会显示文章的创建时间、文章的修改时间、文章分类信息等元数据，用户可以在主题配置文件中自定义设置需要显示的 meta 信息：</p>
<figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span>  <span class="comment"># 显示文字说明</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>  <span class="comment"># 显示文章创建时间</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span>  <span class="comment"># 隐藏文章修改时间</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span>  <span class="comment"># 只有当修改时间和创建时间不是同一天的时候才显示</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">false</span>  <span class="comment"># 隐藏分类信息</span></span><br></pre></td></tr></table></figure>

<h2 id="中英文之间自动添加空格"><a href="#中英文之间自动添加空格" class="headerlink" title="中英文之间自动添加空格"></a>中英文之间自动添加空格</h2><p>该功能由 <a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">pangu</a>  提供，在 Next v7.5.0 版本中集成了插件到项目中，如果使用只需在主题配置文件中设置 <code>pangu: true</code> 即可启用该动能。</p>
<div class="note warning">
            <p>不推荐使用 hexo-filter-auto-spacing 实现该功能，该插件会导致目录中带有中英文的标题失效，无法跳转到文章指定章节。</p>
          </div>

<h2 id="修正文末导航跳转逻辑"><a href="#修正文末导航跳转逻辑" class="headerlink" title="修正文末导航跳转逻辑"></a>修正文末导航跳转逻辑</h2><div class="note info">
            <p>本章节参考 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化#5.2</a></p>
          </div>

<p>如果不是看到 reuixiy 的文章，可能一辈子都不会注意到这个奇葩的逻辑：文章底部的左侧/右侧箭头分别导航到更旧/更新的文章链接，就好像你在手机相册里左滑却看到了更久以前的照片，细细想想这个逻辑毫无社会主义可言，至少没有中国特色。</p>
<p>修改文章布局模板：</p>
<figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% if not is_index and (post.prev or post.next) %&#125;</span><br><span class="line">  &lt;div class="post-nav"&gt;</span><br><span class="line">    &lt;div class="post-nav-next post-nav-item"&gt;</span><br><span class="line"><span class="deletion">-      &#123;% if post.next %&#125;</span></span><br><span class="line"><span class="addition">+      &#123;% if post.prev %&#125;</span></span><br><span class="line"><span class="deletion">-        &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-          &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.next.title &#125;&#125;</span></span><br><span class="line"><span class="addition">+          &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.prev.title &#125;&#125;</span></span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class="post-nav-divider"&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="post-nav-prev post-nav-item"&gt;</span><br><span class="line"><span class="deletion">-      &#123;% if post.prev %&#125;</span></span><br><span class="line"><span class="addition">+      &#123;% if post.next %&#125;</span></span><br><span class="line"><span class="deletion">-        &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-          &#123;&#123; post.prev.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="addition">+          &#123;&#123; post.next.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt;</span></span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><div class="note info">
            <p>不同版本的 Hexo 和 Next 主题之间配置项可能存在差异，本系列文章中的配置有效性以 Hexo v3.7.1和 Next v6.4.2 为准。</p>
          </div>

<p>至此你已经在本地搭建起了 Hexo 博客，更换到了 Next 主题，并对站点进行了一些基本的自定义配置，看起来已经是一个可以正常使用的站点了。但可能仅仅这样还无法满足你的高级需求，你可以关注本系列的后续几篇文章，将分别从不同的角度一步步的帮助你搭建一个功能更加强大，界面更加优雅的个人博客站点：</p>
<ul>
<li>想要了解和写作有关的语法技巧，请参考本系列中的 。</li>
<li>想要进一步美化主题，添加动效及交互，请参考本系列中的 。</li>
<li>想要深度定制个性化站点，请参考本系列中的 。</li>
<li>想要了解如何将站点部署到公网，请参考本系列中的 </li>
</ul>
<div class="reference-linking">参考链接</div>

<ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></li>
<li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT使用文档</a> （部分章节与 v6.x 配置不兼容）</li>
<li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
